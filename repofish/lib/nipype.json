{
    "": {
        "args": [
            {
                "default": "False) but only for posix systems",
                "name": "ault"
            }
        ]
    },
    "\"": {
        "args": [
            {
                "name": "big-endian). This is the ault \""
            }
        ]
    },
    "\" ": {
        "args": [
            {
                "name": "ault: mean image)\""
            }
        ]
    },
    "\" 3D: tica ": {
        "args": [
            {
                "name": "ault)"
            },
            {
                "name": "concat\""
            }
        ]
    },
    "\" lap, bic, mdl, aic, mean ": {
        "args": [
            {
                "name": "ault: lap)\""
            }
        ]
    },
    "\"the fiber orientation": {
        "args": [
            {
                "name": "s) are ined at a given \""
            }
        ]
    },
    "\"to determine outliers.  ": {
        "args": [
            {
                "name": "ault is [True"
            },
            {
                "name": "False])\""
            }
        ]
    },
    "#                 desc='produces an output file ": {
        "args": [
            {
                "name": "ault is fdt_paths)'"
            }
        ]
    },
    "# This input does not have a \"useault=True\" so the set_ault_terminal_output": {
        "args": [
            {
                "name": ""
            }
        ]
    },
    "#Always ined ": {
        "args": [
            {
                "name": "the arrays"
            }
        ]
    },
    "#if isined": {
        "args": [
            {
                "name": "self.inputs.output_csv_file"
            }
        ]
    },
    "% aults  ": {
        "args": [
            {
                "name": "seconds"
            }
        ]
    },
    "'": {
        "args": [
            {
                "default": "0)'",
                "name": "in mm - ault"
            }
        ]
    },
    "' files ": {
        "args": [
            {
                "default": " antsCT_)'",
                "name": "ault "
            }
        ]
    },
    "'\"threetensor\" ": {
        "args": [
            {
                "name": "three-tensor data). By ault"
            },
            {
                "name": "the program assumes that the input data '\\"
            }
        ]
    },
    "'''e.g 'Socrates[1]' ": {
        "args": [
            {
                "name": "ault) or 'Aristotle[1]'.'''"
            }
        ]
    },
    "'0 is nearest neighbor ": {
        "args": [
            {
                "name": "ault)'"
            }
        ]
    },
    "'Order 2 ": {
        "args": [
            {
                "name": "ault) is quadratic.'"
            }
        ]
    },
    "'Otherwise use antsRegistrationSyN.sh ": {
        "args": [
            {
                "default": " 0).'",
                "name": "ault "
            }
        ]
    },
    "'The LUT is square, with half the values calculated ": {
        "args": [
            {
                "name": "because L2 / L3 cannot be less than L1 / L3 by inition).' \\"
            }
        ]
    },
    "'The ault value is 0.1309 ": {
        "args": [
            {
                "name": "7.5 degrees).'"
            }
        ]
    },
    "'The ault value is 0.2618 ": {
        "args": [
            {
                "name": "15 degrees).'"
            }
        ]
    },
    "'constraint ": {
        "args": [
            {
                "name": "ault 100.0)'"
            }
        ]
    },
    "'displays to terminal immediately ": {
        "args": [
            {
                "name": "ault)"
            },
            {
                "name": "'"
            }
        ]
    },
    "'files ": {
        "args": [
            {
                "default": " _trans)'",
                "name": "ault "
            }
        ]
    },
    "'function.  The ault is 1.0 ": {
        "args": [
            {
                "name": "the peak must be equal or greater than the mean).'"
            }
        ]
    },
    "'in registrations ": {
        "args": [
            {
                "default": " 0)'",
                "name": "ault "
            }
        ]
    },
    "'in voxel order with outputdatatype datatype ": {
        "args": [
            {
                "name": "ault: double) otherwise.'"
            }
        ]
    },
    "'more cautious steps ": {
        "args": [
            {
                "default": " '",
                "name": "ault "
            }
        ]
    },
    "'nearestneighbour, trilinear ": {
        "args": [
            {
                "name": "ault)"
            },
            {
                "name": "sinc or spline'"
            }
        ]
    },
    "'parameters are set. The ault format is a ": {
        "args": [
            {
                "name": "4D) field-file. If the '"
            }
        ]
    },
    "'the linear frequency filtering parameters used for the initial linear spherical deconvolution step ": {
        "args": [
            {
                "default": " [ 1 1 1 0 0 ]).'",
                "name": "ault "
            }
        ]
    },
    "'this threshold ": {
        "args": [
            {
                "default": "0)'",
                "name": "in mm - ault"
            }
        ]
    },
    "'type of scalar ": {
        "args": [
            {
                "name": "ault)"
            },
            {
                "name": "vector"
            },
            {
                "name": "'"
            }
        ]
    },
    "'value ": {
        "args": [
            {
                "default": " 0). If a mask is specified",
                "name": "ault "
            },
            {
                "name": "the user can use '"
            }
        ]
    },
    "'xMaxProcess = traits.Int": {
        "args": [
            {
                "name": "1"
            },
            {
                "default": "\"Set ault maximum number of processes.\"",
                "name": "desc"
            },
            {
                "default": "\"-xMaxProcess %d\"",
                "name": "argstr"
            },
            {
                "default": "True)']",
                "name": "useault"
            }
        ]
    },
    "), hash_files=False, desc=\",               The filename for the new subject-specific scene inition file in the same format produced by Slicer3 ": {
        "args": [
            {
                "name": "in .mrml format). Only the components that were specified by the user on command line would be generated. Compatible components include inputVolume"
            },
            {
                "name": "outputVolume"
            },
            {
                "name": "outputLandmarksInInputSpace"
            },
            {
                "name": "outputLandmarksInACPCAlignedSpace"
            },
            {
                "name": "and outputTransform."
            },
            {
                "name": "\""
            },
            {
                "default": "\"--outputMRML %s\"",
                "name": "argstr"
            }
        ]
    },
    "...      a": {
        "args": []
    },
    "1=mono-exponential ": {
        "args": [
            {
                "default": "continous \\",
                "name": "ault and required for single shell). 2"
            }
        ]
    },
    ">>> fs.FSCommand.set_ault_subjects_dir": {
        "args": [
            {
                "name": "subjects_dir"
            }
        ]
    },
    ">>> func = ' func": {
        "args": [
            {
                "name": "arg1"
            },
            {
                "default": "5): return arg1 + arg2'",
                "name": "arg2"
            }
        ]
    },
    ">>> seg.inputs.ormation_field = ": {
        "args": [
            {
                "name": "True"
            },
            {
                "name": "False"
            }
        ]
    },
    "ANTSTemplateBuildSingleIterationWF": {
        "args": [
            {
                "default": "''",
                "name": "iterationPhasePrefix"
            }
        ]
    },
    "Any inputs that are assigned ": {
        "args": [
            {
                "name": "not the ault_value) are formatted"
            }
        ]
    },
    "Calculates Interclass Correlation Coefficient ": {
        "args": [
            {
                "name": "3"
            },
            {
                "name": "1) as ined in"
            }
        ]
    },
    "FlattenTransformAndImagesList": {
        "args": [
            {
                "name": "ListOfPassiveImagesDictionaries"
            },
            {
                "name": "transforms"
            },
            {
                "name": "invert_transform_flags"
            },
            {
                "name": "interpolationMapping"
            }
        ]
    },
    "GetFirstListElement": {
        "args": [
            {
                "name": "this_list"
            }
        ]
    },
    "GetMovingImages": {
        "args": [
            {
                "name": "ListOfImagesDictionaries"
            },
            {
                "name": "registrationImageTypes"
            },
            {
                "name": "interpolationMapping"
            }
        ]
    },
    "GetPassiveImages": {
        "args": [
            {
                "name": "ListOfImagesDictionaries"
            },
            {
                "name": "registrationImageTypes"
            }
        ]
    },
    "ICC_rep_anova": {
        "args": [
            {
                "name": "Y"
            }
        ]
    },
    "If True ": {
        "args": [
            {
                "name": "ault)"
            },
            {
                "name": "appends the extension of the original file"
            }
        ]
    },
    "Image = File": {
        "args": [
            {
                "default": "True",
                "name": "exists"
            }
        ]
    },
    "MakeListsOfTransformLists": {
        "args": [
            {
                "name": "warpTransformList"
            },
            {
                "name": "AffineTransformList"
            }
        ]
    },
    "MakeTransformListWithGradientWarps": {
        "args": [
            {
                "name": "averageAffineTranform"
            },
            {
                "name": "gradientStepWarp"
            }
        ]
    },
    "MovedAttribute": {
        "args": [
            {
                "name": "\"urlrag\""
            },
            {
                "name": "\"urlparse\""
            },
            {
                "name": "\"urllib.parse\")"
            },
            {
                "name": ""
            }
        ]
    },
    "MovedModule": {
        "args": [
            {
                "name": "\"html_entities\""
            },
            {
                "name": "\"htmlentitys\""
            },
            {
                "name": "\"html.entities\")"
            },
            {
                "name": ""
            }
        ]
    },
    "NFFT = traits.Range": {
        "args": [
            {
                "default": "32",
                "name": "low"
            },
            {
                "default": "64",
                "name": "value"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "Non linear transformations as an input: The ault transformation file type is d-field ": {
        "args": [
            {
                "name": "displacement field) in nrrd format. The option to use is --forward with the name of the file. If the transformation file is a h-field you have to add the option --hField."
            }
        ]
    },
    "None).to_filename": {
        "args": [
            {
                "name": "roiname"
            }
        ]
    },
    "ROIAutoClosingSize = traits.Float": {
        "args": [
            {
                "default": "\"This flag is only relavent when using ROIAUTO mode for initializing masks.  It ines the hole closing size in mm.  It is rounded up to the nearest whole pixel size in each direction. The ault is to use a closing size of 9mm.  For mouse data this value may need to be reset to 0.9 or smaller.\"",
                "name": "desc"
            },
            {
                "default": "\"--ROIAutoClosingSize %f\"",
                "name": "argstr"
            }
        ]
    },
    "ROIAutoDilateSize = traits.Float": {
        "args": [
            {
                "default": "\"This flag is only relavent when using ROIAUTO mode for initializing masks.  It ines the final dilation size to capture a bit of background outside the tissue region.  At setting of 10mm has been shown to help regularize a BSpline registration type so that there is some background constraints to match the edges of the head better.\"",
                "name": "desc"
            },
            {
                "default": "\"--ROIAutoDilateSize %f\"",
                "name": "argstr"
            }
        ]
    },
    "RenestDeformedPassiveImages": {
        "args": [
            {
                "name": "ormedPassiveImages"
            },
            {
                "name": "flattened_image_nametypes"
            },
            {
                "name": "interpolationMapping"
            }
        ]
    },
    "Several average method can be used ": {
        "args": [
            {
                "name": "specified by the --method option): euclidian"
            },
            {
                "name": "log-euclidian and pga. The ault being euclidian."
            }
        ]
    },
    "SplitAffineAndWarpComponents": {
        "args": [
            {
                "name": "list_of_transforms_lists"
            }
        ]
    },
    "Suffix to add to the `basename`.  ": {
        "args": [
            {
                "name": "aults is ''"
            }
        ]
    },
    "TemplateBuildSingleIterationWF.connect": {
        "args": [
            {
                "name": "ReshapeAveragePassiveImageWithShapeUpdate"
            },
            {
                "name": "'output_image'"
            },
            {
                "name": "outputSpec"
            },
            {
                "name": "'passive_ormed_templates'"
            }
        ]
    },
    "The ault inversion is linear ": {
        "args": [
            {
                "name": "inversion index 1)."
            }
        ]
    },
    "The ault settings create a large dataset ": {
        "args": [
            {
                "name": "249"
            },
            {
                "name": "231 voxels)"
            },
            {
                "name": "of"
            }
        ]
    },
    "This program resamples an image image using a ormation field or a transform ": {
        "args": [
            {
                "name": "BSpline"
            },
            {
                "name": "Affine"
            },
            {
                "name": "Rigid"
            },
            {
                "name": "etc.)."
            }
        ]
    },
    "Unined = _Unined": {
        "args": [
            {
                "name": ""
            }
        ]
    },
    "With fiberprocess you can also binarize a fiber file. Using the --voxelize option will create an image where each voxel through which a fiber is passing is set to 1. The output is going to be a binary image with the values 0 or 1 by ault but the 1 value voxel can be set to any number with the --voxel_label option. Finally you can create an image where the value at the voxel is the number of fiber passing through. ": {
        "args": [
            {
                "name": "--voxelize_count_fibers"
            }
        ]
    },
    "You can set a threshold ": {
        "args": [
            {
                "name": "--threshold) to have the tensor estimated to only a subset of voxels. All the baseline voxel value higher than the threshold ine the voxels where the tensors are computed. If not specified the threshold is calculated using an OTSU threshold on the baseline image.The masked generated by the -t option or by the otsu value can be saved with the --B0_mask_output option."
            }
        ]
    },
    "acquire": {
        "args": []
    },
    "activity": {
        "args": [
            {
                "name": "identifier"
            },
            {
                "default": "None",
                "name": "startTime"
            },
            {
                "default": "None",
                "name": "endTime"
            },
            {
                "default": "None",
                "name": "other_attributes"
            }
        ]
    },
    "add_asserted_type": {
        "args": [
            {
                "name": "type_identifier"
            }
        ]
    },
    "add_attributes": {
        "args": [
            {
                "name": "attributes"
            },
            {
                "name": "extra_attributes"
            }
        ]
    },
    "add_bundle": {
        "args": [
            {
                "name": "bundle"
            },
            {
                "default": "None",
                "name": "identifier"
            }
        ]
    },
    "add_class_to_package": {
        "args": [
            {
                "name": "class_codes"
            },
            {
                "name": "class_names"
            },
            {
                "name": "module_name"
            },
            {
                "name": "package_dir"
            }
        ]
    },
    "add_dicts_by_key": {
        "args": [
            {
                "name": "in_dict1"
            },
            {
                "name": "in_dict2"
            }
        ]
    },
    "add_edge_data": {
        "args": [
            {
                "name": "edge_array"
            },
            {
                "name": "ntwk"
            },
            {
                "default": "0",
                "name": "above"
            },
            {
                "default": "0",
                "name": "below"
            }
        ]
    },
    "add_element": {
        "args": [
            {
                "name": "record_type"
            },
            {
                "name": "identifier"
            },
            {
                "default": "None",
                "name": "attributes"
            },
            {
                "default": "None",
                "name": "other_attributes"
            }
        ]
    },
    "add_empty_vol": {
        "args": [
            {
                "name": "in_file"
            },
            {
                "default": "None",
                "name": "out_file"
            }
        ]
    },
    "add_extra_attributes": {
        "args": [
            {
                "name": "extra_attributes"
            }
        ]
    },
    "add_global_to_filename": {
        "args": [
            {
                "name": "in_file"
            }
        ]
    },
    "add_inferred_record": {
        "args": [
            {
                "name": "record_cls"
            },
            {
                "name": "identifier"
            },
            {
                "name": "infered_for"
            },
            {
                "name": "allowed_types"
            }
        ]
    },
    "add_metaclass": {
        "args": [
            {
                "name": "metaclass"
            }
        ]
    },
    "add_move": {
        "args": [
            {
                "name": "move"
            }
        ]
    },
    "add_namespace": {
        "args": [
            {
                "name": "namespace_or_prefix"
            },
            {
                "default": "None",
                "name": "uri"
            }
        ]
    },
    "add_namespaces": {
        "args": [
            {
                "name": "namespaces"
            }
        ]
    },
    "add_nodal_to_filename": {
        "args": [
            {
                "name": "in_file"
            }
        ]
    },
    "add_node_data": {
        "args": [
            {
                "name": "node_array"
            },
            {
                "name": "ntwk"
            }
        ]
    },
    "add_nodes": {
        "args": [
            {
                "name": "nodes"
            }
        ]
    },
    "add_options": {
        "args": [
            {
                "default": "None",
                "name": "parser"
            },
            {
                "default": "None",
                "name": "module"
            },
            {
                "default": "None",
                "name": "function"
            }
        ]
    },
    "add_record": {
        "args": [
            {
                "name": "record_type"
            },
            {
                "name": "identifier"
            },
            {
                "default": "None",
                "name": "attributes"
            },
            {
                "default": "None",
                "name": "other_attributes"
            },
            {
                "default": "True",
                "name": "asserted"
            }
        ]
    },
    "add_results": {
        "args": [
            {
                "name": "results"
            }
        ]
    },
    "add_startup_job": {
        "args": [
            {
                "name": "taskid"
            },
            {
                "name": "qsub_command_line"
            }
        ]
    },
    "add_traits": {
        "args": [
            {
                "name": "base"
            },
            {
                "name": "names"
            },
            {
                "default": "None",
                "name": "trait_type"
            }
        ]
    },
    "advance_iterator": {
        "args": [
            {
                "name": "it"
            }
        ]
    },
    "agent": {
        "args": [
            {
                "name": "identifier"
            },
            {
                "default": "None",
                "name": "other_attributes"
            }
        ]
    },
    "aggregate_outputs": {
        "args": [
            {
                "default": "None",
                "name": "runtime"
            },
            {
                "default": "None",
                "name": "needed_outputs"
            }
        ]
    },
    "all_fsl_pipeline": {
        "args": [
            {
                "default": "'fsl_all_correct'",
                "name": "name"
            },
            {
                "name": ""
            }
        ]
    },
    "all_images_size=len": {
        "args": [
            {
                "name": "ormedPassiveImages"
            }
        ]
    },
    "all_peb_pipeline": {
        "args": [
            {
                "default": "'hmc_sdc_ecc'",
                "name": "name"
            },
            {
                "name": ""
            }
        ]
    },
    "allprefixes = list": {
        "args": [
            {
                "name": "'abcghijklmnopqrstuvwxyz'"
            }
        ]
    },
    "alpha = traits.Float": {
        "args": [
            {
                "default": "0.1",
                "name": "ault"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "default": "['method']",
                "name": "requires"
            },
            {
                "name": ""
            }
        ]
    },
    "alternate": {
        "args": [
            {
                "name": "alternate1"
            },
            {
                "name": "alternate2"
            },
            {
                "default": "None",
                "name": "identifier"
            },
            {
                "default": "None",
                "name": "other_attributes"
            }
        ]
    },
    "always_run": {
        "args": []
    },
    "angle_threshold = traits.Float": {
        "args": [
            {
                "default": "'-at %f'",
                "name": "argstr"
            },
            {
                "default": "\"\"\"set angle threshold. ault value is 35 degree for",
                "name": "desc"
            }
        ]
    },
    "anonymize = traits.Bool": {
        "args": [
            {
                "name": "True"
            },
            {
                "default": "'-a'",
                "name": "argstr"
            },
            {
                "default": "True",
                "name": "useault"
            }
        ]
    },
    "antsRegistrationTemplateBuildSingleIterationWF": {
        "args": [
            {
                "default": "''",
                "name": "iterationPhasePrefix"
            }
        ]
    },
    "apply_all_corrections": {
        "args": [
            {
                "default": "'UnwarpArtifacts'",
                "name": "name"
            }
        ]
    },
    "argstr=\"-n %d\", desc=\"number of IC's to extract ": {
        "args": [
            {
                "name": "for lation approach)\""
            }
        ]
    },
    "argstr='--tfce_C=%.2f', desc='TFCE connectivity ": {
        "args": [
            {
                "default": "6)'",
                "name": "6 or 26; ault"
            }
        ]
    },
    "argstr='--tfce_E=%.2f', desc='TFCE extent parameter ": {
        "args": [
            {
                "default": "0.5)'",
                "name": "ault"
            }
        ]
    },
    "argstr='--tfce_H=%.2f', desc='TFCE height parameter ": {
        "args": [
            {
                "default": "2)'",
                "name": "ault"
            }
        ]
    },
    "argstr='-n %d', desc='number of permutations ": {
        "args": [
            {
                "name": "ault 5000"
            },
            {
                "name": "set to 0 for exhaustive)'"
            }
        ]
    },
    "association": {
        "args": [
            {
                "name": "activity"
            },
            {
                "default": "None",
                "name": "agent"
            },
            {
                "default": "None",
                "name": "plan"
            },
            {
                "default": "None",
                "name": "identifier"
            },
            {
                "default": "None",
                "name": "other_attributes"
            }
        ]
    },
    "atoi": {
        "args": [
            {
                "name": "text"
            }
        ]
    },
    "attribution": {
        "args": [
            {
                "name": "entity"
            },
            {
                "name": "agent"
            },
            {
                "default": "None",
                "name": "identifier"
            },
            {
                "default": "None",
                "name": "other_attributes"
            }
        ]
    },
    "ault": {
        "args": [
            {
                "name": "o"
            }
        ]
    },
    "ault = traits.Int": {
        "args": [
            {
                "default": "\"Default pixel value used if resampling a pixel outside of the volume.\"",
                "name": "desc"
            },
            {
                "default": "\"--ault %d\"",
                "name": "argstr"
            }
        ]
    },
    "ault os.getcwd": {
        "args": [
            {
                "name": ""
            }
        ]
    },
    "aultSuffix = traits.Str": {
        "args": [
            {
                "default": "\"--aultSuffix %s\"",
                "name": "argstr"
            }
        ]
    },
    "aultTensor = InputMultiPath": {
        "args": [
            {
                "name": "traits.Float"
            },
            {
                "default": "\"Default tensor used if estimated tensor is below a given threshold\"",
                "name": "desc"
            },
            {
                "default": "\"",
                "name": "sep"
            },
            {
                "name": "\""
            },
            {
                "default": "\"--aultTensor %s\"",
                "name": "argstr"
            }
        ]
    },
    "aultValue = traits.Float": {
        "args": [
            {
                "default": "\"Default voxel value\"",
                "name": "desc"
            },
            {
                "default": "\"--aultValue %f\"",
                "name": "argstr"
            }
        ]
    },
    "ault_color_table = traits.Bool": {
        "args": [
            {
                "default": "'--ctab-ault'",
                "name": "argstr"
            },
            {
                "default": "_ctab_inputs",
                "name": "xor"
            },
            {
                "name": ""
            }
        ]
    },
    "ault_namespace = self._namespaces.get_ault_namespace": {
        "args": [
            {
                "name": ""
            }
        ]
    },
    "ault_ns_uri = self.get_ault_namespace": {
        "args": [
            {
                "name": ""
            }
        ]
    },
    "ault_pixel_value = traits.Float": {
        "args": [
            {
                "default": "\"Default pixel value for samples falling outside of the input region\"",
                "name": "desc"
            },
            {
                "default": "\"--ault_pixel_value %f\"",
                "name": "argstr"
            }
        ]
    },
    "ault_value = traits.Float": {
        "args": [
            {
                "name": ""
            }
        ]
    },
    "average_networks": {
        "args": [
            {
                "name": "in_files"
            },
            {
                "name": "ntwk_res_file"
            },
            {
                "name": "group_id"
            }
        ]
    },
    "axis = traits.Enum": {
        "args": [
            {
                "name": "'vstack'"
            },
            {
                "name": "'hstack'"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "b": {
        "args": [
            {
                "name": "s"
            }
        ]
    },
    "b0_average": {
        "args": [
            {
                "name": "in_dwi"
            },
            {
                "name": "in_bval"
            },
            {
                "default": "10.0",
                "name": "max_b"
            },
            {
                "default": "None",
                "name": "out_file"
            }
        ]
    },
    "b0_indices": {
        "args": [
            {
                "name": "in_bval"
            },
            {
                "default": "10.0",
                "name": "max_b"
            }
        ]
    },
    "base.trait_set": {
        "args": [
            {
                "default": "False",
                "name": "trait_change_notify"
            },
            {
                "name": "**unined_traits"
            }
        ]
    },
    "baseImage = File": {
        "args": [
            {
                "default": "\"Required: base image used to ine the size of the inverse field\"",
                "name": "desc"
            },
            {
                "default": "True",
                "name": "exists"
            },
            {
                "default": "\"--baseImage %s\"",
                "name": "argstr"
            }
        ]
    },
    "basedir : ault os.getcwd": {
        "args": [
            {
                "name": ""
            }
        ]
    },
    "bedpostx_parallel": {
        "args": [
            {
                "default": "'bedpostx_parallel'",
                "name": "name"
            },
            {
                "name": ""
            }
        ]
    },
    "beta = traits.Int": {
        "args": [
            {
                "default": "2",
                "name": "ault"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "default": "['method']",
                "name": "requires"
            },
            {
                "name": ""
            }
        ]
    },
    "bg_dist = traits.Enum": {
        "args": [
            {
                "name": "'normal'"
            },
            {
                "name": "'rayleigh'"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "default": "True",
                "name": "mandatory"
            },
            {
                "name": ""
            }
        ]
    },
    "bg_mask": {
        "args": [
            {
                "name": "in_file"
            },
            {
                "name": "in_mask"
            },
            {
                "default": "None",
                "name": "out_file"
            }
        ]
    },
    "bg_overlap = traits.Bool": {
        "args": [
            {
                "name": "False"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "default": "True",
                "name": "mandatory"
            },
            {
                "name": ""
            }
        ]
    },
    "bingham = traits.Bool": {
        "args": [
            {
                "default": "'-bingham'",
                "name": "argstr"
            },
            {
                "default": "\"Compute a LUT for the Bingham PDF. This is the ault.\"",
                "name": "desc"
            }
        ]
    },
    "bpx_directory = Directory": {
        "args": [
            {
                "name": "'bedpostx'"
            },
            {
                "default": "'%s'",
                "name": "argstr"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "build_doc": {
        "args": [
            {
                "name": "doc"
            },
            {
                "name": "opts"
            }
        ]
    },
    "bundle": {
        "args": [
            {
                "name": "identifier"
            },
            {
                "default": "None",
                "name": "other_attributes"
            }
        ]
    },
    "burn_in = traits.Range": {
        "args": [
            {
                "default": "0",
                "name": "low"
            },
            {
                "default": "0",
                "name": "ault"
            },
            {
                "default": "'-b %d'",
                "name": "argstr"
            },
            {
                "name": ""
            }
        ]
    },
    "bvalues = traits.List": {
        "args": [
            {
                "name": "traits.Int"
            },
            {
                "default": "[1000",
                "name": "value"
            },
            {
                "name": "3000]"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "byte2int": {
        "args": [
            {
                "name": "bs"
            }
        ]
    },
    "cache": {
        "args": [
            {
                "name": "interface"
            }
        ]
    },
    "calc_moments": {
        "args": [
            {
                "name": "timeseries_file"
            },
            {
                "name": "moment"
            }
        ]
    },
    "callable": {
        "args": [
            {
                "name": "obj"
            }
        ]
    },
    "can_resume": {
        "args": []
    },
    "capture_provenance": {
        "args": [
            {
                "name": ""
            }
        ]
    },
    "check_forhash": {
        "args": [
            {
                "name": "filename"
            }
        ]
    },
    "check_fsl": {
        "args": [
            {
                "name": ""
            }
        ]
    },
    "chooseindex": {
        "args": [
            {
                "name": "fwhm"
            }
        ]
    },
    "clean_working_directory": {
        "args": [
            {
                "name": "outputs"
            },
            {
                "name": "cwd"
            },
            {
                "name": "inputs"
            },
            {
                "name": "needed_outputs"
            },
            {
                "name": "config"
            },
            {
                "name": ""
            }
        ]
    },
    "cleanup": {
        "args": []
    },
    "cleanup_edge_pipeline": {
        "args": [
            {
                "default": "'Cleanup'",
                "name": "name"
            }
        ]
    },
    "clear_previous_runs": {
        "args": [
            {
                "default": "True",
                "name": "warn"
            }
        ]
    },
    "clear_runs_since": {
        "args": [
            {
                "default": "None",
                "name": "day"
            },
            {
                "default": "None",
                "name": "month"
            },
            {
                "default": "None",
                "name": "year"
            },
            {
                "default": "True",
                "name": "warn"
            }
        ]
    },
    "clone": {
        "args": [
            {
                "name": "name"
            }
        ]
    },
    "close": {
        "args": []
    },
    "cmat": {
        "args": [
            {
                "name": "track_file"
            },
            {
                "name": "roi_file"
            },
            {
                "name": "resolution_network_file"
            },
            {
                "name": "matrix_name"
            },
            {
                "name": "matrix_mat_name"
            },
            {
                "name": "endpoint_name"
            },
            {
                "default": "False",
                "name": "intersections"
            }
        ]
    },
    "cmd": {
        "args": []
    },
    "cmdline": {
        "args": []
    },
    "collapse_folders = traits.Bool": {
        "args": [
            {
                "name": "True"
            },
            {
                "default": "'-c'",
                "name": "argstr"
            },
            {
                "default": "True",
                "name": "useault"
            }
        ]
    },
    "collection": {
        "args": [
            {
                "name": "identifier"
            },
            {
                "default": "None",
                "name": "other_attributes"
            }
        ]
    },
    "colormap=traits.Str": {
        "args": [
            {
                "default": "'%s'",
                "name": "argstr"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "communication": {
        "args": [
            {
                "name": "informed"
            },
            {
                "name": "informant"
            },
            {
                "default": "None",
                "name": "identifier"
            },
            {
                "default": "None",
                "name": "other_attributes"
            }
        ]
    },
    "compulsory_inputs = ['xDefaultMem = traits.Int": {
        "args": [
            {
                "default": "\"Set ault maximum heap size\"",
                "name": "desc"
            },
            {
                "default": "\"-xDefaultMem %d\")'",
                "name": "argstr"
            },
            {
                "name": ""
            }
        ]
    },
    "compute_dict_measures": {
        "args": [
            {
                "name": "ntwk"
            }
        ]
    },
    "compute_edge_measures": {
        "args": [
            {
                "name": "ntwk"
            }
        ]
    },
    "compute_icv": {
        "args": [
            {
                "name": "class_images"
            }
        ]
    },
    "compute_network_measures": {
        "args": [
            {
                "name": "ntwk"
            }
        ]
    },
    "compute_node_measures": {
        "args": [
            {
                "name": "ntwk"
            },
            {
                "default": "False",
                "name": "calculate_cliques"
            }
        ]
    },
    "compute_readout": {
        "args": [
            {
                "name": "params"
            }
        ]
    },
    "compute_singlevalued_measures": {
        "args": [
            {
                "name": "ntwk"
            },
            {
                "default": "True",
                "name": "weighted"
            },
            {
                "default": "False",
                "name": "calculate_cliques"
            }
        ]
    },
    "concat_files": {
        "args": [
            {
                "name": "bvec_file"
            },
            {
                "name": "bval_file"
            },
            {
                "name": "invert_x"
            },
            {
                "name": "invert_y"
            },
            {
                "name": "invert_z"
            }
        ]
    },
    "concatcsv": {
        "args": [
            {
                "name": "in_files"
            }
        ]
    },
    "concatenate_runs = traits.Bool": {
        "args": [
            {
                "name": "False"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "configuration": {
        "args": [
            {
                "default": "''",
                "name": "parent_package"
            },
            {
                "default": "None",
                "name": "top_path"
            }
        ]
    },
    "connect": {
        "args": [
            {
                "name": "*args"
            },
            {
                "name": "**kwargs"
            }
        ]
    },
    "connectivity_value = traits.Int": {
        "args": [
            {
                "name": "1"
            },
            {
                "default": "-1",
                "name": "position"
            },
            {
                "default": "'%d'",
                "name": "argstr"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "constrain = traits.Bool": {
        "args": [
            {
                "default": "\"Constrain the ormation to the amount specified in Maximum Deformation\"",
                "name": "desc"
            },
            {
                "default": "\"--constrain \"",
                "name": "argstr"
            }
        ]
    },
    "container = aultdict": {
        "args": [
            {
                "name": "dict"
            }
        ]
    },
    "container_to_string": {
        "args": [
            {
                "name": "cont"
            }
        ]
    },
    "contains": {
        "args": [
            {
                "name": "identifier"
            }
        ]
    },
    "convert_all_pars = traits.Bool": {
        "args": [
            {
                "name": "True"
            },
            {
                "default": "'-v'",
                "name": "argstr"
            },
            {
                "default": "True",
                "name": "useault"
            }
        ]
    },
    "copy_hdr": {
        "args": [
            {
                "name": "in_file"
            },
            {
                "name": "in_file_hdr"
            },
            {
                "default": "None",
                "name": "out_file"
            }
        ]
    },
    "copyfile": {
        "args": [
            {
                "name": "originalfile"
            },
            {
                "name": "newfile"
            },
            {
                "default": "False",
                "name": "copy"
            },
            {
                "default": "False",
                "name": "create_new"
            },
            {
                "name": ""
            }
        ]
    },
    "copyfiles": {
        "args": [
            {
                "name": "filelist"
            },
            {
                "name": "dest"
            },
            {
                "default": "False",
                "name": "copy"
            },
            {
                "default": "False",
                "name": "create_new"
            }
        ]
    },
    "copytree": {
        "args": [
            {
                "name": "src"
            },
            {
                "name": "dst"
            },
            {
                "default": "False",
                "name": "use_hardlink"
            }
        ]
    },
    "correction = traits.Enum": {
        "args": [
            {
                "name": "\"none\""
            },
            {
                "name": "\"zero\""
            },
            {
                "name": "\"abs\""
            },
            {
                "name": "\"nearest\""
            },
            {
                "default": "\"Correct the tensors if computed tensor is not semi-inite positive\"",
                "name": "desc"
            },
            {
                "default": "\"--correction %s\"",
                "name": "argstr"
            }
        ]
    },
    "cortex = traits.Bool": {
        "args": [
            {
                "name": "True"
            },
            {
                "default": "\"--cortex\"",
                "name": "argstr"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "default": "\"only smooth within $hemi.cortex.label\"",
                "name": "desc"
            }
        ]
    },
    "count_iterables": {
        "args": [
            {
                "name": "iterables"
            },
            {
                "default": "False",
                "name": "synchronize"
            }
        ]
    },
    "crawl_code_struct": {
        "args": [
            {
                "name": "code_struct"
            },
            {
                "name": "package_dir"
            }
        ]
    },
    "create_DARTEL_template": {
        "args": [
            {
                "default": "'dartel_template'",
                "name": "name"
            }
        ]
    },
    "create_allpoints_cmat": {
        "args": [
            {
                "name": "streamlines"
            },
            {
                "name": "roiData"
            },
            {
                "name": "voxelSize"
            },
            {
                "name": "n_rois"
            }
        ]
    },
    "create_annot_label": {
        "args": [
            {
                "name": "subject_id"
            },
            {
                "name": "subjects_dir"
            },
            {
                "name": "fs_dir"
            },
            {
                "name": "parcellation_name"
            }
        ]
    },
    "create_average_networks_by_group_workflow": {
        "args": [
            {
                "name": "group_list"
            },
            {
                "name": "data_dir"
            },
            {
                "name": "subjects_dir"
            },
            {
                "name": "output_dir"
            },
            {
                "default": "'group_average'",
                "name": "title"
            }
        ]
    },
    "create_bedpostx_pipeline": {
        "args": [
            {
                "default": "'bedpostx'",
                "name": "name"
            },
            {
                "default": "{'n_fibres':2",
                "name": "params"
            },
            {
                "name": "'fudge':1"
            },
            {
                "name": "'burn_in':1000"
            },
            {
                "name": ""
            }
        ]
    },
    "create_bem_flow": {
        "args": [
            {
                "default": "'bem'",
                "name": "name"
            },
            {
                "default": "'stl'",
                "name": "out_format"
            }
        ]
    },
    "create_bound_method": {
        "args": [
            {
                "name": "func"
            },
            {
                "name": "obj"
            }
        ]
    },
    "create_camino_dti_pipeline": {
        "args": [
            {
                "default": "\"dtiproc\"",
                "name": "name"
            }
        ]
    },
    "create_cmats_to_csv_pipeline": {
        "args": [
            {
                "default": "\"cmats_to_csv\"",
                "name": "name"
            },
            {
                "default": "\"subject\"",
                "name": "extra_column_heading"
            }
        ]
    },
    "create_connectivity_pipeline": {
        "args": [
            {
                "default": "\"connectivity\"",
                "name": "name"
            }
        ]
    },
    "create_dmri_preprocessing": {
        "args": [
            {
                "default": "'dMRI_preprocessing'",
                "name": "name"
            },
            {
                "default": "True",
                "name": "use_fieldmap"
            },
            {
                "default": "False",
                "name": "fieldmap_registration"
            }
        ]
    },
    "create_eddy_correct_pipeline": {
        "args": [
            {
                "default": "'eddy_correct'",
                "name": "name"
            }
        ]
    },
    "create_endpoints_array": {
        "args": [
            {
                "name": "fib"
            },
            {
                "name": "voxelSize"
            }
        ]
    },
    "create_epidewarp_pipeline": {
        "args": [
            {
                "default": "'epidewarp'",
                "name": "name"
            },
            {
                "default": "False",
                "name": "fieldmap_registration"
            }
        ]
    },
    "create_featreg_preproc": {
        "args": [
            {
                "default": "'featpreproc'",
                "name": "name"
            },
            {
                "default": "True",
                "name": "highpass"
            },
            {
                "default": "'middle'",
                "name": "whichvol"
            }
        ]
    },
    "create_fixed_effects_flow": {
        "args": [
            {
                "default": "'fixedfx'",
                "name": "name"
            }
        ]
    },
    "create_fsl_fs_preproc": {
        "args": [
            {
                "default": "'preproc'",
                "name": "name"
            },
            {
                "default": "True",
                "name": "highpass"
            },
            {
                "default": "'middle'",
                "name": "whichvol"
            }
        ]
    },
    "create_function_from_source": {
        "args": [
            {
                "name": "function_source"
            },
            {
                "default": "None",
                "name": "imports"
            }
        ]
    },
    "create_get_stats_flow": {
        "args": [
            {
                "default": "'getstats'",
                "name": "name"
            },
            {
                "default": "False",
                "name": "withreg"
            }
        ]
    },
    "create_getmask_flow": {
        "args": [
            {
                "default": "'getmask'",
                "name": "name"
            },
            {
                "default": "True",
                "name": "dilate_mask"
            }
        ]
    },
    "create_group_connectivity_pipeline": {
        "args": [
            {
                "name": "group_list"
            },
            {
                "name": "group_id"
            },
            {
                "name": "data_dir"
            },
            {
                "name": "subjects_dir"
            },
            {
                "name": "output_dir"
            },
            {
                "default": "0",
                "name": "template_args_dict"
            }
        ]
    },
    "create_merge_group_network_results_workflow": {
        "args": [
            {
                "name": "group_list"
            },
            {
                "name": "data_dir"
            },
            {
                "name": "subjects_dir"
            },
            {
                "name": "output_dir"
            },
            {
                "default": "'group'",
                "name": "title"
            }
        ]
    },
    "create_merge_group_networks_workflow": {
        "args": [
            {
                "name": "group_list"
            },
            {
                "name": "data_dir"
            },
            {
                "name": "subjects_dir"
            },
            {
                "name": "output_dir"
            },
            {
                "default": "'group'",
                "name": "title"
            }
        ]
    },
    "create_merge_network_results_by_group_workflow": {
        "args": [
            {
                "name": "group_list"
            },
            {
                "name": "group_id"
            },
            {
                "name": "data_dir"
            },
            {
                "name": "subjects_dir"
            },
            {
                "name": "output_dir"
            }
        ]
    },
    "create_merge_networks_by_group_workflow": {
        "args": [
            {
                "name": "group_list"
            },
            {
                "name": "group_id"
            },
            {
                "name": "data_dir"
            },
            {
                "name": "subjects_dir"
            },
            {
                "name": "output_dir"
            }
        ]
    },
    "create_modelfit_workflow": {
        "args": [
            {
                "default": "'modelfit'",
                "name": "name"
            },
            {
                "default": "False",
                "name": "f_contrasts"
            }
        ]
    },
    "create_motion_correct_pipeline": {
        "args": [
            {
                "default": "'motion_correct'",
                "name": "name"
            }
        ]
    },
    "create_mrtrix_dti_pipeline": {
        "args": [
            {
                "default": "\"dtiproc\"",
                "name": "name"
            },
            {
                "default": " 'probabilistic'",
                "name": "tractography_type "
            }
        ]
    },
    "create_networkx_pipeline": {
        "args": [
            {
                "default": "\"networkx\"",
                "name": "name"
            },
            {
                "default": "\"subject\"",
                "name": "extra_column_heading"
            }
        ]
    },
    "create_nodes": {
        "args": [
            {
                "name": "roi_file"
            },
            {
                "name": "resolution_network_file"
            },
            {
                "name": "out_filename"
            }
        ]
    },
    "create_overlay_workflow": {
        "args": [
            {
                "default": "'overlay'",
                "name": "name"
            }
        ]
    },
    "create_parallelfeat_preproc": {
        "args": [
            {
                "default": "'featpreproc'",
                "name": "name"
            },
            {
                "default": "True",
                "name": "highpass"
            }
        ]
    },
    "create_pyscript": {
        "args": [
            {
                "name": "node"
            },
            {
                "default": "False",
                "name": "updatehash"
            },
            {
                "default": "True",
                "name": "store_exception"
            }
        ]
    },
    "create_realign_flow": {
        "args": [
            {
                "default": "'realign'",
                "name": "name"
            }
        ]
    },
    "create_reg_workflow": {
        "args": [
            {
                "default": "'registration'",
                "name": "name"
            }
        ]
    },
    "create_resting_preproc": {
        "args": [
            {
                "default": "'restpreproc'",
                "name": "name"
            }
        ]
    },
    "create_roi": {
        "args": [
            {
                "name": "subject_id"
            },
            {
                "name": "subjects_dir"
            },
            {
                "name": "fs_dir"
            },
            {
                "name": "parcellation_name"
            },
            {
                "name": "dilation"
            }
        ]
    },
    "create_skullstripped_recon_flow": {
        "args": [
            {
                "default": "\"skullstripped_recon_all\"",
                "name": "name"
            }
        ]
    },
    "create_spm_preproc": {
        "args": [
            {
                "default": "'preproc'",
                "name": "name"
            }
        ]
    },
    "create_susan_smooth": {
        "args": [
            {
                "default": "\"susan_smooth\"",
                "name": "name"
            },
            {
                "default": "True",
                "name": "separate_masks"
            }
        ]
    },
    "create_tbss_1_preproc": {
        "args": [
            {
                "default": "'tbss_1_preproc'",
                "name": "name"
            }
        ]
    },
    "create_tbss_2_reg": {
        "args": [
            {
                "default": "\"tbss_2_reg\"",
                "name": "name"
            }
        ]
    },
    "create_tbss_3_postreg": {
        "args": [
            {
                "default": "'tbss_3_postreg'",
                "name": "name"
            },
            {
                "default": "True",
                "name": "estimate_skeleton"
            }
        ]
    },
    "create_tbss_4_prestats": {
        "args": [
            {
                "default": "'tbss_4_prestats'",
                "name": "name"
            }
        ]
    },
    "create_tbss_all": {
        "args": [
            {
                "default": "'tbss_all'",
                "name": "name"
            },
            {
                "default": "True",
                "name": "estimate_skeleton"
            }
        ]
    },
    "create_tbss_non_FA": {
        "args": [
            {
                "default": "'tbss_non_FA'",
                "name": "name"
            }
        ]
    },
    "create_tempfile": {
        "args": [
            {
                "name": ""
            }
        ]
    },
    "create_tessellation_flow": {
        "args": [
            {
                "default": "'tessellate'",
                "name": "name"
            },
            {
                "default": "'stl'",
                "name": "out_format"
            }
        ]
    },
    "create_vbm_preproc": {
        "args": [
            {
                "default": "'vbmpreproc'",
                "name": "name"
            }
        ]
    },
    "create_wm_mask": {
        "args": [
            {
                "name": "subject_id"
            },
            {
                "name": "subjects_dir"
            },
            {
                "name": "fs_dir"
            },
            {
                "name": "parcellation_name"
            }
        ]
    },
    "crop_and_move_datasets": {
        "args": [
            {
                "name": "subject_id"
            },
            {
                "name": "subjects_dir"
            },
            {
                "name": "fs_dir"
            },
            {
                "name": "parcellation_name"
            },
            {
                "name": "out_roi_file"
            },
            {
                "name": "dilation"
            }
        ]
    },
    "csf_mask": {
        "args": [
            {
                "name": "in_file"
            },
            {
                "name": "in_mask"
            },
            {
                "default": "None",
                "name": "out_file"
            }
        ]
    },
    "custom_color_map_file=traits.Str": {
        "args": [
            {
                "name": "'none'"
            },
            {
                "default": "'%s'",
                "name": "argstr"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "data = graph.get_edge_data": {
        "args": [
            {
                "name": "srcnode"
            },
            {
                "name": "destnode"
            },
            {
                "default": "None",
                "name": "ault"
            }
        ]
    },
    "date_in_filename = traits.Bool": {
        "args": [
            {
                "name": "True"
            },
            {
                "default": "'-d'",
                "name": "argstr"
            },
            {
                "default": "True",
                "name": "useault"
            }
        ]
    },
    "decode": {
        "args": [
            {
                "name": "s"
            }
        ]
    },
    "delegation": {
        "args": [
            {
                "name": "delegate"
            },
            {
                "name": "responsible"
            },
            {
                "default": "None",
                "name": "activity"
            },
            {
                "default": "None",
                "name": "identifier"
            },
            {
                "default": "None",
                "name": "other_attributes"
            }
        ]
    },
    "delta_TE = traits.Float": {
        "args": [
            {
                "name": "2.46"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "default": "True",
                "name": "mandatory"
            },
            {
                "default": "'%f'",
                "name": "argstr"
            },
            {
                "name": ""
            }
        ]
    },
    "demean_image": {
        "args": [
            {
                "name": "in_file"
            },
            {
                "default": "None",
                "name": "in_mask"
            },
            {
                "default": "None",
                "name": "out_file"
            }
        ]
    },
    "derivation": {
        "args": [
            {
                "name": "generatedEntity"
            },
            {
                "name": "usedEntity"
            },
            {
                "default": "None",
                "name": "activity"
            },
            {
                "default": "None",
                "name": "generation"
            },
            {
                "default": "None",
                "name": "usage"
            },
            {
                "default": "None",
                "name": "time"
            },
            {
                "default": "None",
                "name": "identifier"
            },
            {
                "default": "None",
                "name": "other_attributes"
            }
        ]
    },
    "desc=": {
        "args": [
            {
                "name": "'dense ormation field to be applied'"
            }
        ]
    },
    "desc=\",               Flag to make a new subject-specific landmark inition file in the same format produced by Slicer3 with the optimized landmark ": {
        "args": [
            {
                "name": "the detected RP"
            },
            {
                "name": "AC"
            },
            {
                "name": "and PC) in it.  Useful to tighten the variances in the ConstellationModeler."
            },
            {
                "name": "\""
            },
            {
                "default": "\"--saveOptimizedLandmarks \"",
                "name": "argstr"
            }
        ]
    },
    "desc=\",               The filename for the new subject-specific landmark inition file in the same format produced by Slicer3 ": {
        "args": [
            {
                "name": "in .fcsv) with the landmarks in the estimated MSP aligned space to be loaded. The detector will only process landmarks not enlisted on the file."
            },
            {
                "name": "\""
            },
            {
                "default": "True",
                "name": "exists"
            },
            {
                "default": "\"--inputLandmarksEMSP %s\"",
                "name": "argstr"
            }
        ]
    },
    "desc=\",               The filename for the new subject-specific scene inition file in the same format produced by Slicer3 ": {
        "args": [
            {
                "name": "in .mrml format). Only the components that were specified by the user on command line would be generated. Compatible components include inputVolume"
            },
            {
                "name": "outputVolume"
            },
            {
                "name": "outputLandmarksInInputSpace"
            },
            {
                "name": "outputLandmarksInACPCAlignedSpace"
            },
            {
                "name": "and outputTransform."
            },
            {
                "name": "\""
            },
            {
                "default": "True",
                "name": "exists"
            }
        ]
    },
    "desc=\"0=None,1=rigid": {
        "args": [
            {
                "name": "SPM8 ault)"
            },
            {
                "default": "affine\"",
                "name": "2"
            }
        ]
    },
    "desc=\"Determine which conversion to perform. DicomToNrrd ": {
        "args": [
            {
                "name": "ault): Convert DICOM series to NRRD DicomToFSL: Convert DICOM series to NIfTI File + gradient/bvalue text files NrrdToFSL: Convert DWI NRRD file to NIfTI File + gradient/bvalue text files FSLToNrrd: Convert NIfTI File + gradient/bvalue text files to NRRD file.\""
            },
            {
                "default": "\"--conversionMode %s\"",
                "name": "argstr"
            }
        ]
    },
    "desc=\"Set the FA or FOD amplitude cutoff for terminating tracks ": {
        "args": [
            {
                "name": "ault is 0.1).\""
            }
        ]
    },
    "desc=\"Set the minimum radius of curvature ": {
        "args": [
            {
                "name": "ault is 2 mm for DT_STREAM"
            },
            {
                "name": "0 for SD_STREAM"
            },
            {
                "name": "1 mm for SD_PROB and DT_PROB)\""
            }
        ]
    },
    "desc=\"Set the step size of the algorithm in mm ": {
        "args": [
            {
                "name": "ault is 0.2).\""
            }
        ]
    },
    "desc=\"Sets the maximum length of any track in millimeters ": {
        "args": [
            {
                "name": "ault is 200 mm).\""
            }
        ]
    },
    "desc=\"Sets the minimum FA or FOD amplitude for initiating tracks ": {
        "args": [
            {
                "name": "ault is twice the normal cutoff).\""
            }
        ]
    },
    "desc=\"Sets the minimum length of any track in millimeters ": {
        "args": [
            {
                "name": "ault is 10 mm).\""
            }
        ]
    },
    "desc=\"Voxelize fiber into a label map ": {
        "args": [
            {
                "name": "the labelmap filename is the argument of -V). The tensor file must be specified using -T for information about the size"
            },
            {
                "name": "origin"
            },
            {
                "name": "spacing of the image. The ormation is applied before the voxelization \""
            },
            {
                "default": "\"--voxelize %s\"",
                "name": "argstr"
            }
        ]
    },
    "desc=\"datatype to use for calculations ": {
        "args": [
            {
                "name": "ault is float)\""
            }
        ]
    },
    "desc=\"datatype to use for output ": {
        "args": [
            {
                "name": "ault uses input type)\""
            }
        ]
    },
    "desc=\"do not reshape surface vector ": {
        "args": [
            {
                "name": "ault)\""
            }
        ]
    },
    "desc=\"method to convert reg matrix values ": {
        "args": [
            {
                "name": "ault is round)\""
            }
        ]
    },
    "desc=\"reference volume ": {
        "args": [
            {
                "name": "ault is orig.mgz)\""
            }
        ]
    },
    "desc=\"set time step ": {
        "args": [
            {
                "default": "from dataset header]\"",
                "name": "TR) in sec [ault"
            }
        ]
    },
    "desc='0=none,1=affine+non-linear": {
        "args": [
            {
                "name": "SPM8 ault)"
            },
            {
                "default": "non-linear only'",
                "name": "2"
            }
        ]
    },
    "desc='<interpolate|weighted|nearest|sinc|cubic> ": {
        "args": [
            {
                "name": "ault is interpolate)'"
            }
        ]
    },
    "desc='Alter the marching cubes connectivity: 1=6+,2=18,3=6,4=26 ": {
        "args": [
            {
                "default": "1)'",
                "name": "ault"
            }
        ]
    },
    "desc='Convergence test in millimeters ": {
        "args": [
            {
                "name": "ault 0.05mm).'"
            }
        ]
    },
    "desc='FWHM ": {
        "args": [
            {
                "name": "in mm) of gaussian smoothing kernel for ref volume"
            },
            {
                "name": "ault [4"
            },
            {
                "name": "2"
            },
            {
                "name": "0"
            },
            {
                "name": "0]'"
            },
            {
                "default": "\"",
                "name": "sep"
            },
            {
                "name": "\""
            }
        ]
    },
    "desc='Index of the inversion to use. The ault is 1 ": {
        "args": [
            {
                "name": "linear single tensor inversion).'"
            }
        ]
    },
    "desc='Keep brain extraction/segmentation warps, etc ": {
        "args": [
            {
                "default": " 0).'",
                "name": "ault "
            }
        ]
    },
    "desc='Keep voxelwise precision type ": {
        "args": [
            {
                "name": "ault is float'"
            }
        ]
    },
    "desc='Mesh reference space - either \"caret\" ": {
        "args": [
            {
                "name": "ault) or ' +"
            }
        ]
    },
    "desc='The maximum number of PDs in a voxel ": {
        "args": [
            {
                "name": "ault 3) for PD data.' \\"
            }
        ]
    },
    "desc='The maximum number of tensor components in a voxel ": {
        "args": [
            {
                "name": "ault 2) for multitensor data.'\\"
            }
        ]
    },
    "desc='The search radius in the peak finding algorithm. The ault is 0.4 ": {
        "args": [
            {
                "name": "cf. \"density\")'"
            }
        ]
    },
    "desc='The volume from the \"mri\" directory to use ": {
        "args": [
            {
                "name": "aults to T1)'"
            }
        ]
    },
    "desc='Trace of the diffusion tensor": {
        "args": [
            {
                "name": "s) used in the test function in the LUT generation. The ault is 2100E-12 m^2 s^-1.'"
            }
        ]
    },
    "desc='Use atlas mode for registration ": {
        "args": [
            {
                "name": "ault: no rigid alignment)'"
            }
        ]
    },
    "desc='Waypoint condition. Either \"AND\" ": {
        "args": [
            {
                "name": "ault) or \"OR\"'"
            }
        ]
    },
    "desc='a text file containing the [ el az ] pairs for the directions: Specify the directions over which to apply the non-negativity constraint ": {
        "args": [
            {
                "name": "by ault"
            },
            {
                "name": "the built-in 300 direction set is used)'"
            }
        ]
    },
    "desc='direction of slice acquisition ": {
        "args": [
            {
                "default": "1",
                "name": "x"
            },
            {
                "default": "2",
                "name": "y"
            },
            {
                "default": "3) - ault is z'",
                "name": "z"
            }
        ]
    },
    "desc='final image number to process ": {
        "args": [
            {
                "name": "ault Inf)'"
            }
        ]
    },
    "desc='first image number to process ": {
        "args": [
            {
                "name": "ault 0)'"
            }
        ]
    },
    "desc='fits autoregressive model - ault is to use tukey with M=sqrt": {
        "args": [
            {
                "name": "numvols)'"
            }
        ]
    },
    "desc='list of group identifiers ": {
        "args": [
            {
                "name": "aults to single group)'"
            }
        ]
    },
    "desc='minimum distance between local maxima/minima, in mm ": {
        "args": [
            {
                "name": "ault 0)'"
            }
        ]
    },
    "desc='output vox2vox matrix ": {
        "args": [
            {
                "name": "ault is RAS2RAS)'"
            }
        ]
    },
    "desc='remove voxels that do not have a non-zero value at each frame ": {
        "args": [
            {
                "name": "'"
            }
        ]
    },
    "desc='set vox outside range to val ": {
        "args": [
            {
                "name": "ault is 0)'"
            }
        ]
    },
    "desc='set vox within thresh to val ": {
        "args": [
            {
                "name": "ault is 1)'"
            }
        ]
    },
    "desc='shift in fraction of TR, range 0:1 ": {
        "args": [
            {
                "default": " no shift)'",
                "name": "ault is 0.5 "
            }
        ]
    },
    "desc='slice timings, in fractions of TR, range 0:1 ": {
        "args": [
            {
                "default": " no shift)'",
                "name": "ault is 0.5 "
            }
        ]
    },
    "desc='specifies direction of warping ": {
        "args": [
            {
                "name": "ault y)'"
            }
        ]
    },
    "desc='specify the threshold for de-spiking ": {
        "args": [
            {
                "default": "3.0)'",
                "name": "ault"
            }
        ]
    },
    "desc='surfname ": {
        "args": [
            {
                "name": "ault is white)'"
            }
        ]
    },
    "desc='the connectivity of voxels ": {
        "args": [
            {
                "name": "ault 26)'"
            }
        ]
    },
    "desc='use 0-based frame of input ": {
        "args": [
            {
                "name": "ault is 0)'"
            }
        ]
    },
    "desc='volume of each label point ": {
        "args": [
            {
                "name": "1mm3)'"
            }
        ]
    },
    "description = traits.Str": {
        "args": [
            {
                "name": "'Created with the Nipype CFF converter'"
            },
            {
                "default": "'Description'",
                "name": "desc"
            },
            {
                "default": "True",
                "name": "useault"
            }
        ]
    },
    "description: <p>Calculate a transformation from two lists of fiducial points.</p><p>ACPC line is two fiducial points, one at the anterior commissure and one at the posterior commissure. The resulting transform will bring the line connecting them to horizontal to the AP axis.</p><p>The midline is a series of points ining the division between the hemispheres of the brain ": {
        "args": [
            {
                "name": "the mid sagittal plane). The resulting transform will put the output volume with the mid sagittal plane lined up with the AS plane.</p><p>Use the Filtering module<b>Resample Scalar/Vector/DWI Volume</b>to apply the transformation to a volume.</p>"
            }
        ]
    },
    "description: Register a three-dimensional volume to a reference volume ": {
        "args": [
            {
                "name": "Mattes Mutual Information by ault). Full documentation avalable here: http://wiki.slicer.org/slicerWiki/index.php/Documentation/4.1/Modules/BRAINSFit. Method described in BRAINSFit: Mutual Information Registrations of Whole-Brain 3D Images"
            },
            {
                "name": "Using the Insight Toolkit"
            },
            {
                "name": "Johnson H.J."
            },
            {
                "name": "Harris G."
            },
            {
                "name": "Williams K."
            },
            {
                "name": "The Insight Journal"
            },
            {
                "name": "2007. http://hdl.handle.net/1926/1291"
            }
        ]
    },
    "description: This program will register a Nrrd diffusion weighted 4D vector image to a fixed anatomical image. Two registration methods are supported for alignment with anatomical images: Rigid and B-Spline. The rigid registration performs a rigid body registration with the anatomical images and should be done as well to initialize the B-Spline transform. The B-SPline transform is the ormable transform, where the user can control the amount of ormation based on the number of control points as well as the maximum distance that these points can move. The B-Spline registration places a low dimensional grid in the image, which is ormed. This allows for some susceptibility related distortions to be removed from the diffusion weighted images. In general the amount of motion in the slice selection and read-out directions direction should be kept low. The distortion is in the phase encoding direction in the images. It is recommended that skull stripped ": {
        "args": [
            {
                "name": "i.e. image containing only brain with skull removed) images shoud be used for image co-registration with the B-Spline transform."
            }
        ]
    },
    "description: This program will use a fast marching fiber tracking algorithm to identify fiber tracts from a tensor image. This program is the second portion of the algorithm. The user must first run gtractCostFastMarching to generate the vcl_cost image. The second step of the algorithm implemented here is a gradient descent soplution from the ined ending region back to the seed points specified in gtractCostFastMarching. This algorithm is roughly based on the work by G. Parker et al. from IEEE Transactions On Medical Imaging, 21": {
        "args": [
            {
                "name": "5): 505-512"
            },
            {
                "name": "2002. An additional feature of including anisotropy into the vcl_cost function calculation is included."
            }
        ]
    },
    "dicom_info_file = File": {
        "args": [
            {
                "name": "'dicominfo.txt'"
            },
            {
                "default": "'--o %s'",
                "name": "argstr"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "dictcopy": {
        "args": []
    },
    "dilation = traits.Bool": {
        "args": [
            {
                "name": "False"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "dimension = traits.Enum": {
        "args": [
            {
                "name": "3"
            },
            {
                "name": "2"
            },
            {
                "default": "'%d'",
                "name": "argstr"
            },
            {
                "default": "4",
                "name": "position"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "dimension=traits.Enum": {
        "args": [
            {
                "name": "3"
            },
            {
                "name": "2"
            },
            {
                "default": " '%d'",
                "name": "argstr"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "direction = traits.Enum": {
        "args": [
            {
                "name": "\"below\""
            },
            {
                "name": "\"above\""
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "disableMultithreading = traits.Int": {
        "args": [
            {
                "default": "\"Disable multithreading for the EMSegmenter algorithm only! Preprocessing might still run in multi-threaded mode. -1: Do not overwrite ault value. 0: Disable. 1: Enable.\"",
                "name": "desc"
            },
            {
                "default": "\"--disableMultithreading %d\"",
                "name": "argstr"
            }
        ]
    },
    "disable_file_logging": {
        "args": []
    },
    "disconnect": {
        "args": [
            {
                "name": "*args"
            }
        ]
    },
    "dist = traits.Enum": {
        "args": [
            {
                "name": "'normal'"
            },
            {
                "name": "'rician'"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "default": "True",
                "name": "mandatory"
            },
            {
                "name": ""
            }
        ]
    },
    "doRollover": {
        "args": []
    },
    "document.set_ault_namespace": {
        "args": [
            {
                "name": "ault_ns_uri"
            }
        ]
    },
    "dontUpdateIntermediateData = traits.Int": {
        "args": [
            {
                "default": "\"Disable update of intermediate results.  -1: Do not overwrite ault value. 0: Disable. 1: Enable.\"",
                "name": "desc"
            },
            {
                "default": "\"--dontUpdateIntermediateData %d\"",
                "name": "argstr"
            }
        ]
    },
    "download_files = traits.Bool": {
        "args": [
            {
                "name": "True"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "dtiprocess also allows a range of transformations on the tensor fields. The transformed tensor field file name is specified with the option --ormation_output. There are 3 resampling interpolation methods specified with the tag --interpolation followed by the type to use ": {
        "args": [
            {
                "name": "nearestneighbor"
            },
            {
                "name": "linear"
            },
            {
                "name": "cubic) Then you have several transformations possible to apply"
            }
        ]
    },
    "dwi_flirt": {
        "args": [
            {
                "default": "'DWICoregistration'",
                "name": "name"
            },
            {
                "default": "False",
                "name": "excl_nodiff"
            },
            {
                "name": ""
            }
        ]
    },
    "e.args[0].endswith": {
        "args": [
            {
                "name": "\"is not ined\""
            }
        ]
    },
    "ecc_pipeline": {
        "args": [
            {
                "default": "'eddy_correct'",
                "name": "name"
            }
        ]
    },
    "eddy_rotate_bvecs": {
        "args": [
            {
                "name": "in_bvec"
            },
            {
                "name": "eddy_params"
            }
        ]
    },
    "edge_key = traits.Str": {
        "args": [
            {
                "name": "'number_of_fibers'"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "default": "'Usually \"number_of_fibers",
                "name": "desc"
            },
            {
                "name": "\"fiber_length_mean\""
            },
            {
                "name": "\"fiber_length_std\" for matrices made with CMTK' \\"
            }
        ]
    },
    "elif isined": {
        "args": [
            {
                "name": "self.inputs.complex_phase_file"
            }
        ]
    },
    "elif name == \"annot_name\" and isined": {
        "args": [
            {
                "name": "value"
            }
        ]
    },
    "elif not self.inputs.use_freesurfer_LUT and isined": {
        "args": [
            {
                "name": "self.inputs.LUT_file"
            }
        ]
    },
    "enable_debug_mode": {
        "args": []
    },
    "enable_file_logging": {
        "args": []
    },
    "enable_provenance": {
        "args": []
    },
    "encoding_PROV_N_value": {
        "args": [
            {
                "name": "value"
            }
        ]
    },
    "end": {
        "args": [
            {
                "name": "activity"
            },
            {
                "default": "None",
                "name": "trigger"
            },
            {
                "default": "None",
                "name": "ender"
            },
            {
                "default": "None",
                "name": "time"
            },
            {
                "default": "None",
                "name": "identifier"
            },
            {
                "default": "None",
                "name": "other_attributes"
            }
        ]
    },
    "enhance": {
        "args": [
            {
                "name": "in_file"
            },
            {
                "default": "0.010",
                "name": "clip_limit"
            },
            {
                "default": "None",
                "name": "in_mask"
            },
            {
                "default": "None",
                "name": "out_file"
            }
        ]
    },
    "entity": {
        "args": [
            {
                "name": "identifier"
            },
            {
                "default": "None",
                "name": "other_attributes"
            }
        ]
    },
    "environ = traits.DictStrStr": {
        "args": [
            {
                "default": "'Environment variables'",
                "name": "desc"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "errvectorexp = np.zeros_like": {
        "args": [
            {
                "name": "mskvector"
            },
            {
                "default": "np.float32) # The ault type is uint8",
                "name": "dtype"
            }
        ]
    },
    "evaluate_connect_function": {
        "args": [
            {
                "name": "function_source"
            },
            {
                "name": "args"
            },
            {
                "name": "first_arg"
            }
        ]
    },
    "events_in_filename = traits.Bool": {
        "args": [
            {
                "name": "True"
            },
            {
                "default": "'-e'",
                "name": "argstr"
            },
            {
                "default": "True",
                "name": "useault"
            }
        ]
    },
    "exec_": {
        "args": [
            {
                "name": "_code_"
            },
            {
                "default": "None",
                "name": "_globs_"
            },
            {
                "default": "None",
                "name": "_locs_"
            }
        ]
    },
    "execute_task": {
        "args": [
            {
                "name": "pckld_task"
            },
            {
                "name": "node_config"
            },
            {
                "name": "updatehash"
            }
        ]
    },
    "expand_iterables": {
        "args": [
            {
                "name": "iterables"
            },
            {
                "default": "False",
                "name": "synchronize"
            }
        ]
    },
    "expansions = aultdict": {
        "args": [
            {
                "name": "list"
            }
        ]
    },
    "export": {
        "args": [
            {
                "default": "None",
                "name": "filename"
            },
            {
                "default": "\"output\"",
                "name": "prefix"
            },
            {
                "default": "\"python\"",
                "name": "format"
            },
            {
                "name": ""
            }
        ]
    },
    "export_graph": {
        "args": [
            {
                "name": "graph_in"
            },
            {
                "default": "None",
                "name": "base_dir"
            },
            {
                "default": "False",
                "name": "show"
            },
            {
                "default": "False",
                "name": "use_execgraph"
            },
            {
                "name": ""
            }
        ]
    },
    "extent_fdr_p_threshold = traits.Float": {
        "args": [
            {
                "name": "0.05"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "default": "'p threshold on FDR corrected cluster size probabilities'",
                "name": "desc"
            }
        ]
    },
    "extent_threshold = traits.Int": {
        "args": [
            {
                "name": "0"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "default": "\"Minimum cluster size in voxels\"",
                "name": "desc"
            }
        ]
    },
    "extpriordatatype = traits.Enum": {
        "args": [
            {
                "name": "'float'"
            },
            {
                "name": "'double'"
            },
            {
                "default": "'-extpriordatatype %s'",
                "name": "argstr"
            },
            {
                "default": "'Datatype of the prior image. The ault is \"double\".'",
                "name": "desc"
            }
        ]
    },
    "extract": {
        "args": [
            {
                "name": "Z"
            },
            {
                "name": "shape"
            },
            {
                "name": "position"
            },
            {
                "name": "fill"
            }
        ]
    },
    "extract_bval": {
        "args": [
            {
                "name": "in_dwi"
            },
            {
                "name": "in_bval"
            },
            {
                "default": "0",
                "name": "b"
            },
            {
                "default": "None",
                "name": "out_file"
            }
        ]
    },
    "extract_noise_components": {
        "args": [
            {
                "name": "realigned_file"
            },
            {
                "name": "noise_mask_file"
            },
            {
                "name": "num_components"
            }
        ]
    },
    "fieldmap_correction": {
        "args": [
            {
                "default": "'fieldmap_correction'",
                "name": "name"
            },
            {
                "default": "False",
                "name": "nocheck"
            }
        ]
    },
    "fieldmap_registration - True if registration to fieldmap should be done ": {
        "args": [
            {
                "name": "ault False"
            }
        ]
    },
    "fieldmap_registration - True if registration to fieldmap should be performed ": {
        "args": [
            {
                "name": "ault False"
            }
        ]
    },
    "figure_type = traits.Enum": {
        "args": [
            {
                "name": "'matrix'"
            },
            {
                "name": "'network'"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "filename_to_list": {
        "args": [
            {
                "name": "filename"
            }
        ]
    },
    "fileno": {
        "args": []
    },
    "find_indices": {
        "args": [
            {
                "name": "condition"
            }
        ]
    },
    "find_module": {
        "args": [
            {
                "name": "fullname"
            },
            {
                "default": "None",
                "name": "path"
            }
        ]
    },
    "fix_keys_for_gexf": {
        "args": [
            {
                "name": "orig"
            }
        ]
    },
    "fixedImage = File": {
        "args": [
            {
                "default": "-2",
                "name": "position"
            },
            {
                "default": "\"Image which ines the space into which the moving image is registered\"",
                "name": "desc"
            },
            {
                "default": "True",
                "name": "exists"
            },
            {
                "default": "\"%s\"",
                "name": "argstr"
            }
        ]
    },
    "fixedImageMask = File": {
        "args": [
            {
                "default": "\"Image which ines a mask for the fixed image\"",
                "name": "desc"
            },
            {
                "default": "True",
                "name": "exists"
            },
            {
                "default": "\"--fixedImageMask %s\"",
                "name": "argstr"
            }
        ]
    },
    "fixedImageROI = traits.List": {
        "args": [
            {
                "default": "\"Label image which ines a ROI of interest for the fixed image\"",
                "name": "desc"
            },
            {
                "default": "\"--fixedImageROI %s\"",
                "name": "argstr"
            }
        ]
    },
    "flatten": {
        "args": [
            {
                "name": "S"
            }
        ]
    },
    "flattened_interpolation_type.append": {
        "args": [
            {
                "name": "'Linear') #Linear is the ault."
            }
        ]
    },
    "float_trait, File": {
        "args": [
            {
                "default": "True)",
                "name": "exists"
            },
            {
                "default": "1.0",
                "name": "ault"
            },
            {
                "default": "True",
                "name": "mandatory"
            },
            {
                "name": ""
            }
        ]
    },
    "fltcols": {
        "args": [
            {
                "name": "vals"
            }
        ]
    },
    "flush": {
        "args": []
    },
    "fname_presuffix": {
        "args": [
            {
                "name": "fname"
            },
            {
                "default": "''",
                "name": "prefix"
            },
            {
                "default": "''",
                "name": "suffix"
            },
            {
                "default": "None",
                "name": "newpath"
            },
            {
                "default": "True",
                "name": "use_ext"
            }
        ]
    },
    "fnames_presuffix": {
        "args": [
            {
                "name": "fnames"
            },
            {
                "default": "''",
                "name": "prefix"
            },
            {
                "default": "''",
                "name": "suffix"
            },
            {
                "default": "None",
                "name": "newpath"
            },
            {
                "default": "True",
                "name": "use_ext"
            }
        ]
    },
    "for key, value in aults.iteritems": {
        "args": [
            {
                "name": ""
            }
        ]
    },
    "for name in unined_traits.keys": {
        "args": [
            {
                "name": ""
            }
        ]
    },
    "force_activation = traits.Bool": {
        "args": [
            {
                "name": "False"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "default": "\"In case no clusters survive the topological inference step this will pick a culster with the highes sum of t-values. Use with care.\"",
                "name": "desc"
            }
        ]
    },
    "force_dir = traits.Bool": {
        "args": [
            {
                "name": "True"
            },
            {
                "default": "'--forcedir'",
                "name": "argstr"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "force_read = traits.Bool": {
        "args": [
            {
                "name": "True"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "force_to_valid_python_variable_name": {
        "args": [
            {
                "name": "old_name"
            }
        ]
    },
    "format_dot": {
        "args": [
            {
                "name": "dotfilename"
            },
            {
                "default": "None",
                "name": "format"
            }
        ]
    },
    "format_node": {
        "args": [
            {
                "name": "node"
            },
            {
                "default": "'python'",
                "name": "format"
            },
            {
                "default": "False",
                "name": "include_config"
            }
        ]
    },
    "format_params": {
        "args": [
            {
                "name": "paramlist"
            },
            {
                "default": "None",
                "name": "otherlist"
            }
        ]
    },
    "forward = File": {
        "args": [
            {
                "default": "\"Forward transformation.  Assumed to be a ormation field in world coordinates",
                "name": "desc"
            },
            {
                "name": "unless the --h-field option is specified.\""
            },
            {
                "default": "True",
                "name": "exists"
            },
            {
                "default": "\"--forward %s\"",
                "name": "argstr"
            }
        ]
    },
    "forward_warping = traits.Bool": {
        "args": [
            {
                "name": "False"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "frequency_range = traits.List": {
        "args": [
            {
                "default": "[0.02",
                "name": "value"
            },
            {
                "name": "0.15]"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "from ..base import ": {
        "args": [
            {
                "name": "CommandLine"
            },
            {
                "name": "CommandLineInputSpec"
            },
            {
                "name": "isined"
            },
            {
                "name": ""
            }
        ]
    },
    "from ..interfaces.base import ": {
        "args": [
            {
                "name": "CommandLine"
            },
            {
                "name": "isined"
            },
            {
                "name": "Unined"
            },
            {
                "name": ""
            }
        ]
    },
    "from .traits_extension import ": {
        "args": [
            {
                "name": "traits"
            },
            {
                "name": "Unined"
            },
            {
                "name": "TraitDictObject"
            },
            {
                "name": ""
            }
        ]
    },
    "from nipype.interfaces.base import ": {
        "args": [
            {
                "name": "BaseInterface"
            },
            {
                "name": "BaseInterfaceInputSpec"
            },
            {
                "name": "isined"
            },
            {
                "name": ""
            }
        ]
    },
    "from_provjson": {
        "args": [
            {
                "name": "json_content"
            },
            {
                "name": "**kw"
            }
        ]
    },
    "fullTensorModel = traits.Bool": {
        "args": [
            {
                "default": "\"Whether to use the full tensor model. If unchecked",
                "name": "desc"
            },
            {
                "name": "use the ault simple tensor model\""
            },
            {
                "default": "\"--fullTensorModel \"",
                "name": "argstr"
            }
        ]
    },
    "fullname": {
        "args": []
    },
    "func_is_3d": {
        "args": [
            {
                "name": "in_file"
            }
        ]
    },
    "gcd": {
        "args": [
            {
                "name": "a"
            },
            {
                "name": "b"
            }
        ]
    },
    "gen_filename_from_param": {
        "args": [
            {
                "name": "param"
            },
            {
                "name": "base"
            }
        ]
    },
    "gen_info": {
        "args": [
            {
                "name": "run_event_files"
            }
        ]
    },
    "gen_noise": {
        "args": [
            {
                "name": "image"
            },
            {
                "default": "None",
                "name": "mask"
            },
            {
                "default": "10.0",
                "name": "snr_db"
            },
            {
                "default": "'normal'",
                "name": "dist"
            },
            {
                "default": "'normal'",
                "name": "bg_dist"
            }
        ]
    },
    "generateEmptyMRMLSceneAndQuit = File": {
        "args": [
            {
                "default": "\"Used for testing.  Only write a scene with ault mrml parameters.\"",
                "name": "desc"
            },
            {
                "default": "True",
                "name": "exists"
            }
        ]
    },
    "generate_all_classes": {
        "args": [
            {
                "default": "[]",
                "name": "modules_list"
            },
            {
                "default": "[]",
                "name": "launcher"
            },
            {
                "default": "False",
                "name": "redirect_x"
            },
            {
                "default": "False",
                "name": "mipav_hacks"
            }
        ]
    },
    "generate_boutiques_descriptor": {
        "args": [
            {
                "name": "module"
            },
            {
                "name": "interface_name"
            },
            {
                "name": "ignored_template_inputs"
            },
            {
                "name": "docker_image"
            },
            {
                "name": "docker_index"
            },
            {
                "name": "verbose"
            },
            {
                "name": "ignore_template_numbers"
            }
        ]
    },
    "generate_class": {
        "args": [
            {
                "name": "module"
            },
            {
                "name": "launcher"
            },
            {
                "default": "True",
                "name": "strip_module_name_prefix"
            },
            {
                "default": " False",
                "name": "redirect_x "
            },
            {
                "default": "False",
                "name": "mipav_hacks"
            }
        ]
    },
    "generate_expanded_graph": {
        "args": [
            {
                "name": "graph_in"
            }
        ]
    },
    "generation": {
        "args": [
            {
                "name": "entity"
            },
            {
                "default": "None",
                "name": "activity"
            },
            {
                "default": "None",
                "name": "time"
            },
            {
                "default": "None",
                "name": "identifier"
            },
            {
                "default": "None",
                "name": "other_attributes"
            }
        ]
    },
    "get": {
        "args": [
            {
                "name": "section"
            },
            {
                "name": "option"
            }
        ]
    },
    "get2classes": {
        "args": [
            {
                "name": "dartel_files"
            }
        ]
    },
    "getLevelName": {
        "args": [
            {
                "name": "name"
            }
        ]
    },
    "getLogger": {
        "args": [
            {
                "name": "name"
            }
        ]
    },
    "get_affine": {
        "args": [
            {
                "name": "volume"
            }
        ]
    },
    "get_all_files": {
        "args": [
            {
                "name": "infile"
            }
        ]
    },
    "get_allowed_types": {
        "args": []
    },
    "get_anon_id": {
        "args": [
            {
                "name": "record"
            }
        ]
    },
    "get_anonymous_identifier": {
        "args": [
            {
                "default": "'id'",
                "name": "local_prefix"
            }
        ]
    },
    "get_aparc_aseg": {
        "args": [
            {
                "name": "files"
            }
        ]
    },
    "get_asserted_types": {
        "args": []
    },
    "get_attr_id": {
        "args": [
            {
                "name": "attr"
            },
            {
                "default": "None",
                "name": "skip"
            }
        ]
    },
    "get_attribute": {
        "args": [
            {
                "name": "attr_name"
            }
        ]
    },
    "get_attributes": {
        "args": []
    },
    "get_ault_namespace": {
        "args": []
    },
    "get_boutiques_input": {
        "args": [
            {
                "name": "inputs"
            },
            {
                "name": "interface"
            },
            {
                "name": "input_name"
            },
            {
                "name": "spec"
            },
            {
                "name": "ignored_template_inputs"
            },
            {
                "name": "verbose"
            },
            {
                "name": "ignore_template_numbers"
            }
        ]
    },
    "get_boutiques_output": {
        "args": [
            {
                "name": "name"
            },
            {
                "name": "interface"
            },
            {
                "name": "tool_inputs"
            },
            {
                "default": "False",
                "name": "verbose"
            }
        ]
    },
    "get_bundle": {
        "args": [
            {
                "name": "identifier"
            }
        ]
    },
    "get_code": {
        "args": [
            {
                "name": "fullname"
            }
        ]
    },
    "get_connectivity_matrix": {
        "args": [
            {
                "name": "n_rois"
            },
            {
                "name": "list_of_roi_crossed_lists"
            }
        ]
    },
    "get_data": {
        "args": [
            {
                "name": "key"
            }
        ]
    },
    "get_data_dims": {
        "args": [
            {
                "name": "volume"
            }
        ]
    },
    "get_datatype": {
        "args": []
    },
    "get_dependencies": {
        "args": [
            {
                "name": "name"
            },
            {
                "name": "environ"
            }
        ]
    },
    "get_doc": {
        "args": [
            {
                "name": "cmd"
            },
            {
                "name": "opt_map"
            },
            {
                "default": "None",
                "name": "help_flag"
            },
            {
                "default": "True",
                "name": "trap_error"
            }
        ]
    },
    "get_dofvolumes": {
        "args": [
            {
                "name": "dof_files"
            },
            {
                "name": "cope_files"
            }
        ]
    },
    "get_endTime": {
        "args": []
    },
    "get_first_3dfile": {
        "args": [
            {
                "name": "in_files"
            }
        ]
    },
    "get_flattened": {
        "args": []
    },
    "get_function_aults = operator.attrgetter": {
        "args": [
            {
                "name": "_func_aults"
            }
        ]
    },
    "get_hashval": {
        "args": [
            {
                "name": "inputdict"
            },
            {
                "default": "None",
                "name": "skip"
            }
        ]
    },
    "get_identifier": {
        "args": []
    },
    "get_label": {
        "args": []
    },
    "get_langtag": {
        "args": []
    },
    "get_levels": {
        "args": [
            {
                "name": "G"
            }
        ]
    },
    "get_localpart": {
        "args": []
    },
    "get_matlab_command": {
        "args": [
            {
                "name": ""
            }
        ]
    },
    "get_namespace": {
        "args": [
            {
                "name": "uri"
            }
        ]
    },
    "get_nipype_gitversion": {
        "args": [
            {
                "name": ""
            }
        ]
    },
    "get_node": {
        "args": [
            {
                "name": "name"
            }
        ]
    },
    "get_output": {
        "args": [
            {
                "name": "parameter"
            }
        ]
    },
    "get_params_from_doc": {
        "args": [
            {
                "name": "cmd"
            },
            {
                "default": "'--'",
                "name": "style"
            },
            {
                "default": "None",
                "name": "help_flag"
            },
            {
                "default": "True",
                "name": "trap_error"
            }
        ]
    },
    "get_pkg_info": {
        "args": [
            {
                "name": "pkg_path"
            }
        ]
    },
    "get_prefix": {
        "args": []
    },
    "get_print_name": {
        "args": [
            {
                "name": "node"
            },
            {
                "default": "True",
                "name": "simple_form"
            }
        ]
    },
    "get_prov_type": {
        "args": []
    },
    "get_provjson": {
        "args": [
            {
                "name": "**kw"
            }
        ]
    },
    "get_provn": {
        "args": [
            {
                "default": "0",
                "name": "_indent_level"
            },
            {
                "default": "True",
                "name": "asserted_only"
            }
        ]
    },
    "get_record": {
        "args": [
            {
                "name": "identifier"
            }
        ]
    },
    "get_records": {
        "args": [
            {
                "default": "None",
                "name": "class_or_type_or_tuple"
            }
        ]
    },
    "get_registered_namespaces": {
        "args": []
    },
    "get_related_files": {
        "args": [
            {
                "name": "filename"
            }
        ]
    },
    "get_rois_crossed": {
        "args": [
            {
                "name": "pointsmm"
            },
            {
                "name": "roiData"
            },
            {
                "name": "voxelSize"
            }
        ]
    },
    "get_startTime": {
        "args": []
    },
    "get_subnodes": {
        "args": []
    },
    "get_traitsfree": {
        "args": [
            {
                "name": "**kwargs"
            }
        ]
    },
    "get_type": {
        "args": []
    },
    "get_type_from_spec_info": {
        "args": [
            {
                "name": "spec_info"
            }
        ]
    },
    "get_unbound_function": {
        "args": [
            {
                "name": "unbound"
            }
        ]
    },
    "get_unique_value": {
        "args": [
            {
                "name": "type"
            },
            {
                "name": "id"
            }
        ]
    },
    "get_uri": {
        "args": []
    },
    "get_valid_identifier": {
        "args": [
            {
                "name": "identifier"
            }
        ]
    },
    "get_value": {
        "args": []
    },
    "get_vox_dims": {
        "args": [
            {
                "name": "volume"
            }
        ]
    },
    "getboolean": {
        "args": [
            {
                "name": "section"
            },
            {
                "name": "option"
            }
        ]
    },
    "getbtthresh": {
        "args": [
            {
                "name": "medianvals"
            }
        ]
    },
    "getclass1images": {
        "args": [
            {
                "name": "class_images"
            }
        ]
    },
    "getmeanscale": {
        "args": [
            {
                "name": "medianvals"
            }
        ]
    },
    "getname": {
        "args": [
            {
                "name": "u"
            },
            {
                "name": "i"
            }
        ]
    },
    "getsource": {
        "args": [
            {
                "name": "function"
            }
        ]
    },
    "getthreshop": {
        "args": [
            {
                "name": "thresh"
            }
        ]
    },
    "getusans": {
        "args": [
            {
                "name": "x"
            }
        ]
    },
    "grab_doc": {
        "args": [
            {
                "name": "task_name"
            }
        ]
    },
    "grab_xml": {
        "args": [
            {
                "name": "module"
            },
            {
                "name": "launcher"
            },
            {
                "default": "False",
                "name": "mipav_hacks"
            }
        ]
    },
    "graph2use: 'orig', 'hierarchical' ": {
        "args": [
            {
                "name": "ault)"
            },
            {
                "name": "'flat'"
            },
            {
                "name": "'exec'"
            },
            {
                "name": "'colored'"
            }
        ]
    },
    "group_id = traits.Str": {
        "args": [
            {
                "name": "'group1'"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "default": "'ID for group'",
                "name": "desc"
            }
        ]
    },
    "gzip_output = traits.Bool": {
        "args": [
            {
                "name": "False"
            },
            {
                "default": "'-g'",
                "name": "argstr"
            },
            {
                "default": "True",
                "name": "useault"
            }
        ]
    },
    "h_field = traits.Bool": {
        "args": [
            {
                "default": "\"The ormation is an h-field.\"",
                "name": "desc"
            },
            {
                "default": "\"--h_field \"",
                "name": "argstr"
            }
        ]
    },
    "has_metadata": {
        "args": [
            {
                "name": "trait"
            },
            {
                "name": "metadata"
            },
            {
                "default": "None",
                "name": "value"
            },
            {
                "default": "True",
                "name": "recursive"
            }
        ]
    },
    "has_no_langtag": {
        "args": []
    },
    "has_option": {
        "args": [
            {
                "name": "section"
            },
            {
                "name": "option"
            }
        ]
    },
    "hash_exists": {
        "args": [
            {
                "default": "False",
                "name": "updatehash"
            }
        ]
    },
    "hash_infile": {
        "args": [
            {
                "name": "afile"
            },
            {
                "default": "8192",
                "name": "chunk_len"
            },
            {
                "default": "hashlib.md5",
                "name": "crypto"
            }
        ]
    },
    "hash_rename": {
        "args": [
            {
                "name": "filename"
            },
            {
                "name": "hashvalue"
            }
        ]
    },
    "hash_timestamp": {
        "args": [
            {
                "name": "afile"
            }
        ]
    },
    "header = traits.Bool": {
        "args": [
            {
                "name": "False"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "default": "'True if the first line is a column header'",
                "name": "desc"
            }
        ]
    },
    "height_threshold_type = traits.Enum": {
        "args": [
            {
                "name": "'p-value'"
            },
            {
                "name": "'stat'"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "default": "\"Is the cluster forming threshold a stat value or p-value?\"",
                "name": "desc"
            }
        ]
    },
    "help": {
        "args": []
    },
    "hemi = traits.Enum": {
        "args": [
            {
                "name": "'both'"
            },
            {
                "name": "'lh'"
            },
            {
                "name": "'rh'"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "hfieldtype = traits.Enum": {
        "args": [
            {
                "name": "\"displacement\""
            },
            {
                "name": "\"h-Field\""
            },
            {
                "default": "\"Set if the ormation field is an -Field\"",
                "name": "desc"
            },
            {
                "default": "\"--hfieldtype %s\"",
                "name": "argstr"
            }
        ]
    },
    "highpass : boolean ": {
        "args": [
            {
                "name": "ault: True"
            }
        ]
    },
    "highpass_sigma = traits.Float": {
        "args": [
            {
                "name": "-1"
            },
            {
                "default": "\"-bptf %.6f\"",
                "name": "argstr"
            },
            {
                "default": "4",
                "name": "position"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "histogrambins = traits.Int": {
        "args": [
            {
                "default": "\"Number of histogram bins to use for Mattes Mutual Information. Reduce the number of bins if a ormable registration fails. If the number of bins is too large",
                "name": "desc"
            },
            {
                "name": "the estimated PDFs will be a field of impulses and will inhibit reliable registration estimation.\""
            },
            {
                "default": "\"--histogrambins %d\"",
                "name": "argstr"
            }
        ]
    },
    "hmc_pipeline": {
        "args": [
            {
                "default": "'motion_correct'",
                "name": "name"
            }
        ]
    },
    "hmc_split": {
        "args": [
            {
                "name": "in_file"
            },
            {
                "name": "in_bval"
            },
            {
                "default": "0",
                "name": "ref_num"
            },
            {
                "default": "5.0",
                "name": "lowbval"
            }
        ]
    },
    "houghEyeDetectorMode = traits.Int": {
        "args": [
            {
                "default": "\"",
                "name": "desc"
            },
            {
                "name": "This flag controls the mode of Hough eye detector.  By ault"
            },
            {
                "name": "value of 1 is for T1W images"
            },
            {
                "name": "while the value of 0 is for T2W and PD images."
            },
            {
                "name": "\""
            },
            {
                "default": "\"--houghEyeDetectorMode %d\"",
                "name": "argstr"
            }
        ]
    },
    "human_order_sorted": {
        "args": [
            {
                "name": "l"
            }
        ]
    },
    "id_in_filename = traits.Bool": {
        "args": [
            {
                "name": "False"
            },
            {
                "default": "'-i'",
                "name": "argstr"
            },
            {
                "default": "True",
                "name": "useault"
            }
        ]
    },
    "id_list_from_lookup_table": {
        "args": [
            {
                "name": "lookup_file"
            },
            {
                "name": "region_list"
            }
        ]
    },
    "idx = contrast_[2].index": {
        "args": [
            {
                "name": "reg_name"
            }
        ]
    },
    "if any": {
        "args": [
            {
                "name": "ined_vals) and self._result.outputs"
            }
        ]
    },
    "if isined": {
        "args": [
            {
                "name": "self.inputs.use_norm) and self.inputs.use_norm"
            }
        ]
    },
    "if matlab_cmd and isined": {
        "args": [
            {
                "name": "matlab_cmd"
            }
        ]
    },
    "if name == 'target_masks' and isined": {
        "args": [
            {
                "name": "value"
            }
        ]
    },
    "if newpath and isined": {
        "args": [
            {
                "name": "newpath"
            }
        ]
    },
    "if not isined": {
        "args": [
            {
                "name": "in_network"
            }
        ]
    },
    "if not self.traits": {
        "args": [
            {
                "name": "[trait].useault"
            }
        ]
    },
    "if self._ault_mfile and not isined": {
        "args": [
            {
                "name": "self.inputs.mfile"
            }
        ]
    },
    "if self._ault_paths and not isined": {
        "args": [
            {
                "name": "self.inputs.paths"
            }
        ]
    },
    "if self.inputs.save_bias or isined": {
        "args": [
            {
                "name": "self.inputs.bias_image"
            }
        ]
    },
    "inInhomogeneity = traits.Enum": {
        "args": [
            {
                "name": "\"true\""
            },
            {
                "name": "\"false\""
            },
            {
                "default": "\"Set to false by ault",
                "name": "desc"
            },
            {
                "name": "this parameter will make FANTASM try to do inhomogeneity correction during it's iterative cycle.\""
            },
            {
                "default": "\"--inInhomogeneity %s\"",
                "name": "argstr"
            }
        ]
    },
    "inMultithreading = traits.Enum": {
        "args": [
            {
                "name": "\"true\""
            },
            {
                "name": "\"false\""
            },
            {
                "default": "\"Set to false by ault",
                "name": "desc"
            },
            {
                "name": "this parameter controls the multithreaded behavior of the linear registration.\""
            },
            {
                "default": "\"--inMultithreading %s\"",
                "name": "argstr"
            }
        ]
    },
    "inNew = traits.Enum": {
        "args": [
            {
                "name": "\"Dicom axial\""
            },
            {
                "name": "\"Dicom coronal\""
            },
            {
                "name": "\"Dicom sagittal\""
            },
            {
                "name": "\"User ined\""
            },
            {
                "default": "\"New image orientation\"",
                "name": "desc"
            },
            {
                "default": "\"--inNew %s\"",
                "name": "argstr"
            }
        ]
    },
    "inUser4 = traits.Enum": {
        "args": [
            {
                "name": "\"Axial\""
            },
            {
                "name": "\"Coronal\""
            },
            {
                "name": "\"Sagittal\""
            },
            {
                "name": "\"Unknown\""
            },
            {
                "default": "\"User ined Image Orientation\"",
                "name": "desc"
            },
            {
                "default": "\"--inUser4 %s\"",
                "name": "argstr"
            }
        ]
    },
    "in_dict = traits.Dict": {
        "args": [
            {
                "default": "{}",
                "name": "value"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "indexbytes": {
        "args": [
            {
                "name": "buf"
            },
            {
                "name": "i"
            }
        ]
    },
    "ined_vals = [isined": {
        "args": [
            {
                "name": "val) for val in values]"
            }
        ]
    },
    "influence": {
        "args": [
            {
                "name": "influencee"
            },
            {
                "name": "influencer"
            },
            {
                "default": "None",
                "name": "identifier"
            },
            {
                "default": "None",
                "name": "other_attributes"
            }
        ]
    },
    "info_regexp": {
        "args": [
            {
                "name": "info"
            },
            {
                "name": "field"
            },
            {
                "default": "\"\\n\"",
                "name": "delim"
            }
        ]
    },
    "initializeWithDisplacementField = File": {
        "args": [
            {
                "default": "\"Initial ormation field vector image file name\"",
                "name": "desc"
            },
            {
                "default": "True",
                "name": "exists"
            },
            {
                "default": "\"--initializeWithDisplacementField %s\"",
                "name": "argstr"
            }
        ]
    },
    "inputForwardDeformationFieldVolume = File": {
        "args": [
            {
                "default": "\"Required: input forward ormation field image file name\"",
                "name": "desc"
            },
            {
                "default": "True",
                "name": "exists"
            },
            {
                "default": "\"--inputForwardDeformationFieldVolume %s\"",
                "name": "argstr"
            }
        ]
    },
    "inputReverseDeformationFieldVolume = File": {
        "args": [
            {
                "default": "\"Required: input reverse ormation field image file name\"",
                "name": "desc"
            },
            {
                "default": "True",
                "name": "exists"
            },
            {
                "default": "\"--inputReverseDeformationFieldVolume %s\"",
                "name": "argstr"
            }
        ]
    },
    "inputVolume = File": {
        "args": [
            {
                "default": "\"Input image used to ine physical space of resulting mask\"",
                "name": "desc"
            },
            {
                "default": "True",
                "name": "exists"
            },
            {
                "default": "\"--inputVolume %s\"",
                "name": "argstr"
            }
        ]
    },
    "input['ault-value']   = spec.ault_value": {
        "args": [
            {
                "name": "[1]"
            }
        ]
    },
    "input_data_prefix = traits.Str": {
        "args": [
            {
                "name": "\"odf\""
            },
            {
                "default": "'recon data prefix'",
                "name": "desc"
            },
            {
                "default": "'%s'",
                "name": "argstr"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "default": "0",
                "name": "position"
            }
        ]
    },
    "input_fmap = isined": {
        "args": [
            {
                "name": "self.inputs.fmap_in_file"
            }
        ]
    },
    "input_output_type = traits.Enum": {
        "args": [
            {
                "name": "'nii'"
            },
            {
                "name": "'analyze'"
            },
            {
                "name": "'ni1'"
            },
            {
                "name": "'nii.gz'"
            },
            {
                "default": "'-it %s'",
                "name": "argstr"
            },
            {
                "default": "'input and output file type'",
                "name": "desc"
            },
            {
                "default": "True",
                "name": "useault"
            }
        ]
    },
    "input_phase = isined": {
        "args": [
            {
                "name": "self.inputs.phasemap_in_file"
            }
        ]
    },
    "input_vsm = isined": {
        "args": [
            {
                "name": "self.inputs.shift_in_file"
            }
        ]
    },
    "inputnode.encoding_direction - The phase encoding direction in EPI acquisition ": {
        "args": [
            {
                "name": "ault y"
            }
        ]
    },
    "inputnode.epi_ph_encoding_dir - The phase encoding direction in EPI acquisition ": {
        "args": [
            {
                "name": "ault y"
            }
        ]
    },
    "inputnode.ref_num ": {
        "args": [
            {
                "name": "optional"
            },
            {
                "default": "0) index of the b0 volume that \\",
                "name": "ault"
            }
        ]
    },
    "inputs": {
        "args": []
    },
    "insert_doc": {
        "args": [
            {
                "name": "doc"
            },
            {
                "name": "new_items"
            }
        ]
    },
    "insert_mat": {
        "args": [
            {
                "name": "inlist"
            },
            {
                "default": "0",
                "name": "volid"
            }
        ]
    },
    "int2byte": {
        "args": [
            {
                "name": "i"
            }
        ]
    },
    "interface": {
        "args": []
    },
    "interp = traits.Enum": {
        "args": [
            {
                "name": "'cubic'"
            },
            {
                "name": "'nearest'"
            },
            {
                "name": "'linear'"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "interp = traits.Range": {
        "args": [
            {
                "default": " 0",
                "name": "low "
            },
            {
                "default": " 7",
                "name": "high "
            },
            {
                "default": " True",
                "name": "useault "
            },
            {
                "name": ""
            }
        ]
    },
    "interpolation = traits.Enum": {
        "args": [
            {
                "name": "'cubic'"
            },
            {
                "name": "'linear'"
            },
            {
                "name": "'nearest'"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "invalidation": {
        "args": [
            {
                "name": "entity"
            },
            {
                "default": "None",
                "name": "activity"
            },
            {
                "default": "None",
                "name": "time"
            },
            {
                "default": "None",
                "name": "identifier"
            },
            {
                "default": "None",
                "name": "other_attributes"
            }
        ]
    },
    "invert_x = traits.Bool": {
        "args": [
            {
                "name": "False"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "default": "'Inverts the b-vectors along the x-axis'",
                "name": "desc"
            }
        ]
    },
    "invert_y = traits.Bool": {
        "args": [
            {
                "name": "False"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "default": "'Inverts the b-vectors along the y-axis'",
                "name": "desc"
            }
        ]
    },
    "invert_z = traits.Bool": {
        "args": [
            {
                "name": "False"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "default": "'Inverts the b-vectors along the z-axis'",
                "name": "desc"
            }
        ]
    },
    "is_asserted": {
        "args": []
    },
    "is_bundle": {
        "args": []
    },
    "is_container": {
        "args": [
            {
                "name": "item"
            }
        ]
    },
    "is_document": {
        "args": []
    },
    "is_element": {
        "args": []
    },
    "is_initializing": {
        "args": []
    },
    "is_job_pending": {
        "args": [
            {
                "name": "task_id"
            }
        ]
    },
    "is_job_state_pending": {
        "args": []
    },
    "is_list": {
        "args": [
            {
                "name": "spec_info"
            }
        ]
    },
    "is_package": {
        "args": [
            {
                "name": "fullname"
            }
        ]
    },
    "is_pending": {
        "args": []
    },
    "is_relation": {
        "args": []
    },
    "is_running": {
        "args": []
    },
    "is_zombie": {
        "args": []
    },
    "isined": {
        "args": [
            {
                "name": "self.inputs.in_file"
            }
        ]
    },
    "items": {
        "args": []
    },
    "iteration_limit = traits.Int": {
        "args": [
            {
                "name": "4"
            },
            {
                "default": "'-i %d'",
                "name": "argstr"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "iterations = traits.Int": {
        "args": [
            {
                "default": "'-iterations %d'",
                "name": "argstr"
            },
            {
                "default": "'NA'",
                "name": "units"
            },
            {
                "default": "\"Number of streamlines to generate at each seed point. The ault is 5000.\"",
                "name": "desc"
            }
        ]
    },
    "iterbytes": {
        "args": [
            {
                "name": "buf"
            }
        ]
    },
    "iteritems": {
        "args": [
            {
                "name": "d"
            },
            {
                "name": "**kw"
            }
        ]
    },
    "iterkeys": {
        "args": [
            {
                "name": "d"
            },
            {
                "name": "**kw"
            }
        ]
    },
    "iterlists": {
        "args": [
            {
                "name": "d"
            },
            {
                "name": "**kw"
            }
        ]
    },
    "itervalues": {
        "args": [
            {
                "name": "d"
            },
            {
                "name": "**kw"
            }
        ]
    },
    "jobname": {
        "args": []
    },
    "jobtype": {
        "args": []
    },
    "jobtype = traits.Enum": {
        "args": [
            {
                "name": "'estwrite'"
            },
            {
                "name": "'est'"
            },
            {
                "name": "'write'"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "joinsource": {
        "args": [
            {
                "name": "value"
            }
        ]
    },
    "json_representation": {
        "args": []
    },
    "key_func": {
        "args": [
            {
                "name": "src_nii"
            }
        ]
    },
    "label = traits.Int": {
        "args": [
            {
                "default": "\"Label value that ines seeding region.\"",
                "name": "desc"
            },
            {
                "default": "\"--label %d\"",
                "name": "argstr"
            }
        ]
    },
    "labelToSmooth = traits.Int": {
        "args": [
            {
                "default": "\"The label to smooth.  All others will be ignored.  If no label is selected by the user",
                "name": "desc"
            },
            {
                "name": "the maximum label in the image is chosen by ault.\""
            },
            {
                "default": "\"--labelToSmooth %d\"",
                "name": "argstr"
            }
        ]
    },
    "length": {
        "args": [
            {
                "name": "xyz"
            },
            {
                "default": "False",
                "name": "along"
            }
        ]
    },
    "lines.append": {
        "args": [
            {
                "name": "wf"
            }
        ]
    },
    "lines_to_float": {
        "args": [
            {
                "name": "lines"
            }
        ]
    },
    "link_masks": {
        "args": [
            {
                "name": "subjects_dir"
            },
            {
                "name": "subject_id"
            }
        ]
    },
    "listClasses": {
        "args": [
            {
                "default": "None",
                "name": "module"
            }
        ]
    },
    "list_node_names": {
        "args": []
    },
    "list_to_filename": {
        "args": [
            {
                "name": "filelist"
            }
        ]
    },
    "load": {
        "args": [
            {
                "name": "filename"
            }
        ]
    },
    "load_json": {
        "args": [
            {
                "name": "filename"
            }
        ]
    },
    "load_module": {
        "args": [
            {
                "name": "fullname"
            }
        ]
    },
    "load_template": {
        "args": [
            {
                "name": "name"
            }
        ]
    },
    "loadcrash": {
        "args": [
            {
                "name": "infile"
            },
            {
                "name": "*args"
            }
        ]
    },
    "loadpkl": {
        "args": [
            {
                "name": "infile"
            }
        ]
    },
    "lock": {
        "args": [
            {
                "name": "file"
            },
            {
                "name": "flags"
            }
        ]
    },
    "logdebug_dict_differences": {
        "args": [
            {
                "name": "dold"
            },
            {
                "name": "dnew"
            },
            {
                "default": "\"\"",
                "name": "prefix"
            }
        ]
    },
    "loops = InputMultiPath": {
        "args": [
            {
                "name": "[5]"
            },
            {
                "name": "traits.Int"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "lowerThresholdFactor = traits.Float": {
        "args": [
            {
                "default": "\"Lower threshold factor for ining the brain mask\"",
                "name": "desc"
            },
            {
                "default": "\"--lowerThresholdFactor %f\"",
                "name": "argstr"
            }
        ]
    },
    "lowpass_sigma = traits.Float": {
        "args": [
            {
                "name": "-1"
            },
            {
                "default": "\"%.6f\"",
                "name": "argstr"
            },
            {
                "default": "5",
                "name": "position"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "main": {
        "args": [
            {
                "name": "argv"
            }
        ]
    },
    "makeListOfOneElement": {
        "args": [
            {
                "name": "inputFile"
            }
        ]
    },
    "make_job_name": {
        "args": [
            {
                "name": "jobnumber"
            },
            {
                "name": "nodeslist"
            }
        ]
    },
    "make_key_func": {
        "args": [
            {
                "name": "meta_keys"
            },
            {
                "default": "None",
                "name": "index"
            }
        ]
    },
    "make_output_dir": {
        "args": [
            {
                "name": "outdir"
            }
        ]
    },
    "makefmtlist": {
        "args": [
            {
                "name": "output_array"
            },
            {
                "name": "typelist"
            },
            {
                "name": "rowheadingsBool"
            },
            {
                "name": ""
            }
        ]
    },
    "maketypelist": {
        "args": [
            {
                "name": "rowheadings"
            },
            {
                "name": "shape"
            },
            {
                "name": "extraheadingBool"
            },
            {
                "name": "extraheading"
            }
        ]
    },
    "maskProcessingMode = traits.Enum": {
        "args": [
            {
                "name": "\"NOMASK\""
            },
            {
                "name": "\"ROIAUTO\""
            },
            {
                "name": "\"ROI\""
            },
            {
                "name": "\"BOBF\""
            },
            {
                "default": "\"What mode to use for using the masks: NOMASK|ROIAUTO|ROI|BOBF.  If ROIAUTO is choosen",
                "name": "desc"
            },
            {
                "name": "then the mask is implicitly ined using a otsu forground and hole filling algorithm. Where the Region Of Interest mode uses the masks to ine what parts of the image should be used for computing the ormation field.  Brain Only Background Fill uses the masks to pre-process the input images by clipping and filling in the background with a preined value.\""
            },
            {
                "default": "\"--maskProcessingMode %s\"",
                "name": "argstr"
            }
        ]
    },
    "maskimage = File": {
        "args": [
            {
                "default": "\"Binary mask that ines the structure of your interest. NOTE: This parameter is OPTIONAL. If the mask is not specified",
                "name": "desc"
            },
            {
                "name": "the module will use internally Otsu thresholding to ine this mask. Better processing results can often be obtained when a meaningful mask is ined.\""
            },
            {
                "default": "True",
                "name": "exists"
            },
            {
                "default": "\"--maskimage %s\"",
                "name": "argstr"
            }
        ]
    },
    "matlab2csv": {
        "args": [
            {
                "name": "in_array"
            },
            {
                "name": "name"
            },
            {
                "name": "reshape"
            }
        ]
    },
    "maximumDeformation = traits.Float": {
        "args": [
            {
                "default": "\"If Constrain Deformation is checked",
                "name": "desc"
            },
            {
                "name": "limit the ormation to this amount.\""
            },
            {
                "default": "\"--maximumDeformation %f\"",
                "name": "argstr"
            }
        ]
    },
    "maximum_RGB_output = traits.Int": {
        "args": [
            {
                "name": "255"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "maximum_harmonic_order = traits.Float": {
        "args": [
            {
                "default": "'-lmax %s'",
                "name": "argstr"
            },
            {
                "default": "'set the maximum harmonic order for the output series. By ault",
                "name": "desc"
            },
            {
                "name": "the program will use the highest possible lmax given the number of diffusion-weighted images.'"
            }
        ]
    },
    "maximum_harmonic_order = traits.Int": {
        "args": [
            {
                "default": "'-lmax %s'",
                "name": "argstr"
            },
            {
                "default": "'set the maximum harmonic order for the output series. By ault",
                "name": "desc"
            },
            {
                "name": "the program will use the highest possible lmax given the number of diffusion-weighted images.'"
            }
        ]
    },
    "membership": {
        "args": [
            {
                "name": "collection"
            },
            {
                "name": "entity"
            },
            {
                "default": "None",
                "name": "identifier"
            },
            {
                "default": "None",
                "name": "other_attributes"
            }
        ]
    },
    "mention": {
        "args": [
            {
                "name": "specificEntity"
            },
            {
                "name": "generalEntity"
            },
            {
                "name": "bundle"
            },
            {
                "default": "None",
                "name": "identifier"
            },
            {
                "default": "None",
                "name": "other_attributes"
            }
        ]
    },
    "merge_and_mean": {
        "args": [
            {
                "default": "'mm'",
                "name": "name"
            }
        ]
    },
    "merge_and_mean_parallel": {
        "args": [
            {
                "default": "'mm'",
                "name": "name"
            }
        ]
    },
    "merge_bundles": {
        "args": [
            {
                "name": "g1"
            },
            {
                "name": "g2"
            }
        ]
    },
    "merge_csvs": {
        "args": [
            {
                "name": "in_list"
            }
        ]
    },
    "merge_dict": {
        "args": [
            {
                "name": "d1"
            },
            {
                "name": "d2"
            },
            {
                "default": "lambda x",
                "name": "merge"
            },
            {
                "name": "y: y"
            }
        ]
    },
    "merge_rois": {
        "args": [
            {
                "name": "in_files"
            },
            {
                "name": "in_idxs"
            },
            {
                "name": "in_ref"
            },
            {
                "name": ""
            }
        ]
    },
    "method = traits.Str": {
        "args": [
            {
                "default": "'Joint'",
                "name": "ault"
            },
            {
                "default": "'-m %s'",
                "name": "argstr"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "metric = traits.Enum": {
        "args": [
            {
                "name": "'euclidean'"
            },
            {
                "name": "'sqeuclidean'"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "metricSamplingStrategy = traits.Enum": {
        "args": [
            {
                "name": "\"Random\""
            },
            {
                "default": "\"It ines the method that registration filter uses to sample the input fixed image. Only Random is supported for now.\"",
                "name": "desc"
            },
            {
                "default": "\"--metricSamplingStrategy %s\"",
                "name": "argstr"
            }
        ]
    },
    "minimum_RGB_output = traits.Int": {
        "args": [
            {
                "name": "0"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "minimum_filter = traits.Bool": {
        "args": [
            {
                "default": "\"%s\"",
                "name": "argstr"
            },
            {
                "default": "6",
                "name": "position"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "default": "False",
                "name": "ault_value"
            },
            {
                "name": ""
            }
        ]
    },
    "mkdir_p": {
        "args": [
            {
                "name": "path"
            }
        ]
    },
    "mlab_tempfile": {
        "args": [
            {
                "default": "None",
                "name": "dir"
            }
        ]
    },
    "modelConfigurationFilename = File": {
        "args": [
            {
                "default": "\"XML File ining BRAINSCut parameters\"",
                "name": "desc"
            },
            {
                "default": "True",
                "name": "exists"
            },
            {
                "default": "\"--modelConfigurationFilename %s\"",
                "name": "argstr"
            }
        ]
    },
    "modify_paths": {
        "args": [
            {
                "name": "object"
            },
            {
                "default": "True",
                "name": "relative"
            },
            {
                "default": "None",
                "name": "basedir"
            }
        ]
    },
    "must_generate_value": {
        "args": [
            {
                "name": "name"
            },
            {
                "name": "type"
            },
            {
                "name": "ignored_template_inputs"
            },
            {
                "name": "spec_info"
            },
            {
                "name": "spec"
            },
            {
                "name": "ignore_template_numbers"
            }
        ]
    },
    "n_b0 = traits.Int": {
        "args": [
            {
                "default": "'-b0 %s'",
                "name": "argstr"
            },
            {
                "default": "\"\"\"number of b0 scans. by ault the program gets this information",
                "name": "desc"
            }
        ]
    },
    "n_overlap = traits.Range": {
        "args": [
            {
                "default": "0",
                "name": "low"
            },
            {
                "default": "0",
                "name": "value"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "n_proc = traits.Int": {
        "args": [
            {
                "name": "0"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "default": "'number of processes'",
                "name": "desc"
            }
        ]
    },
    "name : name of workflow ": {
        "args": [
            {
                "name": "ault: 'registration'"
            }
        ]
    },
    "natural_keys": {
        "args": [
            {
                "name": "text"
            }
        ]
    },
    "nested_interpolation_type.append": {
        "args": [
            {
                "name": "'Linear') #Linear is the ault."
            }
        ]
    },
    "netConfiguration = File": {
        "args": [
            {
                "default": "\"XML File ining BRAINSCut parameters. OLD NAME. PLEASE USE modelConfigurationFilename instead.\"",
                "name": "desc"
            },
            {
                "default": "True",
                "name": "exists"
            },
            {
                "default": "\"--netConfiguration %s\"",
                "name": "argstr"
            }
        ]
    },
    "next": {
        "args": []
    },
    "nii_output = traits.Bool": {
        "args": [
            {
                "name": "True"
            },
            {
                "default": "'-n'",
                "name": "argstr"
            },
            {
                "default": "True",
                "name": "useault"
            }
        ]
    },
    "nipype_hardlink_wrapper": {
        "args": [
            {
                "name": "raw_src"
            },
            {
                "name": "raw_dst"
            }
        ]
    },
    "nlmeans_pipeline": {
        "args": [
            {
                "default": "'Denoise'",
                "name": "name"
            },
            {
                "name": ""
            }
        ]
    },
    "nlmeans_proxy": {
        "args": [
            {
                "name": "in_file"
            },
            {
                "name": "settings"
            },
            {
                "name": ""
            }
        ]
    },
    "no_flatten = traits.Bool": {
        "args": [
            {
                "name": "False"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "default": "'append to outlist instead of extending in vstack mode'",
                "name": "desc"
            }
        ]
    },
    "no_fsl": {
        "args": [
            {
                "name": ""
            }
        ]
    },
    "no_fsl_course_data": {
        "args": [
            {
                "name": ""
            }
        ]
    },
    "no_spm": {
        "args": [
            {
                "name": ""
            }
        ]
    },
    "nocleanup = traits.Bool": {
        "args": [
            {
                "name": "True"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "default": "'no cleanup'",
                "name": "desc"
            },
            {
                "name": ""
            }
        ]
    },
    "node_completed_status": {
        "args": [
            {
                "name": "checknode"
            }
        ]
    },
    "node_network = File": {
        "args": [
            {
                "default": "'Output gpickled network with the nodes ined.'",
                "name": "desc"
            }
        ]
    },
    "nodename = noullname.replace": {
        "args": [
            {
                "name": "'.'"
            },
            {
                "name": "'_'"
            }
        ]
    },
    "noedit = traits.Bool": {
        "args": [
            {
                "name": "True"
            },
            {
                "default": "\"--noedit\"",
                "name": "argstr"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "normalize_tpms": {
        "args": [
            {
                "name": "in_files"
            },
            {
                "default": "None",
                "name": "in_mask"
            },
            {
                "default": "[]",
                "name": "out_files"
            }
        ]
    },
    "nosplash = traits.Bool": {
        "args": [
            {
                "name": "True"
            },
            {
                "default": "'-nosplash'",
                "name": "argstr"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "not isined": {
        "args": [
            {
                "name": "self.inputs.show_negative_stats"
            }
        ]
    },
    "noullname = '.'.join": {
        "args": [
            {
                "name": "hierarchy + [node.fullname]"
            }
        ]
    },
    "ntwks_to_matrices": {
        "args": [
            {
                "name": "in_files"
            },
            {
                "name": "edge_key"
            }
        ]
    },
    "numThreads = traits.Int": {
        "args": [
            {
                "default": "\"Number of threads used during computation. Set to the number of cores on your workstation for optimal speed. If left unined the number of cores detected will be used. \"",
                "name": "desc"
            },
            {
                "default": "\"--numThreads %d\"",
                "name": "argstr"
            }
        ]
    },
    "num_dirs = traits.Int": {
        "args": [
            {
                "name": "32"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "num_subnodes": {
        "args": []
    },
    "num_threads = traits.Int": {
        "args": [
            {
                "name": "1"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "default": "True",
                "name": "nohash"
            },
            {
                "name": ""
            }
        ]
    },
    "numberOfBins = traits.Int": {
        "args": [
            {
                "default": "\"This is an advanced parameter. The number of bins in the histogram used to model the probability mass function of the two intensity distributions. Small numbers of bins may result in a more conservative threshold. The ault should suffice for most applications. Experimentation is the only way to see the effect of varying this parameter.\"",
                "name": "desc"
            },
            {
                "default": "\"--numberOfBins %d\"",
                "name": "argstr"
            }
        ]
    },
    "number_of_permutations = traits.Int": {
        "args": [
            {
                "name": "1000"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "default": "'Number of permutations to perform'",
                "name": "desc"
            }
        ]
    },
    "opd = traits.Bool": {
        "args": [
            {
                "name": "True"
            },
            {
                "default": "'outputs path distributions'",
                "name": "desc"
            },
            {
                "default": "'--opd'",
                "name": "argstr"
            },
            {
                "default": "True",
                "name": "useault"
            }
        ]
    },
    "operation = traits.Enum": {
        "args": [
            {
                "name": "'sum'"
            },
            {
                "name": "'sub'"
            },
            {
                "name": "'mul'"
            },
            {
                "name": "'div'"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "optional_attribute": {
        "args": [
            {
                "name": "attributes"
            },
            {
                "name": "attribute_id"
            },
            {
                "name": "attribute_types"
            }
        ]
    },
    "order = traits.Int": {
        "args": [
            {
                "default": "'-order %s'",
                "name": "argstr"
            },
            {
                "default": "\"\"\"maximum order of spherical harmonics. must be even number. ault",
                "name": "desc"
            }
        ]
    },
    "ormation = File": {
        "args": [
            {
                "name": ""
            }
        ]
    },
    "ormationImage = File": {
        "args": [
            {
                "default": "\"Required: Displacement field image\"",
                "name": "desc"
            },
            {
                "default": "True",
                "name": "exists"
            },
            {
                "default": "\"--ormationImage %s\"",
                "name": "argstr"
            }
        ]
    },
    "ormationVolume = File": {
        "args": [
            {
                "default": "\"Displacement Field to be used to warp the image\"",
                "name": "desc"
            },
            {
                "default": "True",
                "name": "exists"
            },
            {
                "default": "\"--ormationVolume %s\"",
                "name": "argstr"
            }
        ]
    },
    "ormation_field = File": {
        "args": [
            {
                "name": ""
            }
        ]
    },
    "ormation_field = traits.Tuple": {
        "args": [
            {
                "name": ""
            }
        ]
    },
    "ormation_file = File": {
        "args": [
            {
                "default": "'subj.'",
                "name": "field"
            },
            {
                "default": "True",
                "name": "mandatory"
            },
            {
                "name": ""
            }
        ]
    },
    "ormation_output = File": {
        "args": [
            {
                "default": "\"Warped tensor field based on a ormation field.  This option requires the --forward",
                "name": "desc"
            },
            {
                "name": "-F transformation to be specified.\""
            },
            {
                "default": "True",
                "name": "exists"
            }
        ]
    },
    "orth": {
        "args": [
            {
                "name": "x_in"
            },
            {
                "name": "y_in"
            }
        ]
    },
    "otherwise ": {
        "args": [
            {
                "name": "ault) return scalar giving total length."
            }
        ]
    },
    "out = self._clean_container": {
        "args": [
            {
                "name": "out"
            },
            {
                "default": "True",
                "name": "skipunined"
            }
        ]
    },
    "out.append": {
        "args": [
            {
                "name": "uninedval"
            }
        ]
    },
    "out[key] = self._clean_container": {
        "args": [
            {
                "name": "val"
            },
            {
                "name": "uninedval"
            }
        ]
    },
    "out_bval = File": {
        "args": [
            {
                "name": "'bval.sim'"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "default": "'simulated b values'",
                "name": "desc"
            }
        ]
    },
    "out_bvec = File": {
        "args": [
            {
                "name": "'bvec.sim'"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "default": "'simulated b vectors'",
                "name": "desc"
            }
        ]
    },
    "out_ext = traits.Str": {
        "args": [
            {
                "name": "'.nii.gz'"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "out_file = File": {
        "args": [
            {
                "name": "'extra_heading.csv'"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "out_filename = File": {
        "args": [
            {
                "name": "'nodenetwork.pck'"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "default": "'Output gpickled network with the nodes ined.'",
                "name": "desc"
            }
        ]
    },
    "out_k_core = File": {
        "args": [
            {
                "name": "'k_core'"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "default": "'Computed k-core network stored as a NetworkX pickle.'",
                "name": "desc"
            }
        ]
    },
    "out_k_crust = File": {
        "args": [
            {
                "name": "'k_crust'"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "default": "'Computed k-crust network stored as a NetworkX pickle.'",
                "name": "desc"
            }
        ]
    },
    "out_k_shell = File": {
        "args": [
            {
                "name": "'k_shell'"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "default": "'Computed k-shell network stored as a NetworkX pickle.'",
                "name": "desc"
            }
        ]
    },
    "out_mask = File": {
        "args": [
            {
                "name": "'sim_msk.nii.gz'"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "out_mask.append": {
        "args": [
            {
                "name": "roiname"
            }
        ]
    },
    "out_matrix_mat_file = File": {
        "args": [
            {
                "name": "'cmatrix.mat'"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "default": "'Matlab matrix describing the connectivity'",
                "name": "desc"
            }
        ]
    },
    "out_pickled_extra_measures = File": {
        "args": [
            {
                "name": "'extra_measures'"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "default": "'Network measures for group 1 that return dictionaries stored as a Pickle.'",
                "name": "desc"
            }
        ]
    },
    "out_postfix = File": {
        "args": [
            {
                "name": "\"_wimt\""
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "default": "False",
                "name": "hash_files"
            },
            {
                "name": ""
            }
        ]
    },
    "out_postfix = traits.Str": {
        "args": [
            {
                "name": "\"_trans\""
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "out_prefix = traits.Str": {
        "args": [
            {
                "name": "'antsCT_'"
            },
            {
                "default": "'-o %s'",
                "name": "argstr"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "out_prefix = traits.String": {
        "args": [
            {
                "name": "'s'"
            },
            {
                "default": "'prefix'",
                "name": "field"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "out_type = traits.Enum": {
        "args": [
            {
                "name": "'float'"
            },
            {
                "name": "'int'"
            },
            {
                "default": "2",
                "name": "position"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "out_warp = File": {
        "args": [
            {
                "name": "'warp_maths.vtk'"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "output = File": {
        "args": [
            {
                "name": "\"dyads\""
            },
            {
                "default": "3",
                "name": "position"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "default": "\"%s\"",
                "name": "argstr"
            },
            {
                "default": "False",
                "name": "hash_files"
            }
        ]
    },
    "outputCheckerboardVolume = File": {
        "args": [
            {
                "default": "\"Genete a checkerboard image volume between the fixedVolume and the ormed movingVolume.\"",
                "name": "desc"
            },
            {
                "default": "True",
                "name": "exists"
            }
        ]
    },
    "outputDeformationFieldVolume = File": {
        "args": [
            {
                "default": "\"Output ormation field\"",
                "name": "desc"
            },
            {
                "default": "True",
                "name": "exists"
            }
        ]
    },
    "outputVolume = File": {
        "args": [
            {
                "default": "\"Required: Output ormation field\"",
                "name": "desc"
            },
            {
                "default": "True",
                "name": "exists"
            }
        ]
    },
    "output_average_image = File": {
        "args": [
            {
                "name": "\"average.nii\""
            },
            {
                "default": "'%s'",
                "name": "argstr"
            },
            {
                "default": "1",
                "name": "position"
            },
            {
                "default": "'the name of the resulting image.'",
                "name": "desc"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "default": "False",
                "name": "hash_files"
            }
        ]
    },
    "output_dir": {
        "args": []
    },
    "output_file = File": {
        "args": [
            {
                "name": "\"merged_tracks.trk\""
            },
            {
                "default": "\"target file for merged tracks\"",
                "name": "desc"
            },
            {
                "default": "-1",
                "name": "position"
            },
            {
                "default": "\"%s\"",
                "name": "argstr"
            },
            {
                "default": "True",
                "name": "useault"
            }
        ]
    },
    "output_image=traits.Str": {
        "args": [
            {
                "name": "'rgb.nii.gz'"
            },
            {
                "default": "'%s'",
                "name": "argstr"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "output_path = Directory": {
        "args": [
            {
                "name": "'./'"
            },
            {
                "default": "True",
                "name": "exists"
            },
            {
                "default": "True",
                "name": "mandatory"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "output_transform_prefix = traits.Str": {
        "args": [
            {
                "name": "'out'"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "output_type": {
        "args": [
            {
                "name": "cls"
            }
        ]
    },
    "output_type = traits.Enum": {
        "args": [
            {
                "name": "'nii'"
            },
            {
                "name": "'analyze'"
            },
            {
                "name": "'ni1'"
            },
            {
                "name": "'nii.gz'"
            },
            {
                "default": "'-ot %s'",
                "name": "argstr"
            },
            {
                "default": "'output file type'",
                "name": "desc"
            },
            {
                "default": "True",
                "name": "useault"
            }
        ]
    },
    "output_type_to_ext": {
        "args": [
            {
                "name": "cls"
            },
            {
                "name": "output_type"
            }
        ]
    },
    "output_units = traits.Enum": {
        "args": [
            {
                "name": "'secs'"
            },
            {
                "name": "'scans'"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "outputs": {
        "args": []
    },
    "outputs.trait_set": {
        "args": [
            {
                "default": "False",
                "name": "trait_change_notify"
            },
            {
                "name": "**unined_traits"
            }
        ]
    },
    "outputs['disp_field'] = op.join": {
        "args": [
            {
                "name": "out_dir"
            },
            {
                "name": "'ormationField.nii.gz'"
            }
        ]
    },
    "outputs['forward_ormation_field'].append": {
        "args": [
            {
                "name": ""
            }
        ]
    },
    "outputs['inverse_ormation_field'].append": {
        "args": [
            {
                "name": ""
            }
        ]
    },
    "outputs['ormation_field'] = list_to_filename": {
        "args": [
            {
                "name": "outputs['ormation_field']"
            }
        ]
    },
    "outputtype": {
        "args": [
            {
                "name": "cls"
            }
        ]
    },
    "outputtype_to_ext": {
        "args": [
            {
                "name": "cls"
            },
            {
                "name": "outputtype"
            }
        ]
    },
    "overwrite = traits.Bool": {
        "args": [
            {
                "name": "True"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "default": "'--overwrite'",
                "name": "argstr"
            },
            {
                "name": ""
            }
        ]
    },
    "package_check": {
        "args": [
            {
                "name": "pkg_name"
            },
            {
                "default": "None",
                "name": "version"
            },
            {
                "default": "None",
                "name": "app"
            },
            {
                "default": "LooseVersion",
                "name": "checker"
            },
            {
                "name": ""
            }
        ]
    },
    "parallelization = traits.Enum": {
        "args": [
            {
                "name": "0"
            },
            {
                "name": "1"
            },
            {
                "name": "2"
            },
            {
                "default": "'-c %d'",
                "name": "argstr"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "parameterization = traits.Bool": {
        "args": [
            {
                "name": "True"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "parametersMRMLNodeName = traits.Str": {
        "args": [
            {
                "default": "\"The name of the EMSegment parameters node within the active MRML scene.  Leave blank for ault.\"",
                "name": "desc"
            },
            {
                "default": "\"--parametersMRMLNodeName %s\"",
                "name": "argstr"
            }
        ]
    },
    "parcellation_name = traits.Enum": {
        "args": [
            {
                "name": "'scale500'"
            },
            {
                "name": "['scale33'"
            },
            {
                "name": "'scale60'"
            },
            {
                "name": "'scale125'"
            },
            {
                "name": "'scale250'"
            },
            {
                "name": "'scale500']"
            },
            {
                "default": "True",
                "name": "useault"
            }
        ]
    },
    "parse_datatype": {
        "args": [
            {
                "name": "value"
            },
            {
                "name": "datatype"
            }
        ]
    },
    "parse_extra_attributes": {
        "args": [
            {
                "name": "extra_attributes"
            }
        ]
    },
    "parse_params": {
        "args": [
            {
                "name": "params"
            }
        ]
    },
    "parse_values": {
        "args": [
            {
                "name": "values"
            }
        ]
    },
    "parse_xsd_dateTime": {
        "args": [
            {
                "name": "s"
            }
        ]
    },
    "parse_xsd_types": {
        "args": [
            {
                "name": "value"
            },
            {
                "name": "datatype"
            }
        ]
    },
    "parser.add_argument": {
        "args": [
            {
                "name": "\"-v\""
            },
            {
                "name": "\"--verbose\""
            },
            {
                "default": "'store_true'",
                "name": "action"
            },
            {
                "default": "False",
                "name": "ault"
            },
            {
                "default": "\"Enable verbose output.\"",
                "name": "help"
            }
        ]
    },
    "pdf = traits.Enum": {
        "args": [
            {
                "name": "'bingham'"
            },
            {
                "name": "'watson'"
            },
            {
                "name": "'acg'"
            },
            {
                "default": "'-pdf %s'",
                "name": "argstr"
            },
            {
                "default": "'Specifies the model for PICo parameters. The ault is \"bingham.'",
                "name": "desc"
            }
        ]
    },
    "pickfirst": {
        "args": [
            {
                "name": "files"
            }
        ]
    },
    "pickmiddle": {
        "args": [
            {
                "name": "files"
            }
        ]
    },
    "pickvol": {
        "args": [
            {
                "name": "filenames"
            },
            {
                "name": "fileidx"
            },
            {
                "name": "which"
            }
        ]
    },
    "pkg_commit_hash": {
        "args": [
            {
                "name": "pkg_path"
            }
        ]
    },
    "plot_design_matrix = traits.Bool": {
        "args": [
            {
                "name": "False"
            },
            {
                "default": "True",
                "name": "useault"
            }
        ]
    },
    "points_file = File": {
        "args": [
            {
                "default": "True",
                "name": "exists"
            },
            {
                "default": "'- %s'",
                "name": "argstr"
            },
            {
                "default": "True",
                "name": "mandatory"
            },
            {
                "name": ""
            }
        ]
    },
    "points_per_track": {
        "args": [
            {
                "name": "offset"
            }
        ]
    },
    "points_space = traits.Enum": {
        "args": [
            {
                "name": "'rasmm'"
            },
            {
                "name": "'voxel'"
            },
            {
                "name": "None"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "prefixes['ault'] = self._namespaces._ault.get_uri": {
        "args": [
            {
                "name": ""
            }
        ]
    },
    "prescript = traits.List": {
        "args": [
            {
                "name": "[\"ver"
            },
            {
                "name": "\""
            },
            {
                "name": "\"try"
            },
            {
                "name": "\"]"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "primary_source": {
        "args": [
            {
                "name": "generatedEntity"
            },
            {
                "name": "usedEntity"
            },
            {
                "default": "None",
                "name": "activity"
            },
            {
                "default": "None",
                "name": "generation"
            },
            {
                "default": "None",
                "name": "usage"
            },
            {
                "default": "None",
                "name": "time"
            },
            {
                "default": "None",
                "name": "identifier"
            },
            {
                "default": "None",
                "name": "other_attributes"
            }
        ]
    },
    "print_": {
        "args": [
            {
                "name": "*args"
            },
            {
                "name": "**kwargs"
            }
        ]
    },
    "print_dictionary": {
        "args": []
    },
    "processing the entire workflow ": {
        "args": [
            {
                "name": "ault: False"
            }
        ]
    },
    "protocol_in_filename = traits.Bool": {
        "args": [
            {
                "name": "True"
            },
            {
                "default": "'-p'",
                "name": "argstr"
            },
            {
                "default": "True",
                "name": "useault"
            }
        ]
    },
    "prov_encode": {
        "args": [
            {
                "name": "graph"
            },
            {
                "name": "value"
            },
            {
                "default": "True",
                "name": "create_container"
            }
        ]
    },
    "provn_representation": {
        "args": []
    },
    "pullnodeIDs": {
        "args": [
            {
                "name": "in_network"
            },
            {
                "default": "'dn_name'",
                "name": "name_key"
            }
        ]
    },
    "push_file": {
        "args": [
            {
                "name": "xnat"
            },
            {
                "name": "file_name"
            },
            {
                "name": "out_key"
            },
            {
                "name": "uri_template_args"
            }
        ]
    },
    "push_provenance": {
        "args": [
            {
                "name": ""
            }
        ]
    },
    "qname": {
        "args": [
            {
                "name": "identifier"
            }
        ]
    },
    "qsub_sanitize_job_name": {
        "args": [
            {
                "name": "testjobname"
            }
        ]
    },
    "quotation": {
        "args": [
            {
                "name": "generatedEntity"
            },
            {
                "name": "usedEntity"
            },
            {
                "default": "None",
                "name": "activity"
            },
            {
                "default": "None",
                "name": "generation"
            },
            {
                "default": "None",
                "name": "usage"
            },
            {
                "default": "None",
                "name": "time"
            },
            {
                "default": "None",
                "name": "identifier"
            },
            {
                "default": "None",
                "name": "other_attributes"
            }
        ]
    },
    "quote_id": {
        "args": [
            {
                "name": "string"
            }
        ]
    },
    "rads2radsec": {
        "args": [
            {
                "name": "in_file"
            },
            {
                "name": "delta_te"
            },
            {
                "default": "None",
                "name": "out_file"
            }
        ]
    },
    "raise Exception": {
        "args": [
            {
                "name": "\"Unined module.\""
            }
        ]
    },
    "raise_exception": {
        "args": [
            {
                "name": "runtime"
            }
        ]
    },
    "raise_on_empty = traits.Bool": {
        "args": [
            {
                "name": "True"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "randomly rotating a unit icosahedron repeatedly ": {
        "args": [
            {
                "name": "the ault is 1000"
            }
        ]
    },
    "rdf": {
        "args": [
            {
                "default": "None",
                "name": "graph"
            }
        ]
    },
    "rdf_representation": {
        "args": []
    },
    "read": {
        "args": [
            {
                "default": "0",
                "name": "drain"
            }
        ]
    },
    "read_log": {
        "args": [
            {
                "name": "filename"
            },
            {
                "default": "None",
                "name": "run_dict"
            }
        ]
    },
    "read_mrtrix_header": {
        "args": [
            {
                "name": "in_file"
            }
        ]
    },
    "read_mrtrix_streamlines": {
        "args": [
            {
                "name": "in_file"
            },
            {
                "name": "header"
            },
            {
                "default": "True",
                "name": "as_generator"
            }
        ]
    },
    "read_mrtrix_tracks": {
        "args": [
            {
                "name": "in_file"
            },
            {
                "default": "True",
                "name": "as_generator"
            }
        ]
    },
    "read_unknown_ntwk": {
        "args": [
            {
                "name": "ntwk"
            }
        ]
    },
    "recompose_dwi": {
        "args": [
            {
                "name": "in_dwi"
            },
            {
                "name": "in_bval"
            },
            {
                "name": "in_corrected"
            },
            {
                "default": "None",
                "name": "out_file"
            }
        ]
    },
    "recompose_xfm": {
        "args": [
            {
                "name": "in_bval"
            },
            {
                "name": "in_xfms"
            }
        ]
    },
    "referenceVolume = File": {
        "args": [
            {
                "default": "\"Reference image used only to ine the output space. If not specified",
                "name": "desc"
            },
            {
                "name": "the warping is done in the same space as the image to warp.\""
            },
            {
                "default": "True",
                "name": "exists"
            },
            {
                "default": "\"--referenceVolume %s\"",
                "name": "argstr"
            }
        ]
    },
    "reg_file = File": {
        "args": [
            {
                "name": "'register.dat'"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "region_list_from_volume": {
        "args": [
            {
                "name": "in_file"
            }
        ]
    },
    "registrationAffineType = traits.Int": {
        "args": [
            {
                "default": "\"specify the accuracy of the affine registration. -2: Do not overwrite ault",
                "name": "desc"
            },
            {
                "name": "-1: Test"
            },
            {
                "name": "0: Disable"
            },
            {
                "name": "1: Fast"
            },
            {
                "name": "2: Accurate\""
            },
            {
                "default": "\"--registrationAffineType %d\"",
                "name": "argstr"
            }
        ]
    },
    "registrationDeformableType = traits.Int": {
        "args": [
            {
                "default": "\"specify the accuracy of the ormable registration. -2: Do not overwrite ault",
                "name": "desc"
            },
            {
                "name": "-1: Test"
            },
            {
                "name": "0: Disable"
            },
            {
                "name": "1: Fast"
            },
            {
                "name": "2: Accurate\""
            },
            {
                "default": "\"--registrationDeformableType %d\"",
                "name": "argstr"
            }
        ]
    },
    "regularization_ormation_field_sigma = traits.Float": {
        "args": [
            {
                "name": ""
            }
        ]
    },
    "release": {
        "args": []
    },
    "relpath": {
        "args": [
            {
                "name": "path"
            },
            {
                "default": "None",
                "name": "start"
            }
        ]
    },
    "removeIntensityOutliers = traits.Float": {
        "args": [
            {
                "default": "\"The half percentage to decide outliers of image intensities. The ault value is zero",
                "name": "desc"
            },
            {
                "name": "which means no outlier removal. If the value of 0.005 is given"
            },
            {
                "name": "the moduel will throw away 0.005 % of both tails"
            },
            {
                "name": "so 0.01% of intensities in total would be ignored in its statistic calculation. \""
            },
            {
                "default": "\"--removeIntensityOutliers %f\"",
                "name": "argstr"
            }
        ]
    },
    "remove_all_edges": {
        "args": [
            {
                "name": "ntwk"
            }
        ]
    },
    "remove_bias": {
        "args": [
            {
                "default": "'bias_correct'",
                "name": "name"
            }
        ]
    },
    "remove_comp": {
        "args": [
            {
                "name": "in_file"
            },
            {
                "name": "in_bval"
            },
            {
                "default": "0",
                "name": "volid"
            },
            {
                "default": "None",
                "name": "out_file"
            }
        ]
    },
    "remove_dest_dir = traits.Bool": {
        "args": [
            {
                "name": "False"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "remove_identical_paths": {
        "args": [
            {
                "name": "in_files"
            }
        ]
    },
    "remove_move": {
        "args": [
            {
                "name": "name"
            }
        ]
    },
    "remove_nodes": {
        "args": [
            {
                "name": "nodes"
            }
        ]
    },
    "reorient_and_crop = traits.Bool": {
        "args": [
            {
                "name": "False"
            },
            {
                "default": "'-x'",
                "name": "argstr"
            },
            {
                "default": "True",
                "name": "useault"
            }
        ]
    },
    "reorient_bvecs": {
        "args": [
            {
                "name": "in_dwi"
            },
            {
                "name": "old_dwi"
            },
            {
                "name": "in_bvec"
            }
        ]
    },
    "replace_opts": {
        "args": [
            {
                "name": "rep_doc"
            },
            {
                "name": "opts"
            }
        ]
    },
    "replaceext": {
        "args": [
            {
                "name": "in_list"
            },
            {
                "name": "ext"
            }
        ]
    },
    "report_crash": {
        "args": [
            {
                "name": "node"
            },
            {
                "default": "None",
                "name": "traceback"
            },
            {
                "default": "None",
                "name": "hostname"
            }
        ]
    },
    "report_nodes_not_run": {
        "args": [
            {
                "name": "notrun"
            }
        ]
    },
    "required_attribute": {
        "args": [
            {
                "name": "attributes"
            },
            {
                "name": "attribute_id"
            },
            {
                "name": "attribute_types"
            }
        ]
    },
    "reraise": {
        "args": [
            {
                "name": "tp"
            },
            {
                "name": "value"
            },
            {
                "default": "None",
                "name": "tb"
            }
        ]
    },
    "resample_proxy": {
        "args": [
            {
                "name": "in_file"
            },
            {
                "default": "3",
                "name": "order"
            },
            {
                "default": "None",
                "name": "new_zooms"
            },
            {
                "default": "None",
                "name": "out_file"
            }
        ]
    },
    "result": {
        "args": []
    },
    "results_dir = Directory": {
        "args": [
            {
                "name": "'results'"
            },
            {
                "default": "'-rn %s'",
                "name": "argstr"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "return json.JSONEncoder.ault": {
        "args": [
            {
                "name": "o"
            }
        ]
    },
    "return not isinstance": {
        "args": [
            {
                "name": "object"
            },
            {
                "name": "_Unined"
            }
        ]
    },
    "return self._namespaces.get_ault_namespace": {
        "args": [
            {
                "name": ""
            }
        ]
    },
    "returned in the desired ": {
        "args": [
            {
                "name": "by ault"
            },
            {
                "name": "stereolithic .stl) format."
            }
        ]
    },
    "reverse_opt_map": {
        "args": [
            {
                "name": "opt_map"
            }
        ]
    },
    "revision": {
        "args": [
            {
                "name": "generatedEntity"
            },
            {
                "name": "usedEntity"
            },
            {
                "default": "None",
                "name": "activity"
            },
            {
                "default": "None",
                "name": "generation"
            },
            {
                "default": "None",
                "name": "usage"
            },
            {
                "default": "None",
                "name": "time"
            },
            {
                "default": "None",
                "name": "identifier"
            },
            {
                "default": "None",
                "name": "other_attributes"
            }
        ]
    },
    "rm_all_but": {
        "args": [
            {
                "name": "base_dir"
            },
            {
                "name": "dirs_to_keep"
            },
            {
                "default": "False",
                "name": "warn"
            }
        ]
    },
    "roiname = op.abspath": {
        "args": [
            {
                "name": "'onesmask.nii.gz'"
            }
        ]
    },
    "rotate_bvecs": {
        "args": [
            {
                "name": "in_bvec"
            },
            {
                "name": "in_matrix"
            }
        ]
    },
    "run": {
        "args": [
            {
                "name": "graph"
            },
            {
                "name": "config"
            },
            {
                "default": "False",
                "name": "updatehash"
            }
        ]
    },
    "run_command": {
        "args": [
            {
                "name": "runtime"
            },
            {
                "default": "None",
                "name": "output"
            },
            {
                "default": "0.01",
                "name": "timeout"
            },
            {
                "default": "False",
                "name": "redirect_x"
            }
        ]
    },
    "run_instance": {
        "args": [
            {
                "name": "interface"
            },
            {
                "name": "options"
            }
        ]
    },
    "run_node": {
        "args": [
            {
                "name": "node"
            },
            {
                "name": "updatehash"
            }
        ]
    },
    "safe_encode": {
        "args": [
            {
                "name": "x"
            },
            {
                "default": "True",
                "name": "as_literal"
            }
        ]
    },
    "sample_every = traits.Range": {
        "args": [
            {
                "default": "0",
                "name": "low"
            },
            {
                "default": "1",
                "name": "ault"
            },
            {
                "default": "'-s %d'",
                "name": "argstr"
            },
            {
                "name": ""
            }
        ]
    },
    "sanitize_path_comp": {
        "args": [
            {
                "name": "path_comp"
            }
        ]
    },
    "save": {
        "args": [
            {
                "default": "None",
                "name": "filename"
            }
        ]
    },
    "save_bias = traits.Bool": {
        "args": [
            {
                "name": "False"
            },
            {
                "default": "True",
                "name": "mandatory"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "save_data": {
        "args": [
            {
                "name": "key"
            },
            {
                "name": "value"
            }
        ]
    },
    "save_fibers": {
        "args": [
            {
                "name": "oldhdr"
            },
            {
                "name": "oldfib"
            },
            {
                "name": "fname"
            },
            {
                "name": "indices"
            }
        ]
    },
    "save_json": {
        "args": [
            {
                "name": "filename"
            },
            {
                "name": "data"
            }
        ]
    },
    "save_residuals = traits.Bool": {
        "args": [
            {
                "name": "False"
            },
            {
                "default": "True",
                "name": "useault"
            }
        ]
    },
    "savepkl": {
        "args": [
            {
                "name": "filename"
            },
            {
                "name": "record"
            }
        ]
    },
    "scale_timings": {
        "args": [
            {
                "name": "timelist"
            },
            {
                "name": "input_units"
            },
            {
                "name": "output_units"
            },
            {
                "name": "time_repetition"
            }
        ]
    },
    "scans_for_fname": {
        "args": [
            {
                "name": "fname"
            }
        ]
    },
    "scans_for_fnames": {
        "args": [
            {
                "name": "fnames"
            },
            {
                "default": "False",
                "name": "keep4d"
            },
            {
                "default": "False",
                "name": "separate_sessions"
            }
        ]
    },
    "script_file = File": {
        "args": [
            {
                "name": "'pyscript.m'"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "sdc_fmb": {
        "args": [
            {
                "default": "'fmb_correction'",
                "name": "name"
            },
            {
                "default": "'Linear'",
                "name": "interp"
            },
            {
                "name": ""
            }
        ]
    },
    "sdc_peb": {
        "args": [
            {
                "default": "'peb_correction'",
                "name": "name"
            },
            {
                "name": ""
            }
        ]
    },
    "seed_ref = File": {
        "args": [
            {
                "default": "True",
                "name": "exists"
            },
            {
                "default": "'reference vol to ine seed space in ' +",
                "name": "desc"
            }
        ]
    },
    "select_aparc": {
        "args": [
            {
                "name": "list_of_files"
            }
        ]
    },
    "select_aparc_annot": {
        "args": [
            {
                "name": "list_of_files"
            }
        ]
    },
    "select_volume": {
        "args": [
            {
                "name": "filename"
            },
            {
                "name": "which"
            }
        ]
    },
    "self._ault = Namespace": {
        "args": [
            {
                "name": "''"
            },
            {
                "name": "uri"
            }
        ]
    },
    "self._ault_namespaces.update": {
        "args": [
            {
                "name": "ault_namespaces"
            }
        ]
    },
    "self._find_mlab_cmd_aults": {
        "args": [
            {
                "name": ""
            }
        ]
    },
    "self._namespaces.set_ault_namespace": {
        "args": [
            {
                "name": "uri"
            }
        ]
    },
    "self.inputs.trait_set": {
        "args": [
            {
                "default": "False",
                "name": "trait_change_notify"
            },
            {
                "name": "**unined_traits"
            }
        ]
    },
    "self.set_ault_namespace": {
        "args": [
            {
                "name": "uri"
            }
        ]
    },
    "self.trait_set": {
        "args": [
            {
                "default": "False",
                "name": "trait_change_notify"
            },
            {
                "name": "**unined_traits"
            }
        ]
    },
    "self.update": {
        "args": [
            {
                "name": "self._ault_namespaces"
            }
        ]
    },
    "sensitivityThreshold = traits.Float": {
        "args": [
            {
                "default": "\"This parameter should be between 0 and 1",
                "name": "desc"
            },
            {
                "name": "and ines how sensitive the metric should be to the intensity changes.\""
            },
            {
                "default": "\"--sensitivityThreshold %f\"",
                "name": "argstr"
            }
        ]
    },
    "set": {
        "args": [
            {
                "name": "section"
            },
            {
                "name": "option"
            },
            {
                "name": "value"
            }
        ]
    },
    "set_ault_config": {
        "args": []
    },
    "set_ault_matlab_cmd": {
        "args": [
            {
                "name": "cls"
            },
            {
                "name": "matlab_cmd"
            }
        ]
    },
    "set_ault_mfile": {
        "args": [
            {
                "name": "cls"
            },
            {
                "name": "mfile"
            }
        ]
    },
    "set_ault_namespace": {
        "args": [
            {
                "name": "uri"
            }
        ]
    },
    "set_ault_num_threads": {
        "args": [
            {
                "name": "cls"
            },
            {
                "name": "num_threads"
            }
        ]
    },
    "set_ault_output_type": {
        "args": [
            {
                "name": "cls"
            },
            {
                "name": "output_type"
            }
        ]
    },
    "set_ault_paths": {
        "args": [
            {
                "name": "cls"
            },
            {
                "name": "paths"
            }
        ]
    },
    "set_ault_subjects_dir": {
        "args": [
            {
                "name": "cls"
            },
            {
                "name": "subjects_dir"
            }
        ]
    },
    "set_ault_terminal_output": {
        "args": [
            {
                "name": "cls"
            },
            {
                "name": "output_type"
            }
        ]
    },
    "set_input": {
        "args": [
            {
                "name": "parameter"
            },
            {
                "name": "val"
            }
        ]
    },
    "set_log_dir": {
        "args": [
            {
                "name": "log_dir"
            }
        ]
    },
    "set_mlab_paths": {
        "args": [
            {
                "name": "cls"
            },
            {
                "default": "None",
                "name": "matlab_cmd"
            },
            {
                "default": "None",
                "name": "paths"
            },
            {
                "default": "None",
                "name": "use_mcr"
            }
        ]
    },
    "set_state": {
        "args": [
            {
                "name": "new_state"
            }
        ]
    },
    "set_time": {
        "args": [
            {
                "default": "None",
                "name": "startTime"
            },
            {
                "default": "None",
                "name": "endTime"
            }
        ]
    },
    "setattr": {
        "args": [
            {
                "name": "outputs"
            },
            {
                "name": "key"
            },
            {
                "name": "Unined"
            }
        ]
    },
    "setattr_on_read": {
        "args": [
            {
                "name": "func"
            }
        ]
    },
    "sge_debug_print": {
        "args": [
            {
                "name": "message"
            }
        ]
    },
    "shouldRollover": {
        "args": [
            {
                "name": "record"
            }
        ]
    },
    "show_orientation = traits.Bool": {
        "args": [
            {
                "default": "9",
                "name": "position"
            },
            {
                "default": "'%s'",
                "name": "argstr"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "siemens2rads": {
        "args": [
            {
                "name": "in_file"
            },
            {
                "default": "None",
                "name": "out_file"
            }
        ]
    },
    "sigma = traits.Int": {
        "args": [
            {
                "name": "2"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "default": "'--sigma %s'",
                "name": "argstr"
            },
            {
                "name": ""
            }
        ]
    },
    "simple_form: boolean ": {
        "args": [
            {
                "name": "ault: True"
            }
        ]
    },
    "skipUnNamed = traits.Bool": {
        "args": [
            {
                "default": "\"Select this to not generate models from labels that do not have names ined in the color look up table associated with the input label map. If true",
                "name": "desc"
            },
            {
                "name": "only models which have an entry in the color table will be generated.  If false"
            },
            {
                "name": "generate all models that exist within the label range.\""
            },
            {
                "default": "\"--skipUnNamed \"",
                "name": "argstr"
            }
        ]
    },
    "slice_order = traits.Int": {
        "args": [
            {
                "default": "'-sorder %d'",
                "name": "argstr"
            },
            {
                "default": "'set the slice order. 1 means normal",
                "name": "desc"
            },
            {
                "name": "-1 means reversed. ault value is 1'"
            }
        ]
    },
    "smoothDisplacementFieldSigma = traits.Float": {
        "args": [
            {
                "default": "\"A gaussian smoothing value to be applied to the ormation feild at each iteration.\"",
                "name": "desc"
            },
            {
                "default": "\"--smoothDisplacementFieldSigma %f\"",
                "name": "argstr"
            }
        ]
    },
    "snr = traits.Float": {
        "args": [
            {
                "name": "10.0"
            },
            {
                "default": "'desired output SNR in dB'",
                "name": "desc"
            },
            {
                "default": "True",
                "name": "useault"
            }
        ]
    },
    "sort_filelist = traits.Bool": {
        "args": [
            {
                "name": "True"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "source_in_filename = traits.Bool": {
        "args": [
            {
                "name": "False"
            },
            {
                "default": "'-f'",
                "name": "argstr"
            },
            {
                "default": "True",
                "name": "useault"
            }
        ]
    },
    "space_ining = File ": {
        "args": [
            {
                "default": " True",
                "name": "exists "
            },
            {
                "default": " True",
                "name": "mandatory "
            },
            {
                "name": ""
            }
        ]
    },
    "specialization": {
        "args": [
            {
                "name": "specificEntity"
            },
            {
                "name": "generalEntity"
            },
            {
                "default": "None",
                "name": "identifier"
            },
            {
                "default": "None",
                "name": "other_attributes"
            }
        ]
    },
    "species = traits.Str": {
        "args": [
            {
                "name": "'Homo sapiens'"
            },
            {
                "default": "'Species'",
                "name": "desc"
            },
            {
                "default": "True",
                "name": "useault"
            }
        ]
    },
    "splinedistance = traits.Float": {
        "args": [
            {
                "default": "\"An alternative means to ine the spline grid",
                "name": "desc"
            },
            {
                "name": "by setting the distance between the control points. This parameter is used only if the grid resolution is not specified.\""
            },
            {
                "default": "\"--splinedistance %f\"",
                "name": "argstr"
            }
        ]
    },
    "split_filename": {
        "args": [
            {
                "name": "fname"
            }
        ]
    },
    "split_rois": {
        "args": [
            {
                "name": "in_file"
            },
            {
                "default": "None",
                "name": "mask"
            },
            {
                "default": "None",
                "name": "roishape"
            }
        ]
    },
    "spm_get_aults": {
        "args": [
            {
                "name": "'cmdline'"
            },
            {
                "name": "1);"
            }
        ]
    },
    "spm_hrf": {
        "args": [
            {
                "name": "RT"
            },
            {
                "default": "None",
                "name": "P"
            },
            {
                "default": "16",
                "name": "fMRI_T"
            }
        ]
    },
    "squeeze = traits.Bool": {
        "args": [
            {
                "name": "False"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "ssh_log_to_file = traits.Str": {
        "args": [
            {
                "name": "''"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "standard_image": {
        "args": [
            {
                "default": "None",
                "name": "img_name"
            }
        ]
    },
    "start": {
        "args": [
            {
                "name": "activity"
            },
            {
                "default": "None",
                "name": "trigger"
            },
            {
                "default": "None",
                "name": "starter"
            },
            {
                "default": "None",
                "name": "time"
            },
            {
                "default": "None",
                "name": "identifier"
            },
            {
                "default": "None",
                "name": "other_attributes"
            }
        ]
    },
    "start = traits.Float": {
        "args": [
            {
                "name": "0.0"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "stdev ": {
        "args": [
            {
                "default": " 2mm)\"",
                "name": "ault "
            }
        ]
    },
    "str2bool": {
        "args": [
            {
                "name": "v"
            }
        ]
    },
    "subject_dir_template = traits.Str": {
        "args": [
            {
                "name": "'S.%04d'"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "subjects_dir = Directory": {
        "args": [
            {
                "default": "True",
                "name": "exists"
            },
            {
                "default": "True",
                "name": "mandatory"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "subjectsdir": {
        "args": [
            {
                "name": "cls"
            }
        ]
    },
    "subnodename = subnoullname.replace": {
        "args": [
            {
                "name": "'.'"
            },
            {
                "name": "'_'"
            }
        ]
    },
    "subnoullname = '.'.join": {
        "args": [
            {
                "name": "hierarchy +"
            }
        ]
    },
    "subsamplingFactor = traits.Int": {
        "args": [
            {
                "default": "\"Subsampling factor for the ormation field\"",
                "name": "desc"
            },
            {
                "default": "\"--subsamplingFactor %d\"",
                "name": "argstr"
            }
        ]
    },
    "surf_geo = traits.Str": {
        "args": [
            {
                "name": "\"white\""
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "switch_labels": {
        "args": [
            {
                "name": "inverse"
            },
            {
                "name": "transform_output"
            },
            {
                "name": "source_file"
            },
            {
                "name": "label_file"
            }
        ]
    },
    "synchronize_iterables": {
        "args": [
            {
                "name": "iterables"
            }
        ]
    },
    "t_tail = traits.Enum": {
        "args": [
            {
                "name": "'left'"
            },
            {
                "name": "'right'"
            },
            {
                "name": "'both'"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "default": "'Can be one of \"left\"",
                "name": "desc"
            },
            {
                "name": "\"right\""
            },
            {
                "name": "or \"both\"'"
            }
        ]
    },
    "taskPreProcessingSetting = traits.Str": {
        "args": [
            {
                "default": "\"Specifies the different task parameter. Leave blank for ault.\"",
                "name": "desc"
            },
            {
                "default": "\"--taskPreProcessingSetting %s\"",
                "name": "argstr"
            }
        ]
    },
    "tbss1_op_string": {
        "args": [
            {
                "name": "in_files"
            }
        ]
    },
    "tbss4_op_string": {
        "args": [
            {
                "name": "skeleton_thresh"
            }
        ]
    },
    "tediff = traits.Float": {
        "args": [
            {
                "name": "2.46"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "template_expression = traits.Enum": {
        "args": [
            {
                "name": "['fnmatch'"
            },
            {
                "name": "'regexp']"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "template_prefix = traits.Str": {
        "args": [
            {
                "name": "'Template'"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "tensor_fitting": {
        "args": [
            {
                "name": "data"
            },
            {
                "name": "bvals"
            },
            {
                "name": "bvecs"
            },
            {
                "default": "None",
                "name": "mask_file"
            }
        ]
    },
    "the len": {
        "args": [
            {
                "name": "of the elements of the list.  The _Unined class in traits"
            }
        ]
    },
    "threshold = traits.Float": {
        "args": [
            {
                "name": "3"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "default": "'T-statistic threshold'",
                "name": "desc"
            }
        ]
    },
    "threshold = traits.Range": {
        "args": [
            {
                "default": "1000.",
                "name": "ault"
            },
            {
                "default": "0.0",
                "name": "low"
            },
            {
                "default": "'%f'",
                "name": "argstr"
            },
            {
                "name": ""
            }
        ]
    },
    "time ": {
        "args": [
            {
                "name": "t) dimension the TR is set by ault to 1 sec."
            }
        ]
    },
    "time_avg": {
        "args": [
            {
                "name": "in_file"
            },
            {
                "default": "[0]",
                "name": "index"
            },
            {
                "default": "None",
                "name": "out_file"
            }
        ]
    },
    "title: String to use as a title for the output merged CFF file ": {
        "args": [
            {
                "name": "ault 'group'"
            }
        ]
    },
    "topological_sort": {
        "args": [
            {
                "name": "graph"
            },
            {
                "default": "False",
                "name": "depth_first"
            }
        ]
    },
    "topup_correction": {
        "args": [
            {
                "default": "'topup_correction'",
                "name": "name"
            }
        ]
    },
    "track_gen": {
        "args": [
            {
                "name": "track_points"
            }
        ]
    },
    "tracking_method = traits.Enum": {
        "args": [
            {
                "name": "'fact'"
            },
            {
                "name": "'rk2'"
            },
            {
                "name": "'tl'"
            },
            {
                "name": "'sl'"
            },
            {
                "default": "\"\"\"fact -> use FACT method for tracking. this is the ault method.",
                "name": "desc"
            }
        ]
    },
    "traits.Int, desc=\"Add warped grid to output image to help show the ormation that occured with specified spacing.   A spacing of 0 in a dimension indicates that grid lines should be rendered to fall exactly ": {
        "args": [
            {
                "name": "i.e. do not allow displacements off that plane).  This is useful for makeing a 2D image of grid lines from the 3D space\""
            },
            {
                "default": "\"",
                "name": "sep"
            },
            {
                "name": "\""
            },
            {
                "default": "\"--gridSpacing %s\"",
                "name": "argstr"
            }
        ]
    },
    "transform_to_affine": {
        "args": [
            {
                "name": "streams"
            },
            {
                "name": "header"
            },
            {
                "name": "affine"
            }
        ]
    },
    "transpose": {
        "args": [
            {
                "name": "samples_over_fibres"
            }
        ]
    },
    "treat_as_weighted_graph = traits.Bool": {
        "args": [
            {
                "name": "True"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "default": "'Some network metrics can be calculated while considering only a binarized version of the graph'",
                "name": "desc"
            }
        ]
    },
    "trim": {
        "args": [
            {
                "name": "docstring"
            },
            {
                "default": "None",
                "name": "marker"
            }
        ]
    },
    "u": {
        "args": [
            {
                "name": "s"
            }
        ]
    },
    "unflatten": {
        "args": [
            {
                "name": "in_list"
            },
            {
                "name": "prev_structure"
            }
        ]
    },
    "unlock": {
        "args": [
            {
                "name": "file"
            }
        ]
    },
    "unquote_id": {
        "args": [
            {
                "name": "string"
            }
        ]
    },
    "update": {
        "args": [
            {
                "name": "**opts"
            }
        ]
    },
    "update_config": {
        "args": [
            {
                "name": "config_dict"
            }
        ]
    },
    "update_info": {
        "args": [
            {
                "name": "job_queue_state"
            },
            {
                "name": "job_time"
            },
            {
                "name": "job_queue_name"
            },
            {
                "name": "job_slots"
            }
        ]
    },
    "update_logging": {
        "args": [
            {
                "name": "config"
            }
        ]
    },
    "update_matplotlib": {
        "args": []
    },
    "update_proposal_every = traits.Range": {
        "args": [
            {
                "default": "1",
                "name": "low"
            },
            {
                "default": "40",
                "name": "ault"
            },
            {
                "name": ""
            }
        ]
    },
    "upperThresholdFactor = traits.Float": {
        "args": [
            {
                "default": "\"Upper threshold factor for ining the brain mask\"",
                "name": "desc"
            },
            {
                "default": "\"--upperThresholdFactor %f\"",
                "name": "argstr"
            }
        ]
    },
    "usage": {
        "args": [
            {
                "name": "activity"
            },
            {
                "default": "None",
                "name": "entity"
            },
            {
                "default": "None",
                "name": "time"
            },
            {
                "default": "None",
                "name": "identifier"
            },
            {
                "default": "None",
                "name": "other_attributes"
            }
        ]
    },
    "useROIBSpline = traits.Bool": {
        "args": [
            {
                "default": "\"If enabled then the bounding box of the input ROIs ines the BSpline grid support region. Otherwise the BSpline grid support region is the whole fixed image.\"",
                "name": "desc"
            },
            {
                "default": "\"--useROIBSpline \"",
                "name": "argstr"
            }
        ]
    },
    "use_cingulum_mask = traits.Bool": {
        "args": [
            {
                "name": "True"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "use_fieldmap - True if there are fieldmap files that should be used ": {
        "args": [
            {
                "name": "ault True"
            }
        ]
    },
    "use_freesurfer_LUT = traits.Bool": {
        "args": [
            {
                "default": "['LUT_file']",
                "name": "xor"
            },
            {
                "default": "'Boolean value; Set to True to use ault Freesurfer LUT",
                "name": "desc"
            },
            {
                "name": "False for custom LUT'"
            }
        ]
    },
    "use_fullpath = traits.Bool": {
        "args": [
            {
                "name": "False"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "use_median = traits.Enum": {
        "args": [
            {
                "name": "1"
            },
            {
                "name": "0"
            },
            {
                "default": "'%d'",
                "name": "argstr"
            },
            {
                "default": "5",
                "name": "position"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "use_topo_fdr = traits.Bool": {
        "args": [
            {
                "name": "True"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "default": "\"whether to use FDR over cluster extent probabilities\"",
                "name": "desc"
            }
        ]
    },
    "use_v8struct = traits.Bool": {
        "args": [
            {
                "name": "True"
            },
            {
                "default": "'8'",
                "name": "min_ver"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "useault=True, desc='image dimension ": {
        "args": [
            {
                "name": "2 or 3)'"
            }
        ]
    },
    "valid_identifier": {
        "args": [
            {
                "name": "identifier"
            }
        ]
    },
    "validate": {
        "args": [
            {
                "name": "object"
            },
            {
                "name": "name"
            },
            {
                "name": "value"
            }
        ]
    },
    "validate ": {
        "args": [
            {
                "name": "self"
            },
            {
                "name": "object"
            },
            {
                "name": "name"
            },
            {
                "name": "value"
            }
        ]
    },
    "value=dict": {
        "args": [
            {
                "default": "[])",
                "name": "outfiles"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "version": {
        "args": []
    },
    "version_from_command": {
        "args": [
            {
                "default": "'-v'",
                "name": "flag"
            }
        ]
    },
    "vol_units = traits.Enum": {
        "args": [
            {
                "name": "'voxel'"
            },
            {
                "name": "'mm'"
            },
            {
                "default": "True",
                "name": "mandatory"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "volumes_in_cluster=traits.Range": {
        "args": [
            {
                "name": "1"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "vsm2warp": {
        "args": [
            {
                "default": "'Shiftmap2Warping'",
                "name": "name"
            }
        ]
    },
    "walk": {
        "args": [
            {
                "name": "children"
            },
            {
                "default": "0",
                "name": "level"
            },
            {
                "default": "None",
                "name": "path"
            },
            {
                "default": "True",
                "name": "usename"
            }
        ]
    },
    "walk_files": {
        "args": [
            {
                "name": "cwd"
            }
        ]
    },
    "walk_outputs": {
        "args": [
            {
                "name": "object"
            }
        ]
    },
    "warpTransform = File": {
        "args": [
            {
                "default": "\"Filename for the BRAINSFit transform used in place of the ormation field\"",
                "name": "desc"
            },
            {
                "default": "True",
                "name": "exists"
            },
            {
                "default": "\"--warpTransform %s\"",
                "name": "argstr"
            }
        ]
    },
    "warp_transform = File": {
        "args": [
            {
                "default": "True",
                "name": "exists"
            },
            {
                "default": "'Warping ormation field'",
                "name": "desc"
            }
        ]
    },
    "weighting = traits.Enum": {
        "args": [
            {
                "name": "'none'"
            },
            {
                "name": "'volume'"
            },
            {
                "name": "'squared_vol'"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "with_metaclass": {
        "args": [
            {
                "name": "meta"
            },
            {
                "name": "*bases"
            }
        ]
    },
    "wrapper": {
        "args": [
            {
                "name": "cls"
            }
        ]
    },
    "wraps": {
        "args": [
            {
                "name": "wrapped"
            },
            {
                "default": "functools.WRAPPER_ASSIGNMENTS",
                "name": "assigned"
            },
            {
                "name": ""
            }
        ]
    },
    "write": {
        "args": [
            {
                "name": "data"
            }
        ]
    },
    "write_config": {
        "args": [
            {
                "name": "configfile"
            }
        ]
    },
    "write_graph": {
        "args": [
            {
                "default": "'graph.dot'",
                "name": "dotfilename"
            },
            {
                "default": "'hierarchical'",
                "name": "graph2use"
            },
            {
                "name": ""
            }
        ]
    },
    "write_hierarchical_dotfile": {
        "args": [
            {
                "default": "None",
                "name": "dotfilename"
            },
            {
                "default": "False",
                "name": "colored"
            },
            {
                "name": ""
            }
        ]
    },
    "write_jacobian = traits.Bool": {
        "args": [
            {
                "name": "False"
            },
            {
                "default": "True",
                "name": "mandatory"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "name": ""
            }
        ]
    },
    "write_provenance": {
        "args": [
            {
                "default": "'provenance'",
                "name": "filename"
            },
            {
                "default": "'turtle'",
                "name": "format"
            }
        ]
    },
    "write_report": {
        "args": [
            {
                "default": "None",
                "name": "report_type"
            },
            {
                "default": "None",
                "name": "cwd"
            }
        ]
    },
    "write_rst_dict": {
        "args": [
            {
                "name": "info"
            },
            {
                "default": "''",
                "name": "prefix"
            }
        ]
    },
    "write_rst_header": {
        "args": [
            {
                "name": "header"
            },
            {
                "default": "0",
                "name": "level"
            }
        ]
    },
    "write_rst_list": {
        "args": [
            {
                "name": "items"
            },
            {
                "default": "''",
                "name": "prefix"
            }
        ]
    },
    "write_workflow_prov": {
        "args": [
            {
                "name": "graph"
            },
            {
                "default": "None",
                "name": "filename"
            },
            {
                "default": "'turtle'",
                "name": "format"
            }
        ]
    },
    "writedebuggingImagesLevel = traits.Int": {
        "args": [
            {
                "default": "\"",
                "name": "desc"
            },
            {
                "name": "This flag controls if debugging images are produced.  By ault value of 0 is no images.  Anything greater than zero will be increasing level of debugging images."
            },
            {
                "name": "\""
            },
            {
                "default": "\"--writedebuggingImagesLevel %d\"",
                "name": "argstr"
            }
        ]
    },
    "xDefaultMem = traits.Int": {
        "args": [
            {
                "default": "\"Set ault maximum heap size\"",
                "name": "desc"
            },
            {
                "default": "\"-xDefaultMem %d\"",
                "name": "argstr"
            }
        ]
    },
    "xMaxProcess = traits.Int": {
        "args": [
            {
                "name": "1"
            },
            {
                "default": "\"Set ault maximum number of processes.\"",
                "name": "desc"
            },
            {
                "default": "\"-xMaxProcess %d\"",
                "name": "argstr"
            },
            {
                "default": "True",
                "name": "useault"
            }
        ]
    },
    "x_units = traits.Int": {
        "args": [
            {
                "default": "\"-u %d\"",
                "name": "argstr"
            },
            {
                "default": "True",
                "name": "useault"
            },
            {
                "default": "1",
                "name": "ault_value"
            },
            {
                "name": ""
            }
        ]
    },
    "xfm_source = File": {
        "args": [
            {
                "default": "True",
                "name": "exists"
            },
            {
                "default": "\"-lta_src %s\"",
                "name": "argstr"
            },
            {
                "default": "\"image ining transform source space\"",
                "name": "desc"
            }
        ]
    },
    "xfm_target = File": {
        "args": [
            {
                "default": "True",
                "name": "exists"
            },
            {
                "default": "\"-lta_dst %s\"",
                "name": "argstr"
            },
            {
                "default": "\"image ining transform target space\"",
                "name": "desc"
            }
        ]
    }
}