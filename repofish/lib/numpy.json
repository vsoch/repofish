{
    "absoft": {
        "*": {}
    },
    "add_newdocs": {
        "*": {
            "iter_add": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "default": "None",
                        "name": "out"
                    }
                ]
            },
            "iter_add_py": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "default": "None",
                        "name": "out"
                    }
                ]
            },
            "luf": {
                "args": [
                    {
                        "name": "lamdaexpr"
                    },
                    {
                        "name": "*args"
                    },
                    {
                        "name": "**kwargs"
                    }
                ]
            },
            "outer_it": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "default": "None",
                        "name": "out"
                    }
                ]
            }
        }
    },
    "alter_code1": {
        "*": {
            "_func": {
                "args": [
                    {
                        "name": "arg"
                    },
                    {
                        "name": "dirname"
                    },
                    {
                        "name": "fnames"
                    }
                ]
            },
            "addimport": {
                "args": [
                    {
                        "name": "astr"
                    }
                ]
            },
            "changeimports": {
                "args": [
                    {
                        "name": "fstr"
                    },
                    {
                        "name": "name"
                    },
                    {
                        "name": "newname"
                    }
                ]
            },
            "convertall": {
                "args": [
                    {
                        "default": "os.path.curdir",
                        "name": "direc"
                    },
                    {
                        "default": "1",
                        "name": "orig"
                    }
                ]
            },
            "convertfile": {
                "args": [
                    {
                        "name": "filename"
                    },
                    {
                        "default": "1",
                        "name": "orig"
                    }
                ]
            },
            "convertsrc": {
                "args": [
                    {
                        "default": "os.path.curdir",
                        "name": "direc"
                    },
                    {
                        "default": "None",
                        "name": "ext"
                    },
                    {
                        "default": "1",
                        "name": "orig"
                    }
                ]
            },
            "converttree": {
                "args": [
                    {
                        "default": "os.path.curdir",
                        "name": "direc"
                    }
                ]
            },
            "fromargs": {
                "args": [
                    {
                        "name": "args"
                    }
                ]
            },
            "fromstr": {
                "args": [
                    {
                        "name": "filestr"
                    }
                ]
            },
            "makenewfile": {
                "args": [
                    {
                        "name": "name"
                    },
                    {
                        "name": "filestr"
                    }
                ]
            },
            "replaceattr": {
                "args": [
                    {
                        "name": "astr"
                    }
                ]
            },
            "replaceother": {
                "args": [
                    {
                        "name": "astr"
                    }
                ]
            }
        }
    },
    "alter_code2": {
        "*": {
            "_func": {
                "args": [
                    {
                        "name": "arg"
                    },
                    {
                        "name": "dirname"
                    },
                    {
                        "name": "fnames"
                    }
                ]
            },
            "convertall": {
                "args": [
                    {
                        "default": "os.path.curdir",
                        "name": "direc"
                    }
                ]
            },
            "convertfile": {
                "args": [
                    {
                        "name": "filename"
                    }
                ]
            },
            "converttree": {
                "args": [
                    {
                        "default": "os.path.curdir",
                        "name": "direc"
                    }
                ]
            },
            "fromargs": {
                "args": [
                    {
                        "name": "args"
                    }
                ]
            },
            "getandcopy": {
                "args": [
                    {
                        "name": "name"
                    }
                ]
            },
            "makenewfile": {
                "args": [
                    {
                        "name": "name"
                    },
                    {
                        "name": "filestr"
                    }
                ]
            }
        }
    },
    "array_printer": {
        "*": {
            "array2string": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "max_line_width"
                    },
                    {
                        "default": "None",
                        "name": "precision"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "None",
                        "name": "suppress_small"
                    },
                    {
                        "default": "' '",
                        "name": "separator"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "0",
                        "name": "array_output"
                    }
                ]
            }
        }
    },
    "arrayfns": {
        "*": {}
    },
    "arraypad": {
        "*": {
            "_append_const": {
                "args": [
                    {
                        "name": "arr"
                    },
                    {
                        "name": "pad_amt"
                    },
                    {
                        "name": "val"
                    },
                    {
                        "default": "-1",
                        "name": "axis"
                    }
                ]
            },
            "_append_edge": {
                "args": [
                    {
                        "name": "arr"
                    },
                    {
                        "name": "pad_amt"
                    },
                    {
                        "default": "-1",
                        "name": "axis"
                    }
                ]
            },
            "_append_max": {
                "args": [
                    {
                        "name": "arr"
                    },
                    {
                        "name": "pad_amt"
                    },
                    {
                        "name": "num"
                    },
                    {
                        "default": "-1",
                        "name": "axis"
                    }
                ]
            },
            "_append_mean": {
                "args": [
                    {
                        "name": "arr"
                    },
                    {
                        "name": "pad_amt"
                    },
                    {
                        "name": "num"
                    },
                    {
                        "default": "-1",
                        "name": "axis"
                    }
                ]
            },
            "_append_med": {
                "args": [
                    {
                        "name": "arr"
                    },
                    {
                        "name": "pad_amt"
                    },
                    {
                        "name": "num"
                    },
                    {
                        "default": "-1",
                        "name": "axis"
                    }
                ]
            },
            "_append_min": {
                "args": [
                    {
                        "name": "arr"
                    },
                    {
                        "name": "pad_amt"
                    },
                    {
                        "name": "num"
                    },
                    {
                        "default": "-1",
                        "name": "axis"
                    }
                ]
            },
            "_append_ramp": {
                "args": [
                    {
                        "name": "arr"
                    },
                    {
                        "name": "pad_amt"
                    },
                    {
                        "name": "end"
                    },
                    {
                        "default": "-1",
                        "name": "axis"
                    }
                ]
            },
            "_arange_ndarray": {
                "args": [
                    {
                        "name": "arr"
                    },
                    {
                        "name": "shape"
                    },
                    {
                        "name": "axis"
                    },
                    {
                        "default": "False",
                        "name": "reverse"
                    }
                ]
            },
            "_normalize_shape": {
                "args": [
                    {
                        "name": "narray"
                    },
                    {
                        "name": "shape"
                    }
                ]
            },
            "_pad_ref": {
                "args": [
                    {
                        "name": "arr"
                    },
                    {
                        "name": "pad_amt"
                    },
                    {
                        "name": "method"
                    },
                    {
                        "default": "-1",
                        "name": "axis"
                    }
                ]
            },
            "_pad_sym": {
                "args": [
                    {
                        "name": "arr"
                    },
                    {
                        "name": "pad_amt"
                    },
                    {
                        "name": "method"
                    },
                    {
                        "default": "-1",
                        "name": "axis"
                    }
                ]
            },
            "_pad_wrap": {
                "args": [
                    {
                        "name": "arr"
                    },
                    {
                        "name": "pad_amt"
                    },
                    {
                        "default": "-1",
                        "name": "axis"
                    }
                ]
            },
            "_prepend_const": {
                "args": [
                    {
                        "name": "arr"
                    },
                    {
                        "name": "pad_amt"
                    },
                    {
                        "name": "val"
                    },
                    {
                        "default": "-1",
                        "name": "axis"
                    }
                ]
            },
            "_prepend_edge": {
                "args": [
                    {
                        "name": "arr"
                    },
                    {
                        "name": "pad_amt"
                    },
                    {
                        "default": "-1",
                        "name": "axis"
                    }
                ]
            },
            "_prepend_max": {
                "args": [
                    {
                        "name": "arr"
                    },
                    {
                        "name": "pad_amt"
                    },
                    {
                        "name": "num"
                    },
                    {
                        "default": "-1",
                        "name": "axis"
                    }
                ]
            },
            "_prepend_mean": {
                "args": [
                    {
                        "name": "arr"
                    },
                    {
                        "name": "pad_amt"
                    },
                    {
                        "name": "num"
                    },
                    {
                        "default": "-1",
                        "name": "axis"
                    }
                ]
            },
            "_prepend_med": {
                "args": [
                    {
                        "name": "arr"
                    },
                    {
                        "name": "pad_amt"
                    },
                    {
                        "name": "num"
                    },
                    {
                        "default": "-1",
                        "name": "axis"
                    }
                ]
            },
            "_prepend_min": {
                "args": [
                    {
                        "name": "arr"
                    },
                    {
                        "name": "pad_amt"
                    },
                    {
                        "name": "num"
                    },
                    {
                        "default": "-1",
                        "name": "axis"
                    }
                ]
            },
            "_prepend_ramp": {
                "args": [
                    {
                        "name": "arr"
                    },
                    {
                        "name": "pad_amt"
                    },
                    {
                        "name": "end"
                    },
                    {
                        "default": "-1",
                        "name": "axis"
                    }
                ]
            },
            "_round_ifneeded": {
                "args": [
                    {
                        "name": "arr"
                    },
                    {
                        "name": "dtype"
                    }
                ]
            },
            "_validate_lengths": {
                "args": [
                    {
                        "name": "narray"
                    },
                    {
                        "name": "number_elements"
                    }
                ]
            },
            "pad": {
                "args": [
                    {
                        "name": "array"
                    },
                    {
                        "name": "pad_width"
                    },
                    {
                        "default": "None",
                        "name": "mode"
                    },
                    {
                        "name": "**kwargs"
                    }
                ]
            }
        }
    },
    "arrayprint": {
        "*": {
            "_array2string": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "max_line_width"
                    },
                    {
                        "name": "precision"
                    },
                    {
                        "name": "suppress_small"
                    },
                    {
                        "default": "' '",
                        "name": "separator"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "\"\"",
                        "name": "prefix"
                    },
                    {
                        "default": "None",
                        "name": "formatter"
                    }
                ]
            },
            "_boolFormatter": {
                "args": [
                    {
                        "name": "x"
                    }
                ]
            },
            "_convert_arrays": {
                "args": [
                    {
                        "name": "obj"
                    }
                ]
            },
            "_extendLine": {
                "args": [
                    {
                        "name": "s"
                    },
                    {
                        "name": "line"
                    },
                    {
                        "name": "word"
                    },
                    {
                        "name": "max_line_len"
                    },
                    {
                        "name": "next_line_prefix"
                    }
                ]
            },
            "_formatArray": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "format_function"
                    },
                    {
                        "name": "rank"
                    },
                    {
                        "name": "max_line_len"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "next_line_prefix"
                    },
                    {
                        "name": "separator"
                    },
                    {
                        "name": "edge_items"
                    },
                    {
                        "name": "summary_insert"
                    }
                ]
            },
            "_leading_trailing": {
                "args": [
                    {
                        "name": "a"
                    }
                ]
            },
            "array2string": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "max_line_width"
                    },
                    {
                        "default": "None",
                        "name": "precision"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "None",
                        "name": "suppress_small"
                    },
                    {
                        "default": "' '",
                        "name": "separator"
                    },
                    {
                        "default": "\"\"",
                        "name": "prefix"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "repr",
                        "name": "style"
                    },
                    {
                        "default": "None",
                        "name": "formatter"
                    }
                ]
            },
            "get_printoptions": {
                "args": [
                    {
                        "name": ""
                    }
                ]
            },
            "product": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "y): return x*y"
                    }
                ]
            },
            "repr_format": {
                "args": [
                    {
                        "name": "x"
                    }
                ]
            },
            "set_printoptions": {
                "args": [
                    {
                        "default": "None",
                        "name": "precision"
                    },
                    {
                        "default": "None",
                        "name": "threshold"
                    },
                    {
                        "default": "None",
                        "name": "edgeitems"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "None",
                        "name": "linewidth"
                    },
                    {
                        "default": "None",
                        "name": "suppress"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "None",
                        "name": "nanstr"
                    },
                    {
                        "default": "None",
                        "name": "infstr"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "None",
                        "name": "formatter"
                    }
                ]
            }
        },
        "ComplexFormat": {
            "__call__": {
                "args": [
                    {
                        "name": "x"
                    }
                ]
            },
            "__init__": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "precision"
                    },
                    {
                        "name": "suppress_small"
                    }
                ]
            }
        },
        "DatetimeFormat": {
            "__call__": {
                "args": [
                    {
                        "name": "x"
                    }
                ]
            },
            "__init__": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "default": "None",
                        "name": "unit"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "None",
                        "name": "timezone"
                    },
                    {
                        "default": "'same_kind'",
                        "name": "casting"
                    }
                ]
            }
        },
        "FloatFormat": {
            "__call__": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "default": "True",
                        "name": "strip_zeros"
                    }
                ]
            },
            "__init__": {
                "args": [
                    {
                        "name": "data"
                    },
                    {
                        "name": "precision"
                    },
                    {
                        "name": "suppress_small"
                    },
                    {
                        "default": "False",
                        "name": "sign"
                    }
                ]
            },
            "_digits": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "precision"
                    },
                    {
                        "name": "format"
                    }
                ]
            },
            "fillFormat": {
                "args": [
                    {
                        "name": "data"
                    }
                ]
            }
        },
        "IntegerFormat": {
            "__call__": {
                "args": [
                    {
                        "name": "x"
                    }
                ]
            },
            "__init__": {
                "args": [
                    {
                        "name": "data"
                    }
                ]
            }
        },
        "LongComplexFormat": {
            "__call__": {
                "args": [
                    {
                        "name": "x"
                    }
                ]
            },
            "__init__": {
                "args": [
                    {
                        "name": "precision"
                    }
                ]
            }
        },
        "LongFloatFormat": {
            "__call__": {
                "args": [
                    {
                        "name": "x"
                    }
                ]
            },
            "__init__": {
                "args": [
                    {
                        "name": "precision"
                    },
                    {
                        "default": "False",
                        "name": "sign"
                    }
                ]
            }
        }
    },
    "arraysetops": {
        "*": {
            "ediff1d": {
                "args": [
                    {
                        "name": "ary"
                    },
                    {
                        "default": "None",
                        "name": "to_end"
                    },
                    {
                        "default": "None",
                        "name": "to_begin"
                    }
                ]
            },
            "in1d": {
                "args": [
                    {
                        "name": "ar1"
                    },
                    {
                        "name": "ar2"
                    },
                    {
                        "default": "False",
                        "name": "assume_unique"
                    },
                    {
                        "default": "False",
                        "name": "invert"
                    }
                ]
            },
            "intersect1d": {
                "args": [
                    {
                        "name": "ar1"
                    },
                    {
                        "name": "ar2"
                    },
                    {
                        "default": "False",
                        "name": "assume_unique"
                    }
                ]
            },
            "setdiff1d": {
                "args": [
                    {
                        "name": "ar1"
                    },
                    {
                        "name": "ar2"
                    },
                    {
                        "default": "False",
                        "name": "assume_unique"
                    }
                ]
            },
            "setxor1d": {
                "args": [
                    {
                        "name": "ar1"
                    },
                    {
                        "name": "ar2"
                    },
                    {
                        "default": "False",
                        "name": "assume_unique"
                    }
                ]
            },
            "union1d": {
                "args": [
                    {
                        "name": "ar1"
                    },
                    {
                        "name": "ar2"
                    }
                ]
            },
            "unique": {
                "args": [
                    {
                        "name": "ar"
                    },
                    {
                        "default": "False",
                        "name": "return_index"
                    },
                    {
                        "default": "False",
                        "name": "return_inverse"
                    }
                ]
            }
        }
    },
    "arrayterator": {
        "*": {}
    },
    "autodist": {
        "*": {
            "check_compiler_gcc4": {
                "args": [
                    {
                        "name": "cmd"
                    }
                ]
            },
            "check_inline": {
                "args": [
                    {
                        "name": "cmd"
                    }
                ]
            }
        }
    },
    "auxfuncs": {
        "*": {
            "_isstring": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "containscommon": {
                "args": [
                    {
                        "name": "rout"
                    }
                ]
            },
            "containsmodule": {
                "args": [
                    {
                        "name": "block"
                    }
                ]
            },
            "debugcapi": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "get_kind": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "hasassumedshape": {
                "args": [
                    {
                        "name": "rout"
                    }
                ]
            },
            "hasbody": {
                "args": [
                    {
                        "name": "rout"
                    }
                ]
            },
            "hascallstatement": {
                "args": [
                    {
                        "name": "rout"
                    }
                ]
            },
            "hascommon": {
                "args": [
                    {
                        "name": "rout"
                    }
                ]
            },
            "hasexternals": {
                "args": [
                    {
                        "name": "rout"
                    }
                ]
            },
            "hasinitvalue": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "hasinitvalueasstring": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "hasnote": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "hasresultnote": {
                "args": [
                    {
                        "name": "rout"
                    }
                ]
            },
            "hasvariables": {
                "args": [
                    {
                        "name": "rout"
                    }
                ]
            },
            "isallocatable": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "isarray": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "isarrayofstrings": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "ischaracter": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "iscomplex": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "iscomplexarray": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "iscomplexfunction": {
                "args": [
                    {
                        "name": "rout"
                    }
                ]
            },
            "iscomplexfunction_warn": {
                "args": [
                    {
                        "name": "rout"
                    }
                ]
            },
            "isdouble": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "isexternal": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "isfalse": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "isfunction": {
                "args": [
                    {
                        "name": "rout"
                    }
                ]
            },
            "isfunction_wrap": {
                "args": [
                    {
                        "name": "rout"
                    }
                ]
            },
            "isint1array": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "isinteger": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "isintent_aligned16": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "isintent_aligned4": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "isintent_aligned8": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "isintent_aux": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "isintent_c": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "isintent_cache": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "isintent_callback": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "isintent_copy": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "isintent_hide": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "isintent_in": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "isintent_inout": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "isintent_inplace": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "isintent_nothide": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "isintent_out": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "isintent_overwrite": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "islogical": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "islogicalfunction": {
                "args": [
                    {
                        "name": "rout"
                    }
                ]
            },
            "islong_complex": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "islong_double": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "islong_doublefunction": {
                "args": [
                    {
                        "name": "rout"
                    }
                ]
            },
            "islong_long": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "islong_longfunction": {
                "args": [
                    {
                        "name": "rout"
                    }
                ]
            },
            "ismodule": {
                "args": [
                    {
                        "name": "rout"
                    }
                ]
            },
            "ismoduleroutine": {
                "args": [
                    {
                        "name": "rout"
                    }
                ]
            },
            "ismutable": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "isoptional": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "isprivate": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "isreal": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "isrequired": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "isroutine": {
                "args": [
                    {
                        "name": "rout"
                    }
                ]
            },
            "isscalar": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "issigned_array": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "issigned_chararray": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "issigned_long_longarray": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "issigned_shortarray": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "isstring": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "isstringarray": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "isstringfunction": {
                "args": [
                    {
                        "name": "rout"
                    }
                ]
            },
            "issubroutine": {
                "args": [
                    {
                        "name": "rout"
                    }
                ]
            },
            "issubroutine_wrap": {
                "args": [
                    {
                        "name": "rout"
                    }
                ]
            },
            "isthreadsafe": {
                "args": [
                    {
                        "name": "rout"
                    }
                ]
            },
            "istrue": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "isunsigned": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "isunsigned_char": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "isunsigned_chararray": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "isunsigned_long_long": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "isunsigned_long_longarray": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "isunsigned_short": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "isunsigned_shortarray": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "isunsignedarray": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "outmess": {
                "args": [
                    {
                        "name": "t"
                    }
                ]
            }
        },
        "F2PYError": {}
    },
    "bdist_rpm": {
        "*": {}
    },
    "bench": {
        "*": {
            "compare_functions_1v": {
                "args": [
                    {
                        "name": "func"
                    },
                    {
                        "default": "500",
                        "name": "nloop"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "xs",
                        "name": "xs"
                    },
                    {
                        "default": "nmxs",
                        "name": "nmxs"
                    },
                    {
                        "default": "xl",
                        "name": "xl"
                    },
                    {
                        "default": "nmxl",
                        "name": "nmxl"
                    }
                ]
            },
            "compare_functions_2v": {
                "args": [
                    {
                        "name": "func"
                    },
                    {
                        "default": "500",
                        "name": "nloop"
                    },
                    {
                        "default": "True",
                        "name": "test"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "xs",
                        "name": "xs"
                    },
                    {
                        "default": "nmxs",
                        "name": "nmxs"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "ys",
                        "name": "ys"
                    },
                    {
                        "default": "nmys",
                        "name": "nmys"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "xl",
                        "name": "xl"
                    },
                    {
                        "default": "nmxl",
                        "name": "nmxl"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "yl",
                        "name": "yl"
                    },
                    {
                        "default": "nmyl",
                        "name": "nmyl"
                    }
                ]
            },
            "compare_methods": {
                "args": [
                    {
                        "name": "methodname"
                    },
                    {
                        "name": "args"
                    },
                    {
                        "default": "'x'",
                        "name": "vars"
                    },
                    {
                        "default": "500",
                        "name": "nloop"
                    },
                    {
                        "default": "True",
                        "name": "test"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "xs",
                        "name": "xs"
                    },
                    {
                        "default": "nmxs",
                        "name": "nmxs"
                    },
                    {
                        "default": "xl",
                        "name": "xl"
                    },
                    {
                        "default": "nmxl",
                        "name": "nmxl"
                    }
                ]
            },
            "timer": {
                "args": [
                    {
                        "name": "s"
                    },
                    {
                        "default": "''",
                        "name": "v"
                    },
                    {
                        "default": "500",
                        "name": "nloop"
                    },
                    {
                        "default": "3",
                        "name": "nrep"
                    }
                ]
            }
        }
    },
    "build": {
        "*": {}
    },
    "build_clib": {
        "*": {}
    },
    "build_ext": {
        "*": {}
    },
    "build_py": {
        "*": {}
    },
    "build_scripts": {
        "*": {}
    },
    "build_src": {
        "*": {
            "have_pyrex": {
                "args": [
                    {
                        "name": ""
                    }
                ]
            },
            "subst_vars": {
                "args": [
                    {
                        "name": "target"
                    },
                    {
                        "name": "source"
                    },
                    {
                        "name": "d"
                    }
                ]
            }
        }
    },
    "capi_maps": {
        "*": {
            "cb_routsign2map": {
                "args": [
                    {
                        "name": "rout"
                    },
                    {
                        "name": "um"
                    }
                ]
            },
            "cb_sign2map": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "var"
                    },
                    {
                        "default": "None",
                        "name": "index"
                    }
                ]
            },
            "common_sign2map": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "var): # obsolute"
                    }
                ]
            },
            "getarrdims": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "var"
                    },
                    {
                        "default": "0",
                        "name": "verbose"
                    }
                ]
            },
            "getarrdocsign": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "var"
                    }
                ]
            },
            "getctype": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "getinit": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "var"
                    }
                ]
            },
            "getpydocsign": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "var"
                    }
                ]
            },
            "getstrlength": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "modsign2map": {
                "args": [
                    {
                        "name": "m"
                    }
                ]
            },
            "routsign2map": {
                "args": [
                    {
                        "name": "rout"
                    }
                ]
            },
            "sign2map": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "var"
                    }
                ]
            }
        }
    },
    "cb_rules": {
        "*": {
            "buildcallback": {
                "args": [
                    {
                        "name": "rout"
                    },
                    {
                        "name": "um"
                    }
                ]
            },
            "buildcallbacks": {
                "args": [
                    {
                        "name": "m"
                    }
                ]
            }
        }
    },
    "ccompiler": {
        "*": {
            "": {
                "args": [
                    {
                        "name": "macros"
                    },
                    {
                        "name": "include_dirs"
                    }
                ]
            },
            "CCompiler_compile": {
                "args": [
                    {
                        "name": "sources"
                    },
                    {
                        "default": "None",
                        "name": "output_dir"
                    },
                    {
                        "default": "None",
                        "name": "macros"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "None",
                        "name": "include_dirs"
                    },
                    {
                        "default": "0",
                        "name": "debug"
                    },
                    {
                        "default": "None",
                        "name": "extra_preargs"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "None",
                        "name": "extra_postargs"
                    },
                    {
                        "default": "None",
                        "name": "depends"
                    }
                ]
            },
            "CCompiler_customize": {
                "args": [
                    {
                        "name": "dist"
                    },
                    {
                        "default": "0",
                        "name": "need_cxx"
                    }
                ]
            },
            "CCompiler_customize_cmd": {
                "args": [
                    {
                        "name": "cmd"
                    },
                    {
                        "default": "(",
                        "name": "ignore"
                    }
                ]
            },
            "CCompiler_cxx_compiler": {
                "args": []
            },
            "CCompiler_get_version": {
                "args": [
                    {
                        "default": "False",
                        "name": "force"
                    },
                    {
                        "default": "[0]",
                        "name": "ok_status"
                    }
                ]
            },
            "CCompiler_object_filenames": {
                "args": [
                    {
                        "name": "source_filenames"
                    },
                    {
                        "default": "0",
                        "name": "strip_dir"
                    },
                    {
                        "default": "''",
                        "name": "output_dir"
                    }
                ]
            },
            "CCompiler_show_customization": {
                "args": []
            },
            "CCompiler_spawn": {
                "args": [
                    {
                        "name": "cmd"
                    },
                    {
                        "default": "None",
                        "name": "display"
                    }
                ]
            },
            "_compiler_to_string": {
                "args": [
                    {
                        "name": "compiler"
                    }
                ]
            },
            "allow": {
                "args": [
                    {
                        "name": "attr"
                    }
                ]
            },
            "gen_lib_options": {
                "args": [
                    {
                        "name": "compiler"
                    },
                    {
                        "name": "library_dirs"
                    },
                    {
                        "name": "runtime_library_dirs"
                    },
                    {
                        "name": "libraries"
                    }
                ]
            },
            "matcher": {
                "args": [
                    {
                        "name": "version_string"
                    }
                ]
            },
            "replace_method": {
                "args": [
                    {
                        "name": "klass"
                    },
                    {
                        "name": "method_name"
                    },
                    {
                        "name": "func"
                    }
                ]
            },
            "simple_version_match": {
                "args": [
                    {
                        "default": "r'[-.\\d]+'",
                        "name": "pat"
                    },
                    {
                        "default": "''",
                        "name": "ignore"
                    },
                    {
                        "default": "''",
                        "name": "start"
                    }
                ]
            },
            "split_quoted": {
                "args": [
                    {
                        "name": "s"
                    }
                ]
            }
        }
    },
    "cfuncs": {
        "*": {
            "append_needs": {
                "args": [
                    {
                        "name": "need"
                    },
                    {
                        "default": "1",
                        "name": "flag"
                    }
                ]
            },
            "buildcfuncs": {
                "args": [
                    {
                        "name": ""
                    }
                ]
            },
            "get_needs": {
                "args": [
                    {
                        "name": ""
                    }
                ]
            }
        }
    },
    "chebyshev": {
        "*": {
            "_cseries_to_zseries": {
                "args": [
                    {
                        "name": "c) :"
                    },
                    {
                        "name": "\"\"\"Covert Chebyshev series to z-series."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Covert a Chebyshev series to the equivalent z-series. The result is"
                    },
                    {
                        "name": "never an empty array. The dtype of the return is the same as that of"
                    },
                    {
                        "name": "the input. No checks are run on the arguments as this routine is for"
                    },
                    {
                        "name": "internal use."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "c : 1-D ndarray"
                    },
                    {
                        "name": "Chebyshev coefficients"
                    },
                    {
                        "name": "ordered from low to high"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "zs : 1-D ndarray"
                    },
                    {
                        "name": "Odd length symmetric z-series"
                    },
                    {
                        "name": "ordered from  low to high."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "default": " c.size",
                        "name": "n "
                    },
                    {
                        "default": " np.zeros(2*n-1",
                        "name": "zs "
                    },
                    {
                        "default": "c.dtype)",
                        "name": "dtype"
                    },
                    {
                        "default": " c/2",
                        "name": "zs[n-1:] "
                    },
                    {
                        "name": "return zs + zs[::-1]"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def _zseries_to_cseries(zs) :"
                    },
                    {
                        "name": "\"\"\"Covert z-series to a Chebyshev series."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Covert a z series to the equivalent Chebyshev series. The result is"
                    },
                    {
                        "name": "never an empty array. The dtype of the return is the same as that of"
                    },
                    {
                        "name": "the input. No checks are run on the arguments as this routine is for"
                    },
                    {
                        "name": "internal use."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "zs : 1-D ndarray"
                    },
                    {
                        "name": "Odd length symmetric z-series"
                    },
                    {
                        "name": "ordered from  low to high."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "c : 1-D ndarray"
                    },
                    {
                        "name": "Chebyshev coefficients"
                    },
                    {
                        "name": "ordered from  low to high."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "default": " (zs.size + 1)//2",
                        "name": "n "
                    },
                    {
                        "default": " zs[n-1:].copy()",
                        "name": "c "
                    },
                    {
                        "default": " 2",
                        "name": "c[1:n] *"
                    },
                    {
                        "name": "return c"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def _zseries_mul(z1"
                    },
                    {
                        "name": "z2) :"
                    },
                    {
                        "name": "\"\"\"Multiply two z-series."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Multiply two z-series to produce a z-series."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "z1"
                    },
                    {
                        "name": "z2 : 1-D ndarray"
                    },
                    {
                        "name": "The arrays must be 1-D but this is not checked."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "product : 1-D ndarray"
                    },
                    {
                        "name": "The product z-series."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Notes"
                    },
                    {
                        "name": "-----"
                    },
                    {
                        "name": "This is simply convolution. If symmetric/anti-symmetric z-series are"
                    },
                    {
                        "name": "denoted by S/A then the following rules apply:"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "S*S"
                    },
                    {
                        "name": "A*A -> S"
                    },
                    {
                        "name": "S*A"
                    },
                    {
                        "name": "A*S -> A"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "name": "return np.convolve(z1"
                    },
                    {
                        "name": "z2)"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def _zseries_div(z1"
                    },
                    {
                        "name": "z2) :"
                    },
                    {
                        "name": "\"\"\"Divide the first z-series by the second."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Divide `z1` by `z2` and return the quotient and remainder as z-series."
                    },
                    {
                        "name": "Warning: this implementation only applies when both z1 and z2 have the"
                    },
                    {
                        "name": "same symmetry"
                    },
                    {
                        "name": "which is sufficient for present purposes."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "z1"
                    },
                    {
                        "name": "z2 : 1-D ndarray"
                    },
                    {
                        "name": "The arrays must be 1-D and have the same symmetry"
                    },
                    {
                        "name": "but this is not"
                    },
                    {
                        "name": "checked."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "(quotient"
                    },
                    {
                        "name": "remainder) : 1-D ndarrays"
                    },
                    {
                        "name": "Quotient and remainder as z-series."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Notes"
                    },
                    {
                        "name": "-----"
                    },
                    {
                        "name": "This is not the same as polynomial division on account of the desired form"
                    },
                    {
                        "name": "of the remainder. If symmetric/anti-symmetric z-series are denoted by S/A"
                    },
                    {
                        "name": "then the following rules apply:"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "S/S -> S"
                    },
                    {
                        "name": "S"
                    },
                    {
                        "name": "A/A -> S"
                    },
                    {
                        "name": "A"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "The restriction to types of the same symmetry could be fixed but seems like"
                    },
                    {
                        "name": "unneeded generality. There is no natural form for the remainder in the case"
                    },
                    {
                        "name": "where there is no symmetry."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "default": " z1.copy()",
                        "name": "z1 "
                    },
                    {
                        "default": " z2.copy()",
                        "name": "z2 "
                    },
                    {
                        "default": " len(z1)",
                        "name": "len1 "
                    },
                    {
                        "default": " len(z2)",
                        "name": "len2 "
                    },
                    {
                        "default": "= 1 :",
                        "name": "if len2 "
                    },
                    {
                        "default": " z2",
                        "name": "z1 /"
                    },
                    {
                        "name": "return z1"
                    },
                    {
                        "name": "z1[:1]*0"
                    },
                    {
                        "name": "elif len1 < len2 :"
                    },
                    {
                        "name": "return z1[:1]*0"
                    },
                    {
                        "name": "z1"
                    },
                    {
                        "name": "else :"
                    },
                    {
                        "default": " len1 - len2",
                        "name": "dlen "
                    },
                    {
                        "default": " z2[0]",
                        "name": "scl "
                    },
                    {
                        "default": " scl",
                        "name": "z2 /"
                    },
                    {
                        "default": " np.empty(dlen + 1",
                        "name": "quo "
                    },
                    {
                        "default": "z1.dtype)",
                        "name": "dtype"
                    },
                    {
                        "default": " 0",
                        "name": "i "
                    },
                    {
                        "default": " dlen",
                        "name": "j "
                    },
                    {
                        "name": "while i < j :"
                    },
                    {
                        "default": " z1[i]",
                        "name": "r "
                    },
                    {
                        "default": " z1[i]",
                        "name": "quo[i] "
                    },
                    {
                        "default": " r",
                        "name": "quo[dlen - i] "
                    },
                    {
                        "default": " r*z2",
                        "name": "tmp "
                    },
                    {
                        "default": " tmp",
                        "name": "z1[i:i+len2] -"
                    },
                    {
                        "default": " tmp",
                        "name": "z1[j:j+len2] -"
                    },
                    {
                        "default": " 1",
                        "name": "i +"
                    },
                    {
                        "default": " 1",
                        "name": "j -"
                    },
                    {
                        "default": " z1[i]",
                        "name": "r "
                    },
                    {
                        "default": " r",
                        "name": "quo[i] "
                    },
                    {
                        "default": " r*z2",
                        "name": "tmp "
                    },
                    {
                        "default": " tmp",
                        "name": "z1[i:i+len2] -"
                    },
                    {
                        "default": " scl",
                        "name": "quo /"
                    },
                    {
                        "default": " z1[i+1:i-1+len2].copy()",
                        "name": "rem "
                    },
                    {
                        "name": "return quo"
                    },
                    {
                        "name": "rem"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def _zseries_der(zs) :"
                    },
                    {
                        "name": "\"\"\"Differentiate a z-series."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "The derivative is with respect to x"
                    },
                    {
                        "name": "not z. This is achieved using the"
                    },
                    {
                        "name": "chain rule and the value of dx/dz given in the module notes."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "zs : z-series"
                    },
                    {
                        "name": "The z-series to differentiate."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "derivative : z-series"
                    },
                    {
                        "name": "The derivative"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Notes"
                    },
                    {
                        "name": "-----"
                    },
                    {
                        "name": "The zseries for x (ns) has been multiplied by two in order to avoid"
                    },
                    {
                        "name": "using floats that are incompatible with Decimal and likely other"
                    },
                    {
                        "name": "specialized scalar types. This scaling has been compensated by"
                    },
                    {
                        "name": "multiplying the value of zs by two also so that the two cancels in the"
                    },
                    {
                        "name": "division."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "default": " len(zs)//2",
                        "name": "n "
                    },
                    {
                        "default": " np.array([-1",
                        "name": "ns "
                    },
                    {
                        "name": "0"
                    },
                    {
                        "name": "1]"
                    },
                    {
                        "default": "zs.dtype)",
                        "name": "dtype"
                    },
                    {
                        "default": " np.arange(-n",
                        "name": "zs *"
                    },
                    {
                        "name": "n+1)*2"
                    },
                    {
                        "name": "d"
                    },
                    {
                        "default": " _zseries_div(zs",
                        "name": "r "
                    },
                    {
                        "name": "ns)"
                    },
                    {
                        "name": "return d"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def _zseries_int(zs) :"
                    },
                    {
                        "name": "\"\"\"Integrate a z-series."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "The integral is with respect to x"
                    },
                    {
                        "name": "not z. This is achieved by a change"
                    },
                    {
                        "name": "of variable using dx/dz given in the module notes."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "zs : z-series"
                    },
                    {
                        "name": "The z-series to integrate"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "integral : z-series"
                    },
                    {
                        "name": "The indefinite integral"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Notes"
                    },
                    {
                        "name": "-----"
                    },
                    {
                        "name": "The zseries for x (ns) has been multiplied by two in order to avoid"
                    },
                    {
                        "name": "using floats that are incompatible with Decimal and likely other"
                    },
                    {
                        "name": "specialized scalar types. This scaling has been compensated by"
                    },
                    {
                        "name": "dividing the resulting zs by two."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "default": " 1 + len(zs)//2",
                        "name": "n "
                    },
                    {
                        "default": " np.array([-1",
                        "name": "ns "
                    },
                    {
                        "name": "0"
                    },
                    {
                        "name": "1]"
                    },
                    {
                        "default": "zs.dtype)",
                        "name": "dtype"
                    },
                    {
                        "default": " _zseries_mul(zs",
                        "name": "zs "
                    },
                    {
                        "name": "ns)"
                    },
                    {
                        "default": " np.arange(-n",
                        "name": "div "
                    },
                    {
                        "name": "n+1)*2"
                    },
                    {
                        "default": " div[:n]",
                        "name": "zs[:n] /"
                    },
                    {
                        "default": " div[n+1:]",
                        "name": "zs[n+1:] /"
                    },
                    {
                        "default": " 0",
                        "name": "zs[n] "
                    },
                    {
                        "name": "return zs"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "#"
                    },
                    {
                        "name": "# Chebyshev series functions"
                    },
                    {
                        "name": "#"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def poly2cheb(pol) :"
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "name": "Convert a polynomial to a Chebyshev series."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Convert an array representing the coefficients of a polynomial (relative"
                    },
                    {
                        "name": "to the \"standard\" basis) ordered from lowest degree to highest"
                    },
                    {
                        "name": "to an"
                    },
                    {
                        "name": "array of the coefficients of the equivalent Chebyshev series"
                    },
                    {
                        "name": "ordered"
                    },
                    {
                        "name": "from lowest to highest degree."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "pol : array_like"
                    },
                    {
                        "name": "1-D array containing the polynomial coefficients"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "c : ndarray"
                    },
                    {
                        "name": "1-D array containing the coefficients of the equivalent Chebyshev"
                    },
                    {
                        "name": "series."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "See Also"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": "cheb2poly"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Notes"
                    },
                    {
                        "name": "-----"
                    },
                    {
                        "name": "The easy way to do conversions between polynomial basis sets"
                    },
                    {
                        "name": "is to use the convert method of a class instance."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Examples"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": ">>> from numpy import polynomial as P"
                    },
                    {
                        "default": " P.Polynomial(range(4))",
                        "name": ">>> p "
                    },
                    {
                        "name": ">>> p"
                    },
                    {
                        "name": "Polynomial([ 0."
                    },
                    {
                        "name": "1."
                    },
                    {
                        "name": "2."
                    },
                    {
                        "name": "3.]"
                    },
                    {
                        "name": "[-1."
                    },
                    {
                        "name": "1.])"
                    },
                    {
                        "default": " p.convert(kind=P.Chebyshev)",
                        "name": ">>> c "
                    },
                    {
                        "name": ">>> c"
                    },
                    {
                        "name": "Chebyshev([ 1."
                    },
                    {
                        "name": "3.25"
                    },
                    {
                        "name": "1."
                    },
                    {
                        "name": "0.75]"
                    },
                    {
                        "name": "[-1."
                    },
                    {
                        "name": "1.])"
                    },
                    {
                        "name": ">>> P.poly2cheb(range(4))"
                    },
                    {
                        "name": "array([ 1."
                    },
                    {
                        "name": "3.25"
                    },
                    {
                        "name": "1."
                    },
                    {
                        "name": "0.75])"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "default": " pu.as_series([pol])",
                        "name": "[pol] "
                    },
                    {
                        "default": " len(pol) - 1",
                        "name": "deg "
                    },
                    {
                        "default": " 0",
                        "name": "res "
                    },
                    {
                        "name": "for i in range(deg"
                    },
                    {
                        "name": "-1"
                    },
                    {
                        "name": "-1) :"
                    },
                    {
                        "default": " chebadd(chebmulx(res)",
                        "name": "res "
                    },
                    {
                        "name": "pol[i])"
                    },
                    {
                        "name": "return res"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def cheb2poly(c) :"
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "name": "Convert a Chebyshev series to a polynomial."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Convert an array representing the coefficients of a Chebyshev series"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "ordered from lowest degree to highest"
                    },
                    {
                        "name": "to an array of the coefficients"
                    },
                    {
                        "name": "of the equivalent polynomial (relative to the \"standard\" basis) ordered"
                    },
                    {
                        "name": "from lowest to highest degree."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "c : array_like"
                    },
                    {
                        "name": "1-D array containing the Chebyshev series coefficients"
                    },
                    {
                        "name": "ordered"
                    },
                    {
                        "name": "from lowest order term to highest."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "pol : ndarray"
                    },
                    {
                        "name": "1-D array containing the coefficients of the equivalent polynomial"
                    },
                    {
                        "name": "(relative to the \"standard\" basis) ordered from lowest order term"
                    },
                    {
                        "name": "to highest."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "See Also"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": "poly2cheb"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Notes"
                    },
                    {
                        "name": "-----"
                    },
                    {
                        "name": "The easy way to do conversions between polynomial basis sets"
                    },
                    {
                        "name": "is to use the convert method of a class instance."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Examples"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": ">>> from numpy import polynomial as P"
                    },
                    {
                        "default": " P.Chebyshev(range(4))",
                        "name": ">>> c "
                    },
                    {
                        "name": ">>> c"
                    },
                    {
                        "name": "Chebyshev([ 0."
                    },
                    {
                        "name": "1."
                    },
                    {
                        "name": "2."
                    },
                    {
                        "name": "3.]"
                    },
                    {
                        "name": "[-1."
                    },
                    {
                        "name": "1.])"
                    },
                    {
                        "default": " c.convert(kind=P.Polynomial)",
                        "name": ">>> p "
                    },
                    {
                        "name": ">>> p"
                    },
                    {
                        "name": "Polynomial([ -2."
                    },
                    {
                        "name": "-8."
                    },
                    {
                        "name": "4."
                    },
                    {
                        "name": "12.]"
                    },
                    {
                        "name": "[-1."
                    },
                    {
                        "name": "1.])"
                    },
                    {
                        "name": ">>> P.cheb2poly(range(4))"
                    },
                    {
                        "name": "array([ -2."
                    },
                    {
                        "name": "-8."
                    },
                    {
                        "name": "4."
                    },
                    {
                        "name": "12.])"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "name": "from .polynomial import polyadd"
                    },
                    {
                        "name": "polysub"
                    },
                    {
                        "name": "polymulx"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " pu.as_series([c])",
                        "name": "[c] "
                    },
                    {
                        "default": " len(c)",
                        "name": "n "
                    },
                    {
                        "name": "if n < 3:"
                    },
                    {
                        "name": "return c"
                    },
                    {
                        "name": "else:"
                    },
                    {
                        "default": " c[-2]",
                        "name": "c0 "
                    },
                    {
                        "default": " c[-1]",
                        "name": "c1 "
                    },
                    {
                        "name": "# i is the current degree of c1"
                    },
                    {
                        "name": "for i in range(n - 1"
                    },
                    {
                        "name": "1"
                    },
                    {
                        "name": "-1) :"
                    },
                    {
                        "default": " c0",
                        "name": "tmp "
                    },
                    {
                        "default": " polysub(c[i - 2]",
                        "name": "c0 "
                    },
                    {
                        "name": "c1)"
                    },
                    {
                        "default": " polyadd(tmp",
                        "name": "c1 "
                    },
                    {
                        "name": "polymulx(c1)*2)"
                    },
                    {
                        "name": "return polyadd(c0"
                    },
                    {
                        "name": "polymulx(c1))"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "#"
                    },
                    {
                        "name": "# These are constant arrays are of integer type so as to be compatible"
                    },
                    {
                        "name": "# with the widest range of other types"
                    },
                    {
                        "name": "such as Decimal."
                    },
                    {
                        "name": "#"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "# Chebyshev default domain."
                    },
                    {
                        "default": " np.array([-1",
                        "name": "chebdomain "
                    },
                    {
                        "name": "1])"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "# Chebyshev coefficients representing zero."
                    },
                    {
                        "default": " np.array([0])",
                        "name": "chebzero "
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "# Chebyshev coefficients representing one."
                    },
                    {
                        "default": " np.array([1])",
                        "name": "chebone "
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "# Chebyshev coefficients representing the identity x."
                    },
                    {
                        "default": " np.array([0",
                        "name": "chebx "
                    },
                    {
                        "name": "1])"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def chebline(off"
                    },
                    {
                        "name": "scl) :"
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "name": "Chebyshev series whose graph is a straight line."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "off"
                    },
                    {
                        "name": "scl : scalars"
                    },
                    {
                        "name": "The specified line is given by ``off + scl*x``."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "y : ndarray"
                    },
                    {
                        "name": "This module's representation of the Chebyshev series for"
                    },
                    {
                        "name": "``off + scl*x``."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "See Also"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": "polyline"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Examples"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": ">>> import numpy.polynomial.chebyshev as C"
                    },
                    {
                        "name": ">>> C.chebline(3"
                    },
                    {
                        "name": "2)"
                    },
                    {
                        "name": "array([3"
                    },
                    {
                        "name": "2])"
                    },
                    {
                        "name": ">>> C.chebval(-3"
                    },
                    {
                        "name": "C.chebline(3"
                    },
                    {
                        "name": "2)) # should be -3"
                    },
                    {
                        "name": "-3.0"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "default": " 0 :",
                        "name": "if scl !"
                    },
                    {
                        "name": "return np.array([off"
                    },
                    {
                        "name": "scl])"
                    },
                    {
                        "name": "else :"
                    },
                    {
                        "name": "return np.array([off])"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def chebfromroots(roots) :"
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "name": "Generate a Chebyshev series with given roots."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "The function returns the coefficients of the polynomial"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " (x - r_0) * (x - r_1) * ... * (x - r_n)",
                        "name": ".. math:: p(x) "
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "in Chebyshev form"
                    },
                    {
                        "name": "where the `r_n` are the roots specified in `roots`."
                    },
                    {
                        "name": "If a zero has multiplicity n"
                    },
                    {
                        "name": "then it must appear in `roots` n times."
                    },
                    {
                        "name": "For instance"
                    },
                    {
                        "name": "if 2 is a root of multiplicity three and 3 is a root of"
                    },
                    {
                        "name": "multiplicity 2"
                    },
                    {
                        "name": "then `roots` looks something like [2"
                    },
                    {
                        "name": "2"
                    },
                    {
                        "name": "2"
                    },
                    {
                        "name": "3"
                    },
                    {
                        "name": "3]. The"
                    },
                    {
                        "name": "roots can appear in any order."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "If the returned coefficients are `c`"
                    },
                    {
                        "name": "then"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " c_0 + c_1 * T_1(x) + ... +  c_n * T_n(x)",
                        "name": ".. math:: p(x) "
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "The coefficient of the last term is not generally 1 for monic"
                    },
                    {
                        "name": "polynomials in Chebyshev form."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "roots : array_like"
                    },
                    {
                        "name": "Sequence containing the roots."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "out : ndarray"
                    },
                    {
                        "name": "1-D array of coefficients.  If all roots are real then `out` is a"
                    },
                    {
                        "name": "real array"
                    },
                    {
                        "name": "if some of the roots are complex"
                    },
                    {
                        "name": "then `out` is complex"
                    },
                    {
                        "name": "even if all the coefficients in the result are real (see Examples"
                    },
                    {
                        "name": "below)."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "See Also"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": "polyfromroots"
                    },
                    {
                        "name": "legfromroots"
                    },
                    {
                        "name": "lagfromroots"
                    },
                    {
                        "name": "hermfromroots"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "hermefromroots."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Examples"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": ">>> import numpy.polynomial.chebyshev as C"
                    },
                    {
                        "name": ">>> C.chebfromroots((-1"
                    },
                    {
                        "name": "0"
                    },
                    {
                        "name": "1)) # x^3 - x relative to the standard basis"
                    },
                    {
                        "name": "array([ 0."
                    },
                    {
                        "name": "-0.25"
                    },
                    {
                        "name": "0."
                    },
                    {
                        "name": "0.25])"
                    },
                    {
                        "default": " complex(0",
                        "name": ">>> j "
                    },
                    {
                        "name": "1)"
                    },
                    {
                        "name": ">>> C.chebfromroots((-j"
                    },
                    {
                        "name": "j)) # x^2 + 1 relative to the standard basis"
                    },
                    {
                        "name": "array([ 1.5+0.j"
                    },
                    {
                        "name": "0.0+0.j"
                    },
                    {
                        "name": "0.5+0.j])"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "default": "= 0 :",
                        "name": "if len(roots) "
                    },
                    {
                        "name": "return np.ones(1)"
                    },
                    {
                        "name": "else :"
                    },
                    {
                        "default": " pu.as_series([roots]",
                        "name": "[roots] "
                    },
                    {
                        "default": "False)",
                        "name": "trim"
                    },
                    {
                        "name": "roots.sort()"
                    },
                    {
                        "default": " [chebline(-r",
                        "name": "p "
                    },
                    {
                        "name": "1) for r in roots]"
                    },
                    {
                        "default": " len(p)",
                        "name": "n "
                    },
                    {
                        "name": "while n > 1:"
                    },
                    {
                        "name": "m"
                    },
                    {
                        "default": " divmod(n",
                        "name": "r "
                    },
                    {
                        "name": "2)"
                    },
                    {
                        "default": " [chebmul(p[i]",
                        "name": "tmp "
                    },
                    {
                        "name": "p[i+m]) for i in range(m)]"
                    },
                    {
                        "name": "if r:"
                    },
                    {
                        "default": " chebmul(tmp[0]",
                        "name": "tmp[0] "
                    },
                    {
                        "name": "p[-1])"
                    },
                    {
                        "default": " tmp",
                        "name": "p "
                    },
                    {
                        "default": " m",
                        "name": "n "
                    },
                    {
                        "name": "return p[0]"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def chebadd(c1"
                    },
                    {
                        "name": "c2"
                    }
                ]
            },
            "chebcompanion": {
                "args": [
                    {
                        "name": "c"
                    }
                ]
            },
            "chebdiv": {
                "args": [
                    {
                        "name": "c1"
                    },
                    {
                        "name": "c2"
                    }
                ]
            },
            "chebgauss": {
                "args": [
                    {
                        "name": "deg"
                    }
                ]
            },
            "chebgrid2d": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "c"
                    }
                ]
            },
            "chebgrid3d": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z"
                    },
                    {
                        "name": "c"
                    }
                ]
            },
            "chebint": {
                "args": [
                    {
                        "name": "c"
                    },
                    {
                        "default": "1",
                        "name": "m"
                    },
                    {
                        "default": "[]",
                        "name": "k"
                    },
                    {
                        "default": "0",
                        "name": "lbnd"
                    },
                    {
                        "default": "1",
                        "name": "scl"
                    },
                    {
                        "default": "0",
                        "name": "axis"
                    }
                ]
            },
            "chebmul": {
                "args": [
                    {
                        "name": "c1"
                    },
                    {
                        "name": "c2"
                    }
                ]
            },
            "chebmulx": {
                "args": [
                    {
                        "name": "c"
                    }
                ]
            },
            "chebpow": {
                "args": [
                    {
                        "name": "c"
                    },
                    {
                        "name": "pow"
                    },
                    {
                        "default": "16) :",
                        "name": "maxpower"
                    },
                    {
                        "name": "\"\"\"Raise a Chebyshev series to a power."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns the Chebyshev series `c` raised to the power `pow`. The"
                    },
                    {
                        "name": "argument `c` is a sequence of coefficients ordered from low to high."
                    },
                    {
                        "name": "i.e."
                    },
                    {
                        "name": "[1"
                    },
                    {
                        "name": "2"
                    },
                    {
                        "name": "3] is the series  ``T_0 + 2*T_1 + 3*T_2.``"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "c : array_like"
                    },
                    {
                        "name": "1-D array of Chebyshev series coefficients ordered from low to"
                    },
                    {
                        "name": "high."
                    },
                    {
                        "name": "pow : integer"
                    },
                    {
                        "name": "Power to which the series will be raised"
                    },
                    {
                        "name": "maxpower : integer"
                    },
                    {
                        "name": "optional"
                    },
                    {
                        "name": "Maximum power allowed. This is mainly to limit growth of the series"
                    },
                    {
                        "name": "to unmanageable size. Default is 16"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "coef : ndarray"
                    },
                    {
                        "name": "Chebyshev series of power."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "See Also"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": "chebadd"
                    },
                    {
                        "name": "chebsub"
                    },
                    {
                        "name": "chebmul"
                    },
                    {
                        "name": "chebdiv"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Examples"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "name": "# c is a trimmed copy"
                    },
                    {
                        "default": " pu.as_series([c])",
                        "name": "[c] "
                    },
                    {
                        "default": " int(pow)",
                        "name": "power "
                    },
                    {
                        "default": " pow or power < 0 :",
                        "name": "if power !"
                    },
                    {
                        "name": "raise ValueError(\"Power must be a non-negative integer.\")"
                    },
                    {
                        "name": "elif maxpower is not None and power > maxpower :"
                    },
                    {
                        "name": "raise ValueError(\"Power is too large\")"
                    },
                    {
                        "default": "= 0 :",
                        "name": "elif power "
                    },
                    {
                        "name": "return np.array([1]"
                    },
                    {
                        "default": "c.dtype)",
                        "name": "dtype"
                    },
                    {
                        "default": "= 1 :",
                        "name": "elif power "
                    },
                    {
                        "name": "return c"
                    },
                    {
                        "name": "else :"
                    },
                    {
                        "name": "# This can be made more efficient by using powers of two"
                    },
                    {
                        "name": "# in the usual way."
                    },
                    {
                        "default": " _cseries_to_zseries(c)",
                        "name": "zs "
                    },
                    {
                        "default": " zs",
                        "name": "prd "
                    },
                    {
                        "name": "for i in range(2"
                    },
                    {
                        "name": "power + 1) :"
                    },
                    {
                        "default": " np.convolve(prd",
                        "name": "prd "
                    },
                    {
                        "name": "zs)"
                    },
                    {
                        "name": "return _zseries_to_cseries(prd)"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def chebder(c"
                    },
                    {
                        "default": "1",
                        "name": "m"
                    },
                    {
                        "default": "1",
                        "name": "scl"
                    },
                    {
                        "default": "0) :",
                        "name": "axis"
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "name": "Differentiate a Chebyshev series."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns the Chebyshev series coefficients `c` differentiated `m` times"
                    },
                    {
                        "name": "along `axis`.  At each iteration the result is multiplied by `scl` (the"
                    },
                    {
                        "name": "scaling factor is for use in a linear change of variable). The argument"
                    },
                    {
                        "name": "`c` is an array of coefficients from low to high degree along each"
                    },
                    {
                        "name": "axis"
                    },
                    {
                        "name": "e.g."
                    },
                    {
                        "name": "[1"
                    },
                    {
                        "name": "2"
                    },
                    {
                        "name": "3] represents the series ``1*T_0 + 2*T_1 + 3*T_2``"
                    },
                    {
                        "name": "while [[1"
                    },
                    {
                        "name": "2]"
                    },
                    {
                        "name": "[1"
                    },
                    {
                        "name": "2]] represents ``1*T_0(x)*T_0(y) + 1*T_1(x)*T_0(y) +"
                    },
                    {
                        "default": "0 is ``x`` and axis=1 is",
                        "name": "2*T_0(x)*T_1(y) + 2*T_1(x)*T_1(y)`` if axis"
                    },
                    {
                        "name": "``y``."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "c : array_like"
                    },
                    {
                        "name": "Array of Chebyshev series coefficients. If c is multidimensional"
                    },
                    {
                        "name": "the different axis correspond to different variables with the"
                    },
                    {
                        "name": "degree in each axis given by the corresponding index."
                    },
                    {
                        "name": "m : int"
                    },
                    {
                        "name": "optional"
                    },
                    {
                        "name": "Number of derivatives taken"
                    },
                    {
                        "name": "must be non-negative. (Default: 1)"
                    },
                    {
                        "name": "scl : scalar"
                    },
                    {
                        "name": "optional"
                    },
                    {
                        "name": "Each differentiation is multiplied by `scl`.  The end result is"
                    },
                    {
                        "name": "multiplication by ``scl**m``.  This is for use in a linear change of"
                    },
                    {
                        "name": "variable. (Default: 1)"
                    },
                    {
                        "name": "axis : int"
                    },
                    {
                        "name": "optional"
                    },
                    {
                        "name": "Axis over which the derivative is taken. (Default: 0)."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ".. versionadded:: 1.7.0"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "der : ndarray"
                    },
                    {
                        "name": "Chebyshev series of the derivative."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "See Also"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": "chebint"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Notes"
                    },
                    {
                        "name": "-----"
                    },
                    {
                        "name": "In general"
                    },
                    {
                        "name": "the result of differentiating a C-series needs to be"
                    },
                    {
                        "name": "\"reprojected\" onto the C-series basis set. Thus"
                    },
                    {
                        "name": "typically"
                    },
                    {
                        "name": "the"
                    },
                    {
                        "name": "result of this function is \"unintuitive"
                    },
                    {
                        "name": "\" albeit correct; see Examples"
                    },
                    {
                        "name": "section below."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Examples"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": ">>> from numpy.polynomial import chebyshev as C"
                    },
                    {
                        "default": " (1",
                        "name": ">>> c "
                    },
                    {
                        "name": "2"
                    },
                    {
                        "name": "3"
                    },
                    {
                        "name": "4)"
                    },
                    {
                        "name": ">>> C.chebder(c)"
                    },
                    {
                        "name": "array([ 14."
                    },
                    {
                        "name": "12."
                    },
                    {
                        "name": "24.])"
                    },
                    {
                        "name": ">>> C.chebder(c"
                    },
                    {
                        "name": "3)"
                    },
                    {
                        "name": "array([ 96.])"
                    },
                    {
                        "name": ">>> C.chebder(c"
                    },
                    {
                        "default": "-1)",
                        "name": "scl"
                    },
                    {
                        "name": "array([-14."
                    },
                    {
                        "name": "-12."
                    },
                    {
                        "name": "-24.])"
                    },
                    {
                        "name": ">>> C.chebder(c"
                    },
                    {
                        "name": "2"
                    },
                    {
                        "name": "-1)"
                    },
                    {
                        "name": "array([ 12."
                    },
                    {
                        "name": "96.])"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "default": " np.array(c",
                        "name": "c "
                    },
                    {
                        "default": "1",
                        "name": "ndmin"
                    },
                    {
                        "default": "1)",
                        "name": "copy"
                    },
                    {
                        "name": "if c.dtype.char in '?bBhHiIlLqQpP':"
                    },
                    {
                        "default": " c.astype(np.double)",
                        "name": "c "
                    },
                    {
                        "name": "cnt"
                    },
                    {
                        "default": " [int(t) for t in [m",
                        "name": "iaxis "
                    },
                    {
                        "name": "axis]]"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " m:",
                        "name": "if cnt !"
                    },
                    {
                        "name": "raise ValueError(\"The order of derivation must be integer\")"
                    },
                    {
                        "name": "if cnt < 0:"
                    },
                    {
                        "name": "raise ValueError(\"The order of derivation must be non-negative\")"
                    },
                    {
                        "default": " axis:",
                        "name": "if iaxis !"
                    },
                    {
                        "name": "raise ValueError(\"The axis must be integer\")"
                    },
                    {
                        "default": " iaxis < c.ndim:",
                        "name": "if not -c.ndim <"
                    },
                    {
                        "name": "raise ValueError(\"The axis is out of range\")"
                    },
                    {
                        "name": "if iaxis < 0:"
                    },
                    {
                        "default": " c.ndim",
                        "name": "iaxis +"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "= 0:",
                        "name": "if cnt "
                    },
                    {
                        "name": "return c"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " np.rollaxis(c",
                        "name": "c "
                    },
                    {
                        "name": "iaxis)"
                    },
                    {
                        "default": " len(c)",
                        "name": "n "
                    },
                    {
                        "default": " n:",
                        "name": "if cnt >"
                    },
                    {
                        "default": " c[:1]*0",
                        "name": "c "
                    },
                    {
                        "name": "else:"
                    },
                    {
                        "name": "for i in range(cnt"
                    }
                ]
            },
            "chebpts1": {
                "args": [
                    {
                        "name": "npts"
                    }
                ]
            },
            "chebpts2": {
                "args": [
                    {
                        "name": "npts"
                    }
                ]
            },
            "chebroots": {
                "args": [
                    {
                        "name": "c"
                    }
                ]
            },
            "chebsub": {
                "args": [
                    {
                        "name": "c1"
                    },
                    {
                        "name": "c2"
                    }
                ]
            },
            "chebval": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "c"
                    },
                    {
                        "default": "True",
                        "name": "tensor"
                    }
                ]
            },
            "chebval2d": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "c"
                    }
                ]
            },
            "chebval3d": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z"
                    },
                    {
                        "name": "c"
                    }
                ]
            },
            "chebvander": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "deg) :"
                    },
                    {
                        "name": "\"\"\"Pseudo-Vandermonde matrix of given degree."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns the pseudo-Vandermonde matrix of degree `deg` and sample points"
                    },
                    {
                        "name": "`x`. The pseudo-Vandermonde matrix is defined by"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ".. math:: V[..."
                    },
                    {
                        "default": " T_i(x)",
                        "name": "i] "
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " i <= deg`. The leading indices of `V` index the elements of",
                        "name": "where `0 <"
                    },
                    {
                        "name": "`x` and the last index is the degree of the Chebyshev polynomial."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "If `c` is a 1-D array of coefficients of length `n + 1` and `V` is the"
                    },
                    {
                        "default": " chebvander(x",
                        "name": "matrix ``V "
                    },
                    {
                        "name": "n)``"
                    },
                    {
                        "name": "then ``np.dot(V"
                    },
                    {
                        "name": "c)`` and"
                    },
                    {
                        "name": "``chebval(x"
                    },
                    {
                        "name": "c)`` are the same up to roundoff.  This equivalence is"
                    },
                    {
                        "name": "useful both for least squares fitting and for the evaluation of a large"
                    },
                    {
                        "name": "number of Chebyshev series of the same degree and sample points."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "x : array_like"
                    },
                    {
                        "name": "Array of points. The dtype is converted to float64 or complex128"
                    },
                    {
                        "name": "depending on whether any of the elements are complex. If `x` is"
                    },
                    {
                        "name": "scalar it is converted to a 1-D array."
                    },
                    {
                        "name": "deg : int"
                    },
                    {
                        "name": "Degree of the resulting matrix."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "vander : ndarray"
                    },
                    {
                        "name": "The pseudo Vandermonde matrix. The shape of the returned matrix is"
                    },
                    {
                        "name": "``x.shape + (deg + 1"
                    },
                    {
                        "name": ")``"
                    },
                    {
                        "name": "where The last index is the degree of the"
                    },
                    {
                        "name": "corresponding Chebyshev polynomial.  The dtype will be the same as"
                    },
                    {
                        "name": "the converted `x`."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "default": " int(deg)",
                        "name": "ideg "
                    },
                    {
                        "default": " deg:",
                        "name": "if ideg !"
                    },
                    {
                        "name": "raise ValueError(\"deg must be integer\")"
                    },
                    {
                        "name": "if ideg < 0:"
                    },
                    {
                        "name": "raise ValueError(\"deg must be non-negative\")"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " np.array(x",
                        "name": "x "
                    },
                    {
                        "default": "0",
                        "name": "copy"
                    },
                    {
                        "default": "1) + 0.0",
                        "name": "ndmin"
                    },
                    {
                        "default": " (ideg + 1",
                        "name": "dims "
                    },
                    {
                        "name": ") + x.shape"
                    },
                    {
                        "default": " x.dtype",
                        "name": "dtyp "
                    },
                    {
                        "default": " np.empty(dims",
                        "name": "v "
                    },
                    {
                        "default": "dtyp)",
                        "name": "dtype"
                    },
                    {
                        "name": "# Use forward recursion to generate the entries."
                    },
                    {
                        "default": " x*0 + 1",
                        "name": "v[0] "
                    },
                    {
                        "name": "if ideg > 0 :"
                    },
                    {
                        "default": " 2*x",
                        "name": "x2 "
                    },
                    {
                        "default": " x",
                        "name": "v[1] "
                    },
                    {
                        "name": "for i in range(2"
                    },
                    {
                        "name": "ideg + 1) :"
                    },
                    {
                        "default": " v[i-1]*x2 - v[i-2]",
                        "name": "v[i] "
                    },
                    {
                        "name": "return np.rollaxis(v"
                    },
                    {
                        "name": "0"
                    },
                    {
                        "name": "v.ndim)"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def chebvander2d(x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "deg) :"
                    },
                    {
                        "name": "\"\"\"Pseudo-Vandermonde matrix of given degrees."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns the pseudo-Vandermonde matrix of degrees `deg` and sample"
                    },
                    {
                        "name": "points `(x"
                    },
                    {
                        "name": "y)`. The pseudo-Vandermonde matrix is defined by"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ".. math:: V[..."
                    },
                    {
                        "default": " T_i(x) * T_j(y)",
                        "name": "deg[1]*i + j] "
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " i <= deg[0]` and `0 <= j <= deg[1]`. The leading indices of",
                        "name": "where `0 <"
                    },
                    {
                        "name": "`V` index the points `(x"
                    },
                    {
                        "name": "y)` and the last index encodes the degrees of"
                    },
                    {
                        "name": "the Chebyshev polynomials."
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " chebvander2d(x",
                        "name": "If ``V "
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "[xdeg"
                    },
                    {
                        "name": "ydeg])``"
                    },
                    {
                        "name": "then the columns of `V`"
                    },
                    {
                        "name": "correspond to the elements of a 2-D coefficient array `c` of shape"
                    },
                    {
                        "name": "(xdeg + 1"
                    },
                    {
                        "name": "ydeg + 1) in the order"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ".. math:: c_{00}"
                    },
                    {
                        "name": "c_{01}"
                    },
                    {
                        "name": "c_{02} ..."
                    },
                    {
                        "name": "c_{10}"
                    },
                    {
                        "name": "c_{11}"
                    },
                    {
                        "name": "c_{12} ..."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "and ``np.dot(V"
                    },
                    {
                        "name": "c.flat)`` and ``chebval2d(x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "c)`` will be the same"
                    },
                    {
                        "name": "up to roundoff. This equivalence is useful both for least squares"
                    },
                    {
                        "name": "fitting and for the evaluation of a large number of 2-D Chebyshev"
                    },
                    {
                        "name": "series of the same degrees and sample points."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "x"
                    },
                    {
                        "name": "y : array_like"
                    },
                    {
                        "name": "Arrays of point coordinates"
                    },
                    {
                        "name": "all of the same shape. The dtypes"
                    },
                    {
                        "name": "will be converted to either float64 or complex128 depending on"
                    },
                    {
                        "name": "whether any of the elements are complex. Scalars are converted to"
                    },
                    {
                        "name": "1-D arrays."
                    },
                    {
                        "name": "deg : list of ints"
                    },
                    {
                        "name": "List of maximum degrees of the form [x_deg"
                    },
                    {
                        "name": "y_deg]."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "vander2d : ndarray"
                    },
                    {
                        "name": "The shape of the returned matrix is ``x.shape + (order"
                    },
                    {
                        "name": ")``"
                    },
                    {
                        "name": "where"
                    },
                    {
                        "default": " (deg[0]+1)*(deg([1]+1)`.  The dtype will be the same",
                        "name": ":math:`order "
                    },
                    {
                        "name": "as the converted `x` and `y`."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "See Also"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": "chebvander"
                    },
                    {
                        "name": "chebvander3d. chebval2d"
                    },
                    {
                        "name": "chebval3d"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Notes"
                    },
                    {
                        "name": "-----"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ".. versionadded::1.7.0"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "default": " [int(d) for d in deg]",
                        "name": "ideg "
                    },
                    {
                        "default": " [id == d and id >= 0 for id",
                        "name": "is_valid "
                    },
                    {
                        "name": "d in zip(ideg"
                    },
                    {
                        "name": "deg)]"
                    },
                    {
                        "default": " [1",
                        "name": "if is_valid !"
                    },
                    {
                        "name": "1]:"
                    },
                    {
                        "name": "raise ValueError(\"degrees must be non-negative integers\")"
                    },
                    {
                        "name": "degx"
                    },
                    {
                        "default": " ideg",
                        "name": "degy "
                    },
                    {
                        "name": "x"
                    },
                    {
                        "default": " np.array((x",
                        "name": "y "
                    },
                    {
                        "name": "y)"
                    },
                    {
                        "default": "0) + 0.0",
                        "name": "copy"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " chebvander(x",
                        "name": "vx "
                    },
                    {
                        "name": "degx)"
                    },
                    {
                        "default": " chebvander(y",
                        "name": "vy "
                    },
                    {
                        "name": "degy)"
                    },
                    {
                        "default": " vx[...",
                        "name": "v "
                    },
                    {
                        "name": "None]*vy[..."
                    },
                    {
                        "name": "None"
                    },
                    {
                        "name": ":]"
                    },
                    {
                        "name": "return v.reshape(v.shape[:-2] + (-1"
                    },
                    {
                        "name": "))"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def chebvander3d(x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z"
                    },
                    {
                        "name": "deg) :"
                    },
                    {
                        "name": "\"\"\"Pseudo-Vandermonde matrix of given degrees."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns the pseudo-Vandermonde matrix of degrees `deg` and sample"
                    },
                    {
                        "name": "points `(x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z)`. If `l"
                    },
                    {
                        "name": "m"
                    },
                    {
                        "name": "n` are the given degrees in `x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z`"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "then The pseudo-Vandermonde matrix is defined by"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ".. math:: V[..."
                    },
                    {
                        "default": " T_i(x)*T_j(y)*T_k(z)",
                        "name": "(m+1)(n+1)i + (n+1)j + k] "
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " i <= l`",
                        "name": "where `0 <"
                    },
                    {
                        "default": " j <= m`",
                        "name": "`0 <"
                    },
                    {
                        "default": " j <= n`.  The leading",
                        "name": "and `0 <"
                    },
                    {
                        "name": "indices of `V` index the points `(x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z)` and the last index encodes"
                    },
                    {
                        "name": "the degrees of the Chebyshev polynomials."
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " chebvander3d(x",
                        "name": "If ``V "
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z"
                    },
                    {
                        "name": "[xdeg"
                    },
                    {
                        "name": "ydeg"
                    },
                    {
                        "name": "zdeg])``"
                    },
                    {
                        "name": "then the columns"
                    },
                    {
                        "name": "of `V` correspond to the elements of a 3-D coefficient array `c` of"
                    },
                    {
                        "name": "shape (xdeg + 1"
                    },
                    {
                        "name": "ydeg + 1"
                    },
                    {
                        "name": "zdeg + 1) in the order"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ".. math:: c_{000}"
                    },
                    {
                        "name": "c_{001}"
                    },
                    {
                        "name": "c_{002}"
                    },
                    {
                        "name": "..."
                    },
                    {
                        "name": "c_{010}"
                    },
                    {
                        "name": "c_{011}"
                    },
                    {
                        "name": "c_{012}"
                    },
                    {
                        "name": "..."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "and ``np.dot(V"
                    },
                    {
                        "name": "c.flat)`` and ``chebval3d(x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z"
                    },
                    {
                        "name": "c)`` will be the"
                    },
                    {
                        "name": "same up to roundoff. This equivalence is useful both for least squares"
                    },
                    {
                        "name": "fitting and for the evaluation of a large number of 3-D Chebyshev"
                    },
                    {
                        "name": "series of the same degrees and sample points."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z : array_like"
                    },
                    {
                        "name": "Arrays of point coordinates"
                    },
                    {
                        "name": "all of the same shape. The dtypes will"
                    },
                    {
                        "name": "be converted to either float64 or complex128 depending on whether"
                    },
                    {
                        "name": "any of the elements are complex. Scalars are converted to 1-D"
                    },
                    {
                        "name": "arrays."
                    },
                    {
                        "name": "deg : list of ints"
                    },
                    {
                        "name": "List of maximum degrees of the form [x_deg"
                    },
                    {
                        "name": "y_deg"
                    },
                    {
                        "name": "z_deg]."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "vander3d : ndarray"
                    },
                    {
                        "name": "The shape of the returned matrix is ``x.shape + (order"
                    },
                    {
                        "name": ")``"
                    },
                    {
                        "name": "where"
                    },
                    {
                        "default": " (deg[0]+1)*(deg([1]+1)*(deg[2]+1)`.  The dtype will",
                        "name": ":math:`order "
                    },
                    {
                        "name": "be the same as the converted `x`"
                    },
                    {
                        "name": "`y`"
                    },
                    {
                        "name": "and `z`."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "See Also"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": "chebvander"
                    },
                    {
                        "name": "chebvander3d. chebval2d"
                    },
                    {
                        "name": "chebval3d"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Notes"
                    },
                    {
                        "name": "-----"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ".. versionadded::1.7.0"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "default": " [int(d) for d in deg]",
                        "name": "ideg "
                    },
                    {
                        "default": " [id == d and id >= 0 for id",
                        "name": "is_valid "
                    },
                    {
                        "name": "d in zip(ideg"
                    },
                    {
                        "name": "deg)]"
                    },
                    {
                        "default": " [1",
                        "name": "if is_valid !"
                    },
                    {
                        "name": "1"
                    },
                    {
                        "name": "1]:"
                    },
                    {
                        "name": "raise ValueError(\"degrees must be non-negative integers\")"
                    },
                    {
                        "name": "degx"
                    },
                    {
                        "name": "degy"
                    },
                    {
                        "default": " ideg",
                        "name": "degz "
                    },
                    {
                        "name": "x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "default": " np.array((x",
                        "name": "z "
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z)"
                    },
                    {
                        "default": "0) + 0.0",
                        "name": "copy"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " chebvander(x",
                        "name": "vx "
                    },
                    {
                        "name": "degx)"
                    },
                    {
                        "default": " chebvander(y",
                        "name": "vy "
                    },
                    {
                        "name": "degy)"
                    },
                    {
                        "default": " chebvander(z",
                        "name": "vz "
                    },
                    {
                        "name": "degz)"
                    },
                    {
                        "default": " vx[...",
                        "name": "v "
                    },
                    {
                        "name": "None"
                    },
                    {
                        "name": "None]*vy[..."
                    },
                    {
                        "name": "None"
                    },
                    {
                        "name": ":"
                    },
                    {
                        "name": "None]*vz[..."
                    },
                    {
                        "name": "None"
                    },
                    {
                        "name": "None"
                    },
                    {
                        "name": ":]"
                    },
                    {
                        "name": "return v.reshape(v.shape[:-3] + (-1"
                    },
                    {
                        "name": "))"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def chebfit(x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "deg"
                    },
                    {
                        "default": "None",
                        "name": "rcond"
                    },
                    {
                        "default": "False",
                        "name": "full"
                    },
                    {
                        "default": "None",
                        "name": "w"
                    }
                ]
            },
            "chebweight": {
                "args": [
                    {
                        "name": "x"
                    }
                ]
            }
        }
    },
    "common_rules": {
        "*": {
            "buildhooks": {
                "args": [
                    {
                        "name": "m"
                    }
                ]
            },
            "cadd": {
                "args": [
                    {
                        "name": "line"
                    },
                    {
                        "default": "chooks): s[0] = '%s\\n%s'%(s[0]",
                        "name": "s"
                    },
                    {
                        "name": "line"
                    }
                ]
            },
            "dadd": {
                "args": [
                    {
                        "name": "line"
                    },
                    {
                        "default": "doc): s[0] = '%s\\n%s'%(s[0]",
                        "name": "s"
                    },
                    {
                        "name": "line"
                    }
                ]
            },
            "fadd": {
                "args": [
                    {
                        "name": "line"
                    },
                    {
                        "default": "fwrap): s[0] = '%s\\n      %s'%(s[0]",
                        "name": "s"
                    },
                    {
                        "name": "line"
                    }
                ]
            },
            "findcommonblocks": {
                "args": [
                    {
                        "name": "block"
                    },
                    {
                        "default": "1",
                        "name": "top"
                    }
                ]
            },
            "iadd": {
                "args": [
                    {
                        "name": "line"
                    },
                    {
                        "default": "ihooks): s[0] = '%s\\n%s'%(s[0]",
                        "name": "s"
                    },
                    {
                        "name": "line"
                    }
                ]
            }
        }
    },
    "compaq": {
        "*": {},
        "CompaqFCompiler": {
            "get_flags": {
                "args": []
            },
            "get_flags_arch": {
                "args": []
            },
            "get_flags_debug": {
                "args": []
            },
            "get_flags_linker_so": {
                "args": []
            },
            "get_flags_opt": {
                "args": []
            }
        }
    },
    "compat": {
        "*": {}
    },
    "config": {
        "*": {},
        "config": {
            "": {
                "args": []
            },
            "initialize_options": {
                "args": []
            },
            "try_run": {
                "args": [
                    {
                        "name": "body"
                    },
                    {
                        "default": "None",
                        "name": "headers"
                    },
                    {
                        "default": "None",
                        "name": "include_dirs"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "None",
                        "name": "libraries"
                    },
                    {
                        "default": "None",
                        "name": "library_dirs"
                    },
                    {
                        "default": "\"c\"",
                        "name": "lang"
                    }
                ]
            }
        },
        "was %s": {
            "": {
                "args": [
                    {
                        "name": "body"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "headers"
                    },
                    {
                        "name": "include_dirs"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "libraries"
                    },
                    {
                        "name": "library_dirs"
                    },
                    {
                        "name": "lang"
                    }
                ]
            },
            "_wrap_method": {
                "args": [
                    {
                        "name": "mth"
                    },
                    {
                        "name": "lang"
                    },
                    {
                        "name": "args"
                    }
                ]
            },
            "check_compiler_gcc4": {
                "args": []
            },
            "check_decl": {
                "args": [
                    {
                        "name": "symbol"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "None",
                        "name": "headers"
                    },
                    {
                        "default": "None",
                        "name": "include_dirs"
                    }
                ]
            },
            "check_func": {
                "args": [
                    {
                        "name": "func"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "None",
                        "name": "headers"
                    },
                    {
                        "default": "None",
                        "name": "include_dirs"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "None",
                        "name": "libraries"
                    },
                    {
                        "default": "None",
                        "name": "library_dirs"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "False",
                        "name": "decl"
                    },
                    {
                        "default": "False",
                        "name": "call"
                    },
                    {
                        "default": "None",
                        "name": "call_args"
                    }
                ]
            },
            "check_funcs_once": {
                "args": [
                    {
                        "name": "funcs"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "None",
                        "name": "headers"
                    },
                    {
                        "default": "None",
                        "name": "include_dirs"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "None",
                        "name": "libraries"
                    },
                    {
                        "default": "None",
                        "name": "library_dirs"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "False",
                        "name": "decl"
                    },
                    {
                        "default": "False",
                        "name": "call"
                    },
                    {
                        "default": "None",
                        "name": "call_args"
                    }
                ]
            },
            "check_header": {
                "args": [
                    {
                        "name": "header"
                    },
                    {
                        "default": "None",
                        "name": "include_dirs"
                    },
                    {
                        "default": "None",
                        "name": "library_dirs"
                    },
                    {
                        "default": "'c'",
                        "name": "lang"
                    }
                ]
            },
            "check_inline": {
                "args": []
            },
            "check_macro_true": {
                "args": [
                    {
                        "name": "symbol"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "None",
                        "name": "headers"
                    },
                    {
                        "default": "None",
                        "name": "include_dirs"
                    }
                ]
            },
            "check_type": {
                "args": [
                    {
                        "name": "type_name"
                    },
                    {
                        "default": "None",
                        "name": "headers"
                    },
                    {
                        "default": "None",
                        "name": "include_dirs"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "None",
                        "name": "library_dirs"
                    }
                ]
            },
            "check_type_size": {
                "args": [
                    {
                        "name": "type_name"
                    },
                    {
                        "default": "None",
                        "name": "headers"
                    },
                    {
                        "default": "None",
                        "name": "include_dirs"
                    },
                    {
                        "default": "None",
                        "name": "library_dirs"
                    },
                    {
                        "default": "None",
                        "name": "expected"
                    }
                ]
            },
            "get_output": {
                "args": [
                    {
                        "name": "body"
                    },
                    {
                        "default": "None",
                        "name": "headers"
                    },
                    {
                        "default": "None",
                        "name": "include_dirs"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "None",
                        "name": "libraries"
                    },
                    {
                        "default": "None",
                        "name": "library_dirs"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "\"c\"",
                        "name": "lang"
                    },
                    {
                        "default": "None",
                        "name": "use_tee"
                    }
                ]
            }
        }
    },
    "config_compiler": {
        "*": {
            "show_fortran_compilers": {
                "args": [
                    {
                        "default": "[]",
                        "name": "_cache"
                    }
                ]
            }
        },
        "config_fc": {
            "finalize_options": {
                "args": []
            },
            "initialize_options": {
                "args": []
            },
            "run": {
                "args": []
            }
        }
    },
    "conv_template": {
        "*": {
            "paren_repl": {
                "args": [
                    {
                        "name": "obj"
                    }
                ]
            },
            "parse_loop_header": {
                "args": [
                    {
                        "name": "loophead) :"
                    },
                    {
                        "name": "\"\"\"Find all named replacements in the header"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns a list of dictionaries"
                    },
                    {
                        "name": "one for each loop iteration"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "where each key is a name to be substituted and the corresponding"
                    },
                    {
                        "name": "value is the replacement string."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Also return a list of exclusions.  The exclusions are dictionaries"
                    },
                    {
                        "name": "of key value pairs. There can be more than one exclusion."
                    },
                    {
                        "name": "[{'var1':'value1'"
                    },
                    {
                        "name": "'var2'"
                    },
                    {
                        "name": "'value2'["
                    },
                    {
                        "name": "...]}"
                    },
                    {
                        "name": "...]"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "name": "# Strip out '\\n' and leading '*'"
                    },
                    {
                        "name": "if any"
                    },
                    {
                        "name": "in continuation lines."
                    },
                    {
                        "name": "# This should not effect code previous to this change as"
                    },
                    {
                        "name": "# continuation lines were not allowed."
                    },
                    {
                        "default": " stripast.sub(\"\"",
                        "name": "loophead "
                    },
                    {
                        "name": "loophead)"
                    },
                    {
                        "name": "# parse out the names and lists of values"
                    },
                    {
                        "default": " []",
                        "name": "names "
                    },
                    {
                        "default": " named_re.findall(loophead)",
                        "name": "reps "
                    },
                    {
                        "default": " None",
                        "name": "nsub "
                    },
                    {
                        "name": "for rep in reps:"
                    },
                    {
                        "default": " rep[0]",
                        "name": "name "
                    },
                    {
                        "default": " parse_values(rep[1])",
                        "name": "vals "
                    },
                    {
                        "default": " len(vals)",
                        "name": "size "
                    },
                    {
                        "name": "if nsub is None :"
                    },
                    {
                        "default": " size",
                        "name": "nsub "
                    },
                    {
                        "default": " size :",
                        "name": "elif nsub !"
                    },
                    {
                        "default": " \"Mismatch in number of values:\\n%s = %s\" % (name",
                        "name": "msg "
                    },
                    {
                        "name": "vals)"
                    },
                    {
                        "name": "raise ValueError(msg)"
                    },
                    {
                        "name": "names.append((name"
                    },
                    {
                        "name": "vals))"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "# Find any exclude variables"
                    },
                    {
                        "default": " []",
                        "name": "excludes "
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "for obj in exclude_re.finditer(loophead"
                    }
                ]
            },
            "parse_string": {
                "args": [
                    {
                        "name": "astr"
                    },
                    {
                        "name": "env"
                    },
                    {
                        "name": "level"
                    },
                    {
                        "name": "line) :"
                    },
                    {
                        "default": " \"#line %d\\n\" % line",
                        "name": "lineno "
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "# local function for string replacement"
                    },
                    {
                        "name": "uses env"
                    },
                    {
                        "name": "def replace(match"
                    }
                ]
            },
            "parse_structure": {
                "args": [
                    {
                        "name": "astr"
                    },
                    {
                        "name": "level"
                    }
                ]
            },
            "parse_values": {
                "args": [
                    {
                        "name": "astr"
                    }
                ]
            },
            "process_file": {
                "args": [
                    {
                        "name": "source"
                    }
                ]
            },
            "process_str": {
                "args": [
                    {
                        "name": "astr"
                    }
                ]
            },
            "resolve_includes": {
                "args": [
                    {
                        "name": "source"
                    }
                ]
            },
            "unique_key": {
                "args": [
                    {
                        "name": "adict"
                    }
                ]
            }
        }
    },
    "convolve": {
        "*": {}
    },
    "core": {
        "*": {
            "_check_append_ext_library": {
                "args": [
                    {
                        "name": "libraries"
                    },
                    {
                        "name": "lib_name"
                    },
                    {
                        "name": "build_info"
                    }
                ]
            },
            "_check_append_library": {
                "args": [
                    {
                        "name": "libraries"
                    },
                    {
                        "name": "item"
                    }
                ]
            },
            "_command_line_ok": {
                "args": [
                    {
                        "default": "[]",
                        "name": "_cache"
                    }
                ]
            },
            "_dict_append": {
                "args": [
                    {
                        "name": "d"
                    },
                    {
                        "name": "**kws"
                    }
                ]
            },
            "get_distribution": {
                "args": [
                    {
                        "default": "False",
                        "name": "always"
                    }
                ]
            },
            "setup": {
                "args": [
                    {
                        "name": "**attr"
                    }
                ]
            }
        }
    },
    "cpuinfo": {
        "*": {
            "command_by_line": {
                "args": [
                    {
                        "name": "cmd"
                    },
                    {
                        "default": "(0",
                        "name": "successful_status"
                    },
                    {
                        "name": ")"
                    },
                    {
                        "default": "1",
                        "name": "stacklevel"
                    }
                ]
            },
            "command_info": {
                "args": [
                    {
                        "default": "(0",
                        "name": "successful_status"
                    },
                    {
                        "name": ")"
                    },
                    {
                        "default": "1",
                        "name": "stacklevel"
                    },
                    {
                        "name": "**kw"
                    }
                ]
            },
            "getoutput": {
                "args": [
                    {
                        "name": "cmd"
                    },
                    {
                        "default": "(0",
                        "name": "successful_status"
                    },
                    {
                        "name": ")"
                    },
                    {
                        "default": "1",
                        "name": "stacklevel"
                    }
                ]
            },
            "key_value_from_command": {
                "args": [
                    {
                        "name": "cmd"
                    },
                    {
                        "name": "sep"
                    },
                    {
                        "default": "(0",
                        "name": "successful_status"
                    },
                    {
                        "name": ")"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "1",
                        "name": "stacklevel"
                    }
                ]
            }
        },
        "CPUInfoBase": {
            "__get_nbits": {
                "args": []
            },
            "__getattr__": {
                "args": [
                    {
                        "name": "name"
                    }
                ]
            },
            "_getNCPUs": {
                "args": []
            },
            "_is_32bit": {
                "args": []
            },
            "_is_64bit": {
                "args": []
            },
            "_try_call": {
                "args": [
                    {
                        "name": "func"
                    }
                ]
            }
        },
        "DarwinCPUInfo": {
            "__init__": {
                "args": []
            },
            "__machine": {
                "args": [
                    {
                        "name": "n"
                    }
                ]
            },
            "_getNCPUs": {
                "args": []
            },
            "_is_Power_Macintosh": {
                "args": []
            },
            "_is_i386": {
                "args": []
            },
            "_is_ppc": {
                "args": []
            },
            "_is_ppc403": {
                "args": [
                    {
                        "name": "self): return self.__machine(403"
                    }
                ]
            },
            "_is_ppc505": {
                "args": [
                    {
                        "name": "self): return self.__machine(505"
                    }
                ]
            },
            "_is_ppc601": {
                "args": [
                    {
                        "name": "self): return self.__machine(601"
                    }
                ]
            },
            "_is_ppc602": {
                "args": [
                    {
                        "name": "self): return self.__machine(602"
                    }
                ]
            },
            "_is_ppc603": {
                "args": [
                    {
                        "name": "self): return self.__machine(603"
                    }
                ]
            },
            "_is_ppc603e": {
                "args": [
                    {
                        "name": "self): return self.__machine('603e'"
                    }
                ]
            },
            "_is_ppc604": {
                "args": [
                    {
                        "name": "self): return self.__machine(604"
                    }
                ]
            },
            "_is_ppc604e": {
                "args": [
                    {
                        "name": "self): return self.__machine('604e'"
                    }
                ]
            },
            "_is_ppc620": {
                "args": [
                    {
                        "name": "self): return self.__machine(620"
                    }
                ]
            },
            "_is_ppc630": {
                "args": [
                    {
                        "name": "self): return self.__machine(630"
                    }
                ]
            },
            "_is_ppc740": {
                "args": [
                    {
                        "name": "self): return self.__machine(740"
                    }
                ]
            },
            "_is_ppc7400": {
                "args": [
                    {
                        "name": "self): return self.__machine(7400"
                    }
                ]
            },
            "_is_ppc7450": {
                "args": [
                    {
                        "name": "self): return self.__machine(7450"
                    }
                ]
            },
            "_is_ppc750": {
                "args": [
                    {
                        "name": "self): return self.__machine(750"
                    }
                ]
            },
            "_is_ppc801": {
                "args": [
                    {
                        "name": "self): return self.__machine(801"
                    }
                ]
            },
            "_is_ppc821": {
                "args": [
                    {
                        "name": "self): return self.__machine(821"
                    }
                ]
            },
            "_is_ppc823": {
                "args": [
                    {
                        "name": "self): return self.__machine(823"
                    }
                ]
            },
            "_is_ppc860": {
                "args": [
                    {
                        "name": "self): return self.__machine(860"
                    }
                ]
            },
            "_not_impl": {
                "args": [
                    {
                        "name": "self): pass"
                    }
                ]
            }
        },
        "IRIXCPUInfo": {
            "__cputype": {
                "args": [
                    {
                        "name": "n"
                    }
                ]
            },
            "__init__": {
                "args": []
            },
            "__machine": {
                "args": [
                    {
                        "name": "n"
                    }
                ]
            },
            "_getNCPUs": {
                "args": []
            },
            "_is_IP19": {
                "args": [
                    {
                        "name": "self): return self.__machine(19"
                    }
                ]
            },
            "_is_IP20": {
                "args": [
                    {
                        "name": "self): return self.__machine(20"
                    }
                ]
            },
            "_is_IP21": {
                "args": [
                    {
                        "name": "self): return self.__machine(21"
                    }
                ]
            },
            "_is_IP22": {
                "args": [
                    {
                        "name": "self): return self.__machine(22"
                    }
                ]
            },
            "_is_IP22_4k": {
                "args": [
                    {
                        "name": "self): return self.__machine(22) and self._is_r4000("
                    }
                ]
            },
            "_is_IP22_5k": {
                "args": [
                    {
                        "name": "self): return self.__machine(22)  and self._is_r5000("
                    }
                ]
            },
            "_is_IP24": {
                "args": [
                    {
                        "name": "self): return self.__machine(24"
                    }
                ]
            },
            "_is_IP25": {
                "args": [
                    {
                        "name": "self): return self.__machine(25"
                    }
                ]
            },
            "_is_IP26": {
                "args": [
                    {
                        "name": "self): return self.__machine(26"
                    }
                ]
            },
            "_is_IP27": {
                "args": [
                    {
                        "name": "self): return self.__machine(27"
                    }
                ]
            },
            "_is_IP28": {
                "args": [
                    {
                        "name": "self): return self.__machine(28"
                    }
                ]
            },
            "_is_IP30": {
                "args": [
                    {
                        "name": "self): return self.__machine(30"
                    }
                ]
            },
            "_is_IP32": {
                "args": [
                    {
                        "name": "self): return self.__machine(32"
                    }
                ]
            },
            "_is_IP32_10k": {
                "args": [
                    {
                        "name": "self): return self.__machine(32) and self._is_r10000("
                    }
                ]
            },
            "_is_IP32_5k": {
                "args": [
                    {
                        "name": "self): return self.__machine(32) and self._is_r5000("
                    }
                ]
            },
            "_is_r10000": {
                "args": [
                    {
                        "name": "self): return self.__cputype(10000"
                    }
                ]
            },
            "_is_r12000": {
                "args": [
                    {
                        "name": "self): return self.__cputype(12000"
                    }
                ]
            },
            "_is_r2000": {
                "args": [
                    {
                        "name": "self): return self.__cputype(2000"
                    }
                ]
            },
            "_is_r3000": {
                "args": [
                    {
                        "name": "self): return self.__cputype(3000"
                    }
                ]
            },
            "_is_r3900": {
                "args": [
                    {
                        "name": "self): return self.__cputype(3900"
                    }
                ]
            },
            "_is_r4000": {
                "args": [
                    {
                        "name": "self): return self.__cputype(4000"
                    }
                ]
            },
            "_is_r4100": {
                "args": [
                    {
                        "name": "self): return self.__cputype(4100"
                    }
                ]
            },
            "_is_r4300": {
                "args": [
                    {
                        "name": "self): return self.__cputype(4300"
                    }
                ]
            },
            "_is_r4400": {
                "args": [
                    {
                        "name": "self): return self.__cputype(4400"
                    }
                ]
            },
            "_is_r4600": {
                "args": [
                    {
                        "name": "self): return self.__cputype(4600"
                    }
                ]
            },
            "_is_r4650": {
                "args": [
                    {
                        "name": "self): return self.__cputype(4650"
                    }
                ]
            },
            "_is_r5000": {
                "args": [
                    {
                        "name": "self): return self.__cputype(5000"
                    }
                ]
            },
            "_is_r6000": {
                "args": [
                    {
                        "name": "self): return self.__cputype(6000"
                    }
                ]
            },
            "_is_r8000": {
                "args": [
                    {
                        "name": "self): return self.__cputype(8000"
                    }
                ]
            },
            "_is_rorion": {
                "args": [
                    {
                        "name": "self): return self.__cputype('orion'"
                    }
                ]
            },
            "_is_singleCPU": {
                "args": []
            },
            "_not_impl": {
                "args": [
                    {
                        "name": "self): pass"
                    }
                ]
            },
            "get_ip": {
                "args": []
            }
        },
        "LinuxCPUInfo": {
            "__init__": {
                "args": []
            },
            "_getNCPUs": {
                "args": []
            },
            "_has_3dnow": {
                "args": []
            },
            "_has_3dnowext": {
                "args": []
            },
            "_has_f00f_bug": {
                "args": []
            },
            "_has_fdiv_bug": {
                "args": []
            },
            "_has_mmx": {
                "args": []
            },
            "_has_sse": {
                "args": []
            },
            "_has_sse2": {
                "args": []
            },
            "_has_sse3": {
                "args": []
            },
            "_has_ssse3": {
                "args": []
            },
            "_is_AMD": {
                "args": []
            },
            "_is_AMD64": {
                "args": []
            },
            "_is_Alpha": {
                "args": []
            },
            "_is_Athlon64": {
                "args": []
            },
            "_is_AthlonHX": {
                "args": []
            },
            "_is_AthlonK6": {
                "args": []
            },
            "_is_AthlonK6_2": {
                "args": []
            },
            "_is_AthlonK6_3": {
                "args": []
            },
            "_is_AthlonK7": {
                "args": []
            },
            "_is_AthlonMP": {
                "args": []
            },
            "_is_Celeron": {
                "args": []
            },
            "_is_Core2": {
                "args": []
            },
            "_is_EV4": {
                "args": []
            },
            "_is_EV5": {
                "args": []
            },
            "_is_EV56": {
                "args": []
            },
            "_is_Hammer": {
                "args": []
            },
            "_is_Intel": {
                "args": []
            },
            "_is_Itanium": {
                "args": []
            },
            "_is_Nocona": {
                "args": []
            },
            "_is_Opteron": {
                "args": []
            },
            "_is_PCA56": {
                "args": []
            },
            "_is_Pentium": {
                "args": []
            },
            "_is_PentiumII": {
                "args": []
            },
            "_is_PentiumIII": {
                "args": []
            },
            "_is_PentiumIV": {
                "args": []
            },
            "_is_PentiumM": {
                "args": []
            },
            "_is_PentiumMMX": {
                "args": []
            },
            "_is_PentiumPro": {
                "args": []
            },
            "_is_Prescott": {
                "args": []
            },
            "_is_XEON": {
                "args": []
            },
            "_is_i486": {
                "args": []
            },
            "_is_i586": {
                "args": []
            },
            "_is_i686": {
                "args": []
            },
            "_is_singleCPU": {
                "args": []
            },
            "_not_impl": {
                "args": [
                    {
                        "name": "self): pass"
                    }
                ]
            }
        },
        "SunOSCPUInfo": {
            "__init__": {
                "args": []
            },
            "_getNCPUs": {
                "args": []
            },
            "_is_SUNW": {
                "args": []
            },
            "_is_cpusparcv7": {
                "args": []
            },
            "_is_cpusparcv8": {
                "args": []
            },
            "_is_cpusparcv9": {
                "args": []
            },
            "_is_i386": {
                "args": []
            },
            "_is_sparc": {
                "args": []
            },
            "_is_sparcstation5": {
                "args": []
            },
            "_is_sparcv9": {
                "args": []
            },
            "_is_sun4": {
                "args": []
            },
            "_is_sunfire": {
                "args": []
            },
            "_is_ultra": {
                "args": []
            },
            "_is_ultra1": {
                "args": []
            },
            "_is_ultra2": {
                "args": []
            },
            "_is_ultra250": {
                "args": []
            },
            "_is_ultra30": {
                "args": []
            },
            "_is_ultra4": {
                "args": []
            },
            "_is_ultra5": {
                "args": []
            },
            "_is_ultra5_10": {
                "args": []
            },
            "_is_ultra60": {
                "args": []
            },
            "_is_ultra80": {
                "args": []
            },
            "_is_ultraenterprice": {
                "args": []
            },
            "_is_ultraenterprice10k": {
                "args": []
            },
            "_not_impl": {
                "args": [
                    {
                        "name": "self): pass"
                    }
                ]
            }
        }
    },
    "crackfortran": {
        "*": {
            "_calc_depend_dict": {
                "args": [
                    {
                        "name": "vars"
                    }
                ]
            },
            "_ensure_exprdict": {
                "args": [
                    {
                        "name": "r"
                    }
                ]
            },
            "_eval_length": {
                "args": [
                    {
                        "name": "length"
                    },
                    {
                        "name": "params"
                    }
                ]
            },
            "_eval_scalar": {
                "args": [
                    {
                        "name": "value"
                    },
                    {
                        "name": "params"
                    }
                ]
            },
            "_get_depend_dict": {
                "args": [
                    {
                        "name": "name"
                    },
                    {
                        "name": "vars"
                    },
                    {
                        "name": "deps"
                    }
                ]
            },
            "_is_intent_callback": {
                "args": [
                    {
                        "name": "vdecl"
                    }
                ]
            },
            "_kind_func": {
                "args": [
                    {
                        "name": "string"
                    }
                ]
            },
            "_resolvenameargspattern": {
                "args": [
                    {
                        "name": "line"
                    }
                ]
            },
            "_selected_int_kind_func": {
                "args": [
                    {
                        "name": "r"
                    }
                ]
            },
            "_selected_real_kind_func": {
                "args": [
                    {
                        "name": "p"
                    },
                    {
                        "default": "0",
                        "name": "r"
                    },
                    {
                        "default": "0",
                        "name": "radix"
                    }
                ]
            },
            "_simplifyargs": {
                "args": [
                    {
                        "name": "argsline"
                    }
                ]
            },
            "analyzeargs": {
                "args": [
                    {
                        "name": "block"
                    }
                ]
            },
            "analyzebody": {
                "args": [
                    {
                        "name": "block"
                    },
                    {
                        "name": "args"
                    },
                    {
                        "default": "''",
                        "name": "tab"
                    }
                ]
            },
            "analyzecommon": {
                "args": [
                    {
                        "name": "block"
                    }
                ]
            },
            "analyzeline": {
                "args": [
                    {
                        "name": "m"
                    },
                    {
                        "name": "case"
                    },
                    {
                        "name": "line"
                    }
                ]
            },
            "analyzevars": {
                "args": [
                    {
                        "name": "block"
                    }
                ]
            },
            "appenddecl": {
                "args": [
                    {
                        "name": "decl"
                    },
                    {
                        "name": "decl2"
                    },
                    {
                        "default": "1",
                        "name": "force"
                    }
                ]
            },
            "appendmultiline": {
                "args": [
                    {
                        "name": "group"
                    },
                    {
                        "name": "context_name"
                    },
                    {
                        "name": "ml"
                    }
                ]
            },
            "buildimplicitrules": {
                "args": [
                    {
                        "name": "block"
                    }
                ]
            },
            "common2fortran": {
                "args": [
                    {
                        "name": "common"
                    },
                    {
                        "default": "''",
                        "name": "tab"
                    }
                ]
            },
            "crack2fortran": {
                "args": [
                    {
                        "name": "block"
                    }
                ]
            },
            "crack2fortrangen": {
                "args": [
                    {
                        "name": "block"
                    },
                    {
                        "default": "'\\n'",
                        "name": "tab"
                    },
                    {
                        "default": "False",
                        "name": "as_interface"
                    }
                ]
            },
            "crackfortran": {
                "args": [
                    {
                        "name": "files"
                    }
                ]
            },
            "crackline": {
                "args": [
                    {
                        "name": "line"
                    },
                    {
                        "default": "0",
                        "name": "reset"
                    }
                ]
            },
            "cracktypespec": {
                "args": [
                    {
                        "name": "typespec"
                    },
                    {
                        "name": "selector"
                    }
                ]
            },
            "cracktypespec0": {
                "args": [
                    {
                        "name": "typespec"
                    },
                    {
                        "name": "ll"
                    }
                ]
            },
            "determineexprtype": {
                "args": [
                    {
                        "name": "expr"
                    },
                    {
                        "name": "vars"
                    },
                    {
                        "default": "{}",
                        "name": "rules"
                    }
                ]
            },
            "expr2name": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "block"
                    },
                    {
                        "default": "[]",
                        "name": "args"
                    }
                ]
            },
            "get_parameters": {
                "args": [
                    {
                        "name": "vars"
                    },
                    {
                        "default": "{}",
                        "name": "global_params"
                    }
                ]
            },
            "get_sorted_names": {
                "args": [
                    {
                        "name": "vars"
                    }
                ]
            },
            "get_usedict": {
                "args": [
                    {
                        "name": "block"
                    }
                ]
            },
            "get_useparameters": {
                "args": [
                    {
                        "name": "block"
                    },
                    {
                        "default": "None",
                        "name": "param_map"
                    }
                ]
            },
            "getarrlen": {
                "args": [
                    {
                        "name": "dl"
                    },
                    {
                        "name": "args"
                    },
                    {
                        "default": "'*'",
                        "name": "star"
                    }
                ]
            },
            "getblockname": {
                "args": [
                    {
                        "name": "block"
                    },
                    {
                        "default": "'unknown'",
                        "name": "unknown"
                    }
                ]
            },
            "getextension": {
                "args": [
                    {
                        "name": "name"
                    }
                ]
            },
            "getlincoef": {
                "args": [
                    {
                        "name": "e"
                    },
                    {
                        "default": " a*x+b ; x in xset",
                        "name": "xset): # e "
                    }
                ]
            },
            "is_free_format": {
                "args": [
                    {
                        "name": "file"
                    }
                ]
            },
            "markinnerspaces": {
                "args": [
                    {
                        "name": "line"
                    }
                ]
            },
            "markoutercomma": {
                "args": [
                    {
                        "name": "line"
                    },
                    {
                        "default": "'",
                        "name": "comma"
                    },
                    {
                        "name": "'"
                    }
                ]
            },
            "markouterparen": {
                "args": [
                    {
                        "name": "line"
                    }
                ]
            },
            "myeval": {
                "args": [
                    {
                        "name": "e"
                    },
                    {
                        "default": "None",
                        "name": "g"
                    },
                    {
                        "default": "None",
                        "name": "l"
                    }
                ]
            },
            "outmess": {
                "args": [
                    {
                        "name": "line"
                    },
                    {
                        "default": "1",
                        "name": "flag"
                    }
                ]
            },
            "postcrack": {
                "args": [
                    {
                        "name": "block"
                    },
                    {
                        "default": "None",
                        "name": "args"
                    },
                    {
                        "default": "''",
                        "name": "tab"
                    }
                ]
            },
            "postcrack2": {
                "args": [
                    {
                        "name": "block"
                    },
                    {
                        "default": "''",
                        "name": "tab"
                    },
                    {
                        "default": "None",
                        "name": "param_map"
                    }
                ]
            },
            "readfortrancode": {
                "args": [
                    {
                        "name": "ffile"
                    },
                    {
                        "default": "show",
                        "name": "dowithline"
                    },
                    {
                        "default": "1",
                        "name": "istop"
                    }
                ]
            },
            "removespaces": {
                "args": [
                    {
                        "name": "expr"
                    }
                ]
            },
            "rmbadname": {
                "args": [
                    {
                        "name": "names): return [rmbadname1(_m) for _m in names]"
                    }
                ]
            },
            "rmbadname1": {
                "args": [
                    {
                        "name": "name"
                    }
                ]
            },
            "setattrspec": {
                "args": [
                    {
                        "name": "decl"
                    },
                    {
                        "name": "attr"
                    },
                    {
                        "default": "0",
                        "name": "force"
                    }
                ]
            },
            "setcharselector": {
                "args": [
                    {
                        "name": "decl"
                    },
                    {
                        "name": "sel"
                    },
                    {
                        "default": "0",
                        "name": "force"
                    }
                ]
            },
            "setkindselector": {
                "args": [
                    {
                        "name": "decl"
                    },
                    {
                        "name": "sel"
                    },
                    {
                        "default": "0",
                        "name": "force"
                    }
                ]
            },
            "setmesstext": {
                "args": [
                    {
                        "name": "block"
                    }
                ]
            },
            "show": {
                "args": [
                    {
                        "name": "o"
                    },
                    {
                        "default": "0):pprint.pprint(o",
                        "name": "f"
                    }
                ]
            },
            "sortvarnames": {
                "args": [
                    {
                        "name": "vars"
                    }
                ]
            },
            "true_intent_list": {
                "args": [
                    {
                        "name": "var"
                    }
                ]
            },
            "undo_rmbadname": {
                "args": [
                    {
                        "name": "names): return [undo_rmbadname1(_m) for _m in names]"
                    }
                ]
            },
            "undo_rmbadname1": {
                "args": [
                    {
                        "name": "name"
                    }
                ]
            },
            "unmarkouterparen": {
                "args": [
                    {
                        "name": "line"
                    }
                ]
            },
            "updatevars": {
                "args": [
                    {
                        "name": "typespec"
                    },
                    {
                        "name": "selector"
                    },
                    {
                        "name": "attrspec"
                    },
                    {
                        "name": "entitydecl"
                    }
                ]
            },
            "use2fortran": {
                "args": [
                    {
                        "name": "use"
                    },
                    {
                        "default": "''",
                        "name": "tab"
                    }
                ]
            },
            "vars2fortran": {
                "args": [
                    {
                        "name": "block"
                    },
                    {
                        "name": "vars"
                    },
                    {
                        "name": "args"
                    },
                    {
                        "default": "''",
                        "name": "tab"
                    },
                    {
                        "default": "False",
                        "name": "as_interface"
                    }
                ]
            }
        }
    },
    "ctypeslib": {
        "*": {
            "_dummy": {
                "args": [
                    {
                        "name": "*args"
                    },
                    {
                        "name": "**kwds"
                    }
                ]
            },
            "_flags_fromnum": {
                "args": [
                    {
                        "name": "num"
                    }
                ]
            },
            "_num_fromflags": {
                "args": [
                    {
                        "name": "flaglist"
                    }
                ]
            },
            "load_library": {
                "args": [
                    {
                        "name": "libname"
                    },
                    {
                        "name": "loader_path"
                    }
                ]
            }
        }
    },
    "defchararray": {
        "*": {
            "_clean_args": {
                "args": [
                    {
                        "name": "*args"
                    }
                ]
            },
            "_get_num_chars": {
                "args": [
                    {
                        "name": "a"
                    }
                ]
            },
            "_to_string_or_unicode_array": {
                "args": [
                    {
                        "name": "result"
                    }
                ]
            },
            "_use_unicode": {
                "args": [
                    {
                        "name": "*args"
                    }
                ]
            },
            "add": {
                "args": [
                    {
                        "name": "x1"
                    },
                    {
                        "name": "x2"
                    }
                ]
            },
            "capitalize": {
                "args": [
                    {
                        "name": "a"
                    }
                ]
            },
            "center": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "width"
                    },
                    {
                        "default": "' '",
                        "name": "fillchar"
                    }
                ]
            },
            "count": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "sub"
                    },
                    {
                        "default": "0",
                        "name": "start"
                    },
                    {
                        "default": "None",
                        "name": "end"
                    }
                ]
            },
            "decode": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "encoding"
                    },
                    {
                        "default": "None",
                        "name": "errors"
                    }
                ]
            },
            "encode": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "encoding"
                    },
                    {
                        "default": "None",
                        "name": "errors"
                    }
                ]
            },
            "endswith": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "suffix"
                    },
                    {
                        "default": "0",
                        "name": "start"
                    },
                    {
                        "default": "None",
                        "name": "end"
                    }
                ]
            },
            "equal": {
                "args": [
                    {
                        "name": "x1"
                    },
                    {
                        "name": "x2"
                    }
                ]
            },
            "expandtabs": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "8",
                        "name": "tabsize"
                    }
                ]
            },
            "find": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "sub"
                    },
                    {
                        "default": "0",
                        "name": "start"
                    },
                    {
                        "default": "None",
                        "name": "end"
                    }
                ]
            },
            "greater": {
                "args": [
                    {
                        "name": "x1"
                    },
                    {
                        "name": "x2"
                    }
                ]
            },
            "greater_equal": {
                "args": [
                    {
                        "name": "x1"
                    },
                    {
                        "name": "x2"
                    }
                ]
            },
            "index": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "sub"
                    },
                    {
                        "default": "0",
                        "name": "start"
                    },
                    {
                        "default": "None",
                        "name": "end"
                    }
                ]
            },
            "isalnum": {
                "args": [
                    {
                        "name": "a"
                    }
                ]
            },
            "isalpha": {
                "args": [
                    {
                        "name": "a"
                    }
                ]
            },
            "isdecimal": {
                "args": [
                    {
                        "name": "a"
                    }
                ]
            },
            "isdigit": {
                "args": [
                    {
                        "name": "a"
                    }
                ]
            },
            "islower": {
                "args": [
                    {
                        "name": "a"
                    }
                ]
            },
            "isnumeric": {
                "args": [
                    {
                        "name": "a"
                    }
                ]
            },
            "isspace": {
                "args": [
                    {
                        "name": "a"
                    }
                ]
            },
            "istitle": {
                "args": [
                    {
                        "name": "a"
                    }
                ]
            },
            "isupper": {
                "args": [
                    {
                        "name": "a"
                    }
                ]
            },
            "join": {
                "args": [
                    {
                        "name": "sep"
                    },
                    {
                        "name": "seq"
                    }
                ]
            },
            "less": {
                "args": [
                    {
                        "name": "x1"
                    },
                    {
                        "name": "x2"
                    }
                ]
            },
            "less_equal": {
                "args": [
                    {
                        "name": "x1"
                    },
                    {
                        "name": "x2"
                    }
                ]
            },
            "ljust": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "width"
                    },
                    {
                        "default": "' '",
                        "name": "fillchar"
                    }
                ]
            },
            "lower": {
                "args": [
                    {
                        "name": "a"
                    }
                ]
            },
            "lstrip": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "chars"
                    }
                ]
            },
            "mod": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "values"
                    }
                ]
            },
            "multiply": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "i"
                    }
                ]
            },
            "not_equal": {
                "args": [
                    {
                        "name": "x1"
                    },
                    {
                        "name": "x2"
                    }
                ]
            },
            "partition": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "sep"
                    }
                ]
            },
            "replace": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "old"
                    },
                    {
                        "name": "new"
                    },
                    {
                        "default": "None",
                        "name": "count"
                    }
                ]
            },
            "rfind": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "sub"
                    },
                    {
                        "default": "0",
                        "name": "start"
                    },
                    {
                        "default": "None",
                        "name": "end"
                    }
                ]
            },
            "rindex": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "sub"
                    },
                    {
                        "default": "0",
                        "name": "start"
                    },
                    {
                        "default": "None",
                        "name": "end"
                    }
                ]
            },
            "rjust": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "width"
                    },
                    {
                        "default": "' '",
                        "name": "fillchar"
                    }
                ]
            },
            "rpartition": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "sep"
                    }
                ]
            },
            "rsplit": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "sep"
                    },
                    {
                        "default": "None",
                        "name": "maxsplit"
                    }
                ]
            },
            "rstrip": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "chars"
                    }
                ]
            },
            "split": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "sep"
                    },
                    {
                        "default": "None",
                        "name": "maxsplit"
                    }
                ]
            },
            "splitlines": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "keepends"
                    }
                ]
            },
            "startswith": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "prefix"
                    },
                    {
                        "default": "0",
                        "name": "start"
                    },
                    {
                        "default": "None",
                        "name": "end"
                    }
                ]
            },
            "str_len": {
                "args": [
                    {
                        "name": "a"
                    }
                ]
            },
            "strip": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "chars"
                    }
                ]
            },
            "swapcase": {
                "args": [
                    {
                        "name": "a"
                    }
                ]
            },
            "title": {
                "args": [
                    {
                        "name": "a"
                    }
                ]
            },
            "translate": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "table"
                    },
                    {
                        "default": "None",
                        "name": "deletechars"
                    }
                ]
            },
            "upper": {
                "args": [
                    {
                        "name": "a"
                    }
                ]
            },
            "zfill": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "width"
                    }
                ]
            }
        },
        "adds the following functionality:": {
            "asarray": {
                "args": [
                    {
                        "name": "obj"
                    },
                    {
                        "default": "None",
                        "name": "itemsize"
                    },
                    {
                        "default": "None",
                        "name": "unicode"
                    },
                    {
                        "default": "None",
                        "name": "order"
                    }
                ]
            }
        },
        "chararray": {}
    },
    "defmatrix": {
        "*": {},
        "_NumCharTable:": {
            "__getitem__": {
                "args": [
                    {
                        "name": "i"
                    }
                ]
            },
            "_convert_from_string": {
                "args": [
                    {
                        "name": "data"
                    }
                ]
            },
            "_eval": {
                "args": [
                    {
                        "name": "astr"
                    }
                ]
            },
            "asmatrix": {
                "args": [
                    {
                        "name": "data"
                    },
                    {
                        "default": "None",
                        "name": "dtype"
                    }
                ]
            },
            "matrix_power": {
                "args": [
                    {
                        "name": "M"
                    },
                    {
                        "name": "n"
                    }
                ]
            }
        }
    },
    "develop": {
        "*": {}
    },
    "diagnose": {
        "*": {
            "run": {
                "args": [
                    {
                        "name": ""
                    }
                ]
            },
            "run_command": {
                "args": [
                    {
                        "name": "cmd"
                    }
                ]
            }
        }
    },
    "dual": {
        "*": {
            "register_func": {
                "args": [
                    {
                        "name": "name"
                    },
                    {
                        "name": "func"
                    }
                ]
            },
            "restore_all": {
                "args": [
                    {
                        "name": ""
                    }
                ]
            },
            "restore_func": {
                "args": [
                    {
                        "name": "name"
                    }
                ]
            }
        }
    },
    "egg_info": {
        "*": {}
    },
    "environment": {
        "*": {}
    },
    "exec_command": {
        "*": {
            "_exec_command": {
                "args": [
                    {
                        "name": "command"
                    },
                    {
                        "default": "None",
                        "name": "use_shell"
                    },
                    {
                        "default": " None",
                        "name": "use_tee "
                    },
                    {
                        "name": "**env"
                    }
                ]
            },
            "_exec_command_posix": {
                "args": [
                    {
                        "name": "command"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " None",
                        "name": "use_shell "
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " None",
                        "name": "use_tee "
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "**env"
                    }
                ]
            },
            "_exec_command_python": {
                "args": [
                    {
                        "name": "command"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "''",
                        "name": "exec_command_dir"
                    },
                    {
                        "name": "**env"
                    }
                ]
            },
            "_preserve_environment": {
                "args": [
                    {
                        "name": "names"
                    }
                ]
            },
            "_supports_fileno": {
                "args": [
                    {
                        "name": "stream"
                    }
                ]
            },
            "_update_environment": {
                "args": [
                    {
                        "name": "**env"
                    }
                ]
            },
            "exec_command": {
                "args": [
                    {
                        "name": "command"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "''",
                        "name": "execute_in"
                    },
                    {
                        "default": "None",
                        "name": "use_shell"
                    },
                    {
                        "default": " None",
                        "name": "use_tee "
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " 1",
                        "name": "_with_python "
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "**env"
                    }
                ]
            },
            "find_executable": {
                "args": [
                    {
                        "name": "exe"
                    },
                    {
                        "default": "None",
                        "name": "path"
                    },
                    {
                        "default": "{}",
                        "name": "_cache"
                    }
                ]
            },
            "get_pythonexe": {
                "args": [
                    {
                        "name": ""
                    }
                ]
            },
            "quote_arg": {
                "args": [
                    {
                        "name": "arg"
                    }
                ]
            },
            "splitcmdline": {
                "args": [
                    {
                        "name": "line"
                    }
                ]
            },
            "temp_file_name": {
                "args": [
                    {
                        "name": ""
                    }
                ]
            },
            "test_cl": {
                "args": [
                    {
                        "name": "**kws"
                    }
                ]
            },
            "test_execute_in": {
                "args": [
                    {
                        "name": "**kws"
                    }
                ]
            },
            "test_nt": {
                "args": [
                    {
                        "name": "**kws"
                    }
                ]
            },
            "test_posix": {
                "args": [
                    {
                        "name": "**kws"
                    }
                ]
            },
            "test_svn": {
                "args": [
                    {
                        "name": "**kws"
                    }
                ]
            }
        }
    },
    "extension": {
        "*": {}
    },
    "extras": {
        "*": {
            "count_masked": {
                "args": [
                    {
                        "name": "arr"
                    },
                    {
                        "default": "None",
                        "name": "axis"
                    }
                ]
            },
            "issequence": {
                "args": [
                    {
                        "name": "seq"
                    }
                ]
            },
            "masked_all": {
                "args": [
                    {
                        "name": "shape"
                    },
                    {
                        "default": "float",
                        "name": "dtype"
                    }
                ]
            },
            "masked_all_like": {
                "args": [
                    {
                        "name": "arr"
                    }
                ]
            }
        },
        "MAxisConcatenator": {
            "__getitem__": {
                "args": [
                    {
                        "name": "key"
                    }
                ]
            },
            "__init__": {
                "args": [
                    {
                        "default": "0",
                        "name": "axis"
                    }
                ]
            }
        },
        "_fromnxfunction:": {
            "__call__": {
                "args": [
                    {
                        "name": "*args"
                    },
                    {
                        "name": "**params"
                    }
                ]
            },
            "__init__": {
                "args": [
                    {
                        "name": "funcname"
                    }
                ]
            },
            "_covhelper": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "default": "None",
                        "name": "y"
                    },
                    {
                        "default": "True",
                        "name": "rowvar"
                    },
                    {
                        "default": "True",
                        "name": "allow_masked"
                    }
                ]
            },
            "_median1D": {
                "args": [
                    {
                        "name": "data"
                    }
                ]
            },
            "apply_along_axis": {
                "args": [
                    {
                        "name": "func1d"
                    },
                    {
                        "name": "axis"
                    },
                    {
                        "name": "arr"
                    },
                    {
                        "name": "*args"
                    },
                    {
                        "name": "**kwargs"
                    }
                ]
            },
            "apply_over_axes": {
                "args": [
                    {
                        "name": "func"
                    },
                    {
                        "name": "a"
                    },
                    {
                        "name": "axes"
                    }
                ]
            },
            "average": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "axis"
                    },
                    {
                        "default": "None",
                        "name": "weights"
                    },
                    {
                        "default": "False",
                        "name": "returned"
                    }
                ]
            },
            "compress_cols": {
                "args": [
                    {
                        "name": "a"
                    }
                ]
            },
            "compress_rowcols": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "default": "None",
                        "name": "axis"
                    }
                ]
            },
            "compress_rows": {
                "args": [
                    {
                        "name": "a"
                    }
                ]
            },
            "corrcoef": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "default": "None",
                        "name": "y"
                    },
                    {
                        "default": "True",
                        "name": "rowvar"
                    },
                    {
                        "default": "False",
                        "name": "bias"
                    },
                    {
                        "default": "True",
                        "name": "allow_masked"
                    },
                    {
                        "default": "None",
                        "name": "ddof"
                    }
                ]
            },
            "cov": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "default": "None",
                        "name": "y"
                    },
                    {
                        "default": "True",
                        "name": "rowvar"
                    },
                    {
                        "default": "False",
                        "name": "bias"
                    },
                    {
                        "default": "True",
                        "name": "allow_masked"
                    },
                    {
                        "default": "None",
                        "name": "ddof"
                    }
                ]
            },
            "dot": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "b"
                    },
                    {
                        "default": "False",
                        "name": "strict"
                    }
                ]
            },
            "ediff1d": {
                "args": [
                    {
                        "name": "arr"
                    },
                    {
                        "default": "None",
                        "name": "to_end"
                    },
                    {
                        "default": "None",
                        "name": "to_begin"
                    }
                ]
            },
            "flatten_inplace": {
                "args": [
                    {
                        "name": "seq"
                    }
                ]
            },
            "getdoc": {
                "args": []
            },
            "in1d": {
                "args": [
                    {
                        "name": "ar1"
                    },
                    {
                        "name": "ar2"
                    },
                    {
                        "default": "False",
                        "name": "assume_unique"
                    },
                    {
                        "default": "False",
                        "name": "invert"
                    }
                ]
            },
            "intersect1d": {
                "args": [
                    {
                        "name": "ar1"
                    },
                    {
                        "name": "ar2"
                    },
                    {
                        "default": "False",
                        "name": "assume_unique"
                    }
                ]
            },
            "mask_cols": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "axis"
                    }
                ]
            },
            "mask_rowcols": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "axis"
                    }
                ]
            },
            "mask_rows": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "axis"
                    }
                ]
            },
            "median": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "axis"
                    },
                    {
                        "default": "None",
                        "name": "out"
                    },
                    {
                        "default": "False",
                        "name": "overwrite_input"
                    }
                ]
            },
            "setdiff1d": {
                "args": [
                    {
                        "name": "ar1"
                    },
                    {
                        "name": "ar2"
                    },
                    {
                        "default": "False",
                        "name": "assume_unique"
                    }
                ]
            },
            "setxor1d": {
                "args": [
                    {
                        "name": "ar1"
                    },
                    {
                        "name": "ar2"
                    },
                    {
                        "default": "False",
                        "name": "assume_unique"
                    }
                ]
            },
            "union1d": {
                "args": [
                    {
                        "name": "ar1"
                    },
                    {
                        "name": "ar2"
                    }
                ]
            },
            "unique": {
                "args": [
                    {
                        "name": "ar1"
                    },
                    {
                        "default": "False",
                        "name": "return_index"
                    },
                    {
                        "default": "False",
                        "name": "return_inverse"
                    }
                ]
            }
        }
    },
    "f2py2e": {
        "*": {
            "buildmodules": {
                "args": [
                    {
                        "name": "lst"
                    }
                ]
            },
            "callcrackfortran": {
                "args": [
                    {
                        "name": "files"
                    },
                    {
                        "name": "options"
                    }
                ]
            },
            "dict_append": {
                "args": [
                    {
                        "name": "d_out"
                    },
                    {
                        "name": "d_in"
                    }
                ]
            },
            "filter_files": {
                "args": [
                    {
                        "name": "prefix"
                    },
                    {
                        "name": "suffix"
                    },
                    {
                        "name": "files"
                    },
                    {
                        "default": "None",
                        "name": "remove_prefix"
                    }
                ]
            },
            "get_prefix": {
                "args": [
                    {
                        "name": "module"
                    }
                ]
            },
            "main": {
                "args": [
                    {
                        "name": ""
                    }
                ]
            },
            "run_compile": {
                "args": [
                    {
                        "name": ""
                    }
                ]
            },
            "run_main": {
                "args": [
                    {
                        "name": "comline_list"
                    }
                ]
            },
            "scaninputline": {
                "args": [
                    {
                        "name": "inputline"
                    }
                ]
            }
        }
    },
    "f2py_testing": {
        "*": {
            "cmdline": {
                "args": [
                    {
                        "name": ""
                    }
                ]
            },
            "run": {
                "args": [
                    {
                        "name": "runtest"
                    },
                    {
                        "name": "test_functions"
                    },
                    {
                        "default": "1",
                        "name": "repeat"
                    }
                ]
            }
        }
    },
    "f90mod_rules": {
        "*": {
            "buildhooks": {
                "args": [
                    {
                        "name": "pymod"
                    }
                ]
            },
            "cadd": {
                "args": [
                    {
                        "name": "line"
                    },
                    {
                        "default": "chooks): s[0] = '%s\\n%s'%(s[0]",
                        "name": "s"
                    },
                    {
                        "name": "line"
                    }
                ]
            },
            "dadd": {
                "args": [
                    {
                        "name": "line"
                    },
                    {
                        "default": "doc): s[0] = '%s\\n%s'%(s[0]",
                        "name": "s"
                    },
                    {
                        "name": "line"
                    }
                ]
            },
            "fadd": {
                "args": [
                    {
                        "name": "line"
                    },
                    {
                        "default": "fhooks): s[0] = '%s\\n      %s'%(s[0]",
                        "name": "s"
                    },
                    {
                        "name": "line"
                    }
                ]
            },
            "findf90modules": {
                "args": [
                    {
                        "name": "m"
                    }
                ]
            },
            "iadd": {
                "args": [
                    {
                        "name": "line"
                    },
                    {
                        "default": "ihooks): s[0] = '%s\\n%s'%(s[0]",
                        "name": "s"
                    },
                    {
                        "name": "line"
                    }
                ]
            }
        }
    },
    "fft": {
        "*": {}
    },
    "fftpack": {
        "*": {
            "_cook_nd_args": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "s"
                    },
                    {
                        "default": "None",
                        "name": "axes"
                    },
                    {
                        "default": "0",
                        "name": "invreal"
                    }
                ]
            },
            "_raw_fft": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "n"
                    },
                    {
                        "default": "-1",
                        "name": "axis"
                    },
                    {
                        "default": "fftpack.cffti",
                        "name": "init_function"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "fftpack.cfftf",
                        "name": "work_function"
                    },
                    {
                        "default": " _fft_cache",
                        "name": "fft_cache "
                    }
                ]
            },
            "_raw_fftnd": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "s"
                    },
                    {
                        "default": "None",
                        "name": "axes"
                    },
                    {
                        "default": "fft",
                        "name": "function"
                    }
                ]
            },
            "fft": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "n"
                    },
                    {
                        "default": "-1",
                        "name": "axis"
                    }
                ]
            },
            "fft2": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "s"
                    },
                    {
                        "default": "(-2",
                        "name": "axes"
                    },
                    {
                        "name": "-1"
                    }
                ]
            },
            "fftn": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "s"
                    },
                    {
                        "default": "None",
                        "name": "axes"
                    }
                ]
            },
            "hfft": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "n"
                    },
                    {
                        "default": "-1",
                        "name": "axis"
                    }
                ]
            },
            "ifft": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "n"
                    },
                    {
                        "default": "-1",
                        "name": "axis"
                    }
                ]
            },
            "ifft2": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "s"
                    },
                    {
                        "default": "(-2",
                        "name": "axes"
                    },
                    {
                        "name": "-1"
                    }
                ]
            },
            "ifftn": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "s"
                    },
                    {
                        "default": "None",
                        "name": "axes"
                    }
                ]
            },
            "ihfft": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "n"
                    },
                    {
                        "default": "-1",
                        "name": "axis"
                    }
                ]
            },
            "irfft": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "n"
                    },
                    {
                        "default": "-1",
                        "name": "axis"
                    }
                ]
            },
            "irfft2": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "s"
                    },
                    {
                        "default": "(-2",
                        "name": "axes"
                    },
                    {
                        "name": "-1"
                    }
                ]
            },
            "irfftn": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "s"
                    },
                    {
                        "default": "None",
                        "name": "axes"
                    }
                ]
            },
            "rfft": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "n"
                    },
                    {
                        "default": "-1",
                        "name": "axis"
                    }
                ]
            },
            "rfft2": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "s"
                    },
                    {
                        "default": "(-2",
                        "name": "axes"
                    },
                    {
                        "name": "-1"
                    }
                ]
            },
            "rfftn": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "s"
                    },
                    {
                        "default": "None",
                        "name": "axes"
                    }
                ]
            }
        }
    },
    "financial": {
        "*": {
            "_convert_when": {
                "args": [
                    {
                        "name": "when"
                    }
                ]
            },
            "_g_div_gp": {
                "args": [
                    {
                        "name": "r"
                    },
                    {
                        "name": "n"
                    },
                    {
                        "name": "p"
                    },
                    {
                        "name": "x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "w"
                    }
                ]
            },
            "_rbl": {
                "args": [
                    {
                        "name": "rate"
                    },
                    {
                        "name": "per"
                    },
                    {
                        "name": "pmt"
                    },
                    {
                        "name": "pv"
                    },
                    {
                        "name": "when"
                    }
                ]
            },
            "fv": {
                "args": [
                    {
                        "name": "rate"
                    },
                    {
                        "name": "nper"
                    },
                    {
                        "name": "pmt"
                    },
                    {
                        "name": "pv"
                    },
                    {
                        "default": "'end'",
                        "name": "when"
                    }
                ]
            },
            "ipmt": {
                "args": [
                    {
                        "name": "rate"
                    },
                    {
                        "name": "per"
                    },
                    {
                        "name": "nper"
                    },
                    {
                        "name": "pv"
                    },
                    {
                        "default": "0.0",
                        "name": "fv"
                    },
                    {
                        "default": "'end'",
                        "name": "when"
                    }
                ]
            },
            "irr": {
                "args": [
                    {
                        "name": "values"
                    }
                ]
            },
            "mirr": {
                "args": [
                    {
                        "name": "values"
                    },
                    {
                        "name": "finance_rate"
                    },
                    {
                        "name": "reinvest_rate"
                    }
                ]
            },
            "nper": {
                "args": [
                    {
                        "name": "rate"
                    },
                    {
                        "name": "pmt"
                    },
                    {
                        "name": "pv"
                    },
                    {
                        "default": "0",
                        "name": "fv"
                    },
                    {
                        "default": "'end'",
                        "name": "when"
                    }
                ]
            },
            "npv": {
                "args": [
                    {
                        "name": "rate"
                    },
                    {
                        "name": "values"
                    }
                ]
            },
            "pmt": {
                "args": [
                    {
                        "name": "rate"
                    },
                    {
                        "name": "nper"
                    },
                    {
                        "name": "pv"
                    },
                    {
                        "default": "0",
                        "name": "fv"
                    },
                    {
                        "default": "'end'",
                        "name": "when"
                    }
                ]
            },
            "ppmt": {
                "args": [
                    {
                        "name": "rate"
                    },
                    {
                        "name": "per"
                    },
                    {
                        "name": "nper"
                    },
                    {
                        "name": "pv"
                    },
                    {
                        "default": "0.0",
                        "name": "fv"
                    },
                    {
                        "default": "'end'",
                        "name": "when"
                    }
                ]
            },
            "pv": {
                "args": [
                    {
                        "name": "rate"
                    },
                    {
                        "name": "nper"
                    },
                    {
                        "name": "pmt"
                    },
                    {
                        "default": "0.0",
                        "name": "fv"
                    },
                    {
                        "default": "'end'",
                        "name": "when"
                    }
                ]
            },
            "rate": {
                "args": [
                    {
                        "name": "nper"
                    },
                    {
                        "name": "pmt"
                    },
                    {
                        "name": "pv"
                    },
                    {
                        "name": "fv"
                    },
                    {
                        "default": "'end'",
                        "name": "when"
                    },
                    {
                        "default": "0.10",
                        "name": "guess"
                    },
                    {
                        "default": "1e-6",
                        "name": "tol"
                    },
                    {
                        "default": "100",
                        "name": "maxiter"
                    }
                ]
            }
        }
    },
    "fix_default_axis": {
        "*": {
            "_add_axis": {
                "args": [
                    {
                        "name": "fstr"
                    },
                    {
                        "name": "name"
                    },
                    {
                        "name": "repl"
                    }
                ]
            },
            "_func": {
                "args": [
                    {
                        "name": "arg"
                    },
                    {
                        "name": "dirname"
                    },
                    {
                        "name": "fnames"
                    }
                ]
            },
            "_import_change": {
                "args": [
                    {
                        "name": "fstr"
                    },
                    {
                        "name": "names"
                    }
                ]
            },
            "add_axis": {
                "args": [
                    {
                        "name": "fstr"
                    },
                    {
                        "default": "False",
                        "name": "import_change"
                    }
                ]
            },
            "convertall": {
                "args": [
                    {
                        "default": "os.path.curdir",
                        "name": "direc"
                    },
                    {
                        "default": "False",
                        "name": "import_change"
                    }
                ]
            },
            "convertfile": {
                "args": [
                    {
                        "name": "filename"
                    },
                    {
                        "default": "False",
                        "name": "import_change"
                    }
                ]
            },
            "converttree": {
                "args": [
                    {
                        "default": "os.path.curdir",
                        "name": "direc"
                    },
                    {
                        "default": "False",
                        "name": "import_change"
                    }
                ]
            },
            "copyfile": {
                "args": [
                    {
                        "name": "name"
                    },
                    {
                        "name": "fstr"
                    }
                ]
            },
            "fromargs": {
                "args": [
                    {
                        "name": "args"
                    }
                ]
            },
            "getfile": {
                "args": [
                    {
                        "name": "name"
                    }
                ]
            },
            "makenewfile": {
                "args": [
                    {
                        "name": "name"
                    },
                    {
                        "name": "filestr"
                    }
                ]
            }
        }
    },
    "format": {
        "*": {
            "_read_bytes": {
                "args": [
                    {
                        "name": "fp"
                    },
                    {
                        "name": "size"
                    },
                    {
                        "default": "\"ran out of data\"",
                        "name": "error_template"
                    }
                ]
            },
            "dtype_to_descr": {
                "args": [
                    {
                        "name": "dtype"
                    }
                ]
            },
            "header_data_from_array_1_0": {
                "args": [
                    {
                        "name": "array"
                    }
                ]
            },
            "magic": {
                "args": [
                    {
                        "name": "major"
                    },
                    {
                        "name": "minor"
                    }
                ]
            },
            "open_memmap": {
                "args": [
                    {
                        "name": "filename"
                    },
                    {
                        "default": "'r+'",
                        "name": "mode"
                    },
                    {
                        "default": "None",
                        "name": "dtype"
                    },
                    {
                        "default": "None",
                        "name": "shape"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "False",
                        "name": "fortran_order"
                    },
                    {
                        "default": "(1",
                        "name": "version"
                    },
                    {
                        "name": "0"
                    }
                ]
            },
            "read_array": {
                "args": [
                    {
                        "name": "fp"
                    }
                ]
            },
            "read_array_header_1_0": {
                "args": [
                    {
                        "name": "fp"
                    }
                ]
            },
            "read_magic": {
                "args": [
                    {
                        "name": "fp"
                    }
                ]
            },
            "write_array": {
                "args": [
                    {
                        "name": "fp"
                    },
                    {
                        "name": "array"
                    },
                    {
                        "default": "(1",
                        "name": "version"
                    },
                    {
                        "name": "0"
                    }
                ]
            },
            "write_array_header_1_0": {
                "args": [
                    {
                        "name": "fp"
                    },
                    {
                        "name": "d"
                    }
                ]
            }
        }
    },
    "from_template": {
        "*": {
            "conv": {
                "args": [
                    {
                        "name": "astr"
                    }
                ]
            },
            "expand_sub": {
                "args": [
                    {
                        "name": "substr"
                    },
                    {
                        "name": "names"
                    }
                ]
            },
            "find_repl_patterns": {
                "args": [
                    {
                        "name": "astr"
                    }
                ]
            },
            "listrepl": {
                "args": [
                    {
                        "name": "mobj"
                    }
                ]
            },
            "namerepl": {
                "args": [
                    {
                        "name": "mobj"
                    }
                ]
            },
            "parse_structure": {
                "args": [
                    {
                        "name": "astr"
                    }
                ]
            },
            "process_file": {
                "args": [
                    {
                        "name": "source"
                    }
                ]
            },
            "process_str": {
                "args": [
                    {
                        "name": "allstr"
                    }
                ]
            },
            "resolve_includes": {
                "args": [
                    {
                        "name": "source"
                    }
                ]
            },
            "unique_key": {
                "args": [
                    {
                        "name": "adict"
                    }
                ]
            }
        }
    },
    "fromnumeric": {
        "*": {
            "": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "axis"
                    },
                    {
                        "default": "None",
                        "name": "dtype"
                    },
                    {
                        "default": "None",
                        "name": "out"
                    }
                ]
            },
            "_wrapit": {
                "args": [
                    {
                        "name": "obj"
                    },
                    {
                        "name": "method"
                    },
                    {
                        "name": "*args"
                    },
                    {
                        "name": "**kwds"
                    }
                ]
            },
            "alen": {
                "args": [
                    {
                        "name": "a"
                    }
                ]
            },
            "all": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "axis"
                    },
                    {
                        "default": "None",
                        "name": "out"
                    },
                    {
                        "default": "False",
                        "name": "keepdims"
                    }
                ]
            },
            "amax": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "axis"
                    },
                    {
                        "default": "None",
                        "name": "out"
                    },
                    {
                        "default": "False",
                        "name": "keepdims"
                    }
                ]
            },
            "amin": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "axis"
                    },
                    {
                        "default": "None",
                        "name": "out"
                    },
                    {
                        "default": "False",
                        "name": "keepdims"
                    }
                ]
            },
            "any": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "axis"
                    },
                    {
                        "default": "None",
                        "name": "out"
                    },
                    {
                        "default": "False",
                        "name": "keepdims"
                    }
                ]
            },
            "argmax": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "axis"
                    }
                ]
            },
            "argmin": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "axis"
                    }
                ]
            },
            "argpartition": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "kth"
                    },
                    {
                        "default": "-1",
                        "name": "axis"
                    },
                    {
                        "default": "'introselect'",
                        "name": "kind"
                    },
                    {
                        "default": "None",
                        "name": "order"
                    }
                ]
            },
            "argsort": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "-1",
                        "name": "axis"
                    },
                    {
                        "default": "'quicksort'",
                        "name": "kind"
                    },
                    {
                        "default": "None",
                        "name": "order"
                    }
                ]
            },
            "around": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "0",
                        "name": "decimals"
                    },
                    {
                        "default": "None",
                        "name": "out"
                    }
                ]
            },
            "choose": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "choices"
                    },
                    {
                        "default": "None",
                        "name": "out"
                    },
                    {
                        "default": "'raise'",
                        "name": "mode"
                    }
                ]
            },
            "clip": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "a_min"
                    },
                    {
                        "name": "a_max"
                    },
                    {
                        "default": "None",
                        "name": "out"
                    }
                ]
            },
            "compress": {
                "args": [
                    {
                        "name": "condition"
                    },
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "axis"
                    },
                    {
                        "default": "None",
                        "name": "out"
                    }
                ]
            },
            "cumprod": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "axis"
                    },
                    {
                        "default": "None",
                        "name": "dtype"
                    },
                    {
                        "default": "None",
                        "name": "out"
                    }
                ]
            },
            "cumproduct": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "axis"
                    },
                    {
                        "default": "None",
                        "name": "dtype"
                    },
                    {
                        "default": "None",
                        "name": "out"
                    }
                ]
            },
            "diagonal": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "0",
                        "name": "offset"
                    },
                    {
                        "default": "0",
                        "name": "axis1"
                    },
                    {
                        "default": "1",
                        "name": "axis2"
                    }
                ]
            },
            "mean": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "axis"
                    },
                    {
                        "default": "None",
                        "name": "dtype"
                    },
                    {
                        "default": "None",
                        "name": "out"
                    },
                    {
                        "default": "False",
                        "name": "keepdims"
                    }
                ]
            },
            "ndim": {
                "args": [
                    {
                        "name": "a"
                    }
                ]
            },
            "nonzero": {
                "args": [
                    {
                        "name": "a"
                    }
                ]
            },
            "partition": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "kth"
                    },
                    {
                        "default": "-1",
                        "name": "axis"
                    },
                    {
                        "default": "'introselect'",
                        "name": "kind"
                    },
                    {
                        "default": "None",
                        "name": "order"
                    }
                ]
            },
            "prod": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "axis"
                    },
                    {
                        "default": "None",
                        "name": "dtype"
                    },
                    {
                        "default": "None",
                        "name": "out"
                    },
                    {
                        "default": "False",
                        "name": "keepdims"
                    }
                ]
            },
            "ptp": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "axis"
                    },
                    {
                        "default": "None",
                        "name": "out"
                    }
                ]
            },
            "put": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "ind"
                    },
                    {
                        "name": "v"
                    },
                    {
                        "default": "'raise'",
                        "name": "mode"
                    }
                ]
            },
            "rank": {
                "args": [
                    {
                        "name": "a"
                    }
                ]
            },
            "ravel": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "'C'",
                        "name": "order"
                    }
                ]
            },
            "repeat": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "repeats"
                    },
                    {
                        "default": "None",
                        "name": "axis"
                    }
                ]
            },
            "reshape": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "newshape"
                    },
                    {
                        "default": "'C'",
                        "name": "order"
                    }
                ]
            },
            "resize": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "new_shape"
                    }
                ]
            },
            "round_": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "0",
                        "name": "decimals"
                    },
                    {
                        "default": "None",
                        "name": "out"
                    }
                ]
            },
            "searchsorted": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "v"
                    },
                    {
                        "default": "'left'",
                        "name": "side"
                    },
                    {
                        "default": "None",
                        "name": "sorter"
                    }
                ]
            },
            "shape": {
                "args": [
                    {
                        "name": "a"
                    }
                ]
            },
            "size": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "axis"
                    }
                ]
            },
            "sometrue": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "axis"
                    },
                    {
                        "default": "None",
                        "name": "out"
                    },
                    {
                        "default": "False",
                        "name": "keepdims"
                    }
                ]
            },
            "sort": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "-1",
                        "name": "axis"
                    },
                    {
                        "default": "'quicksort'",
                        "name": "kind"
                    },
                    {
                        "default": "None",
                        "name": "order"
                    }
                ]
            },
            "squeeze": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "axis"
                    }
                ]
            },
            "std": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "axis"
                    },
                    {
                        "default": "None",
                        "name": "dtype"
                    },
                    {
                        "default": "None",
                        "name": "out"
                    },
                    {
                        "default": "0",
                        "name": "ddof"
                    },
                    {
                        "default": "False",
                        "name": "keepdims"
                    }
                ]
            },
            "sum": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "axis"
                    },
                    {
                        "default": "None",
                        "name": "dtype"
                    },
                    {
                        "default": "None",
                        "name": "out"
                    },
                    {
                        "default": "False",
                        "name": "keepdims"
                    }
                ]
            },
            "swapaxes": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "axis1"
                    },
                    {
                        "name": "axis2"
                    }
                ]
            },
            "take": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "indices"
                    },
                    {
                        "default": "None",
                        "name": "axis"
                    },
                    {
                        "default": "None",
                        "name": "out"
                    },
                    {
                        "default": "'raise'",
                        "name": "mode"
                    }
                ]
            },
            "trace": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "0",
                        "name": "offset"
                    },
                    {
                        "default": "0",
                        "name": "axis1"
                    },
                    {
                        "default": "1",
                        "name": "axis2"
                    },
                    {
                        "default": "None",
                        "name": "dtype"
                    },
                    {
                        "default": "None",
                        "name": "out"
                    }
                ]
            },
            "transpose": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "axes"
                    }
                ]
            },
            "var": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "axis"
                    },
                    {
                        "default": "None",
                        "name": "dtype"
                    },
                    {
                        "default": "None",
                        "name": "out"
                    },
                    {
                        "default": "0",
                        "name": "ddof"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "False",
                        "name": "keepdims"
                    }
                ]
            }
        }
    },
    "func2subr": {
        "*": {
            "add": {
                "args": [
                    {
                        "name": "line"
                    },
                    {
                        "default": "ret",
                        "name": "ret"
                    }
                ]
            },
            "assubr": {
                "args": [
                    {
                        "name": "rout"
                    }
                ]
            },
            "createfuncwrapper": {
                "args": [
                    {
                        "name": "rout"
                    },
                    {
                        "default": "0",
                        "name": "signature"
                    }
                ]
            },
            "createsubrwrapper": {
                "args": [
                    {
                        "name": "rout"
                    },
                    {
                        "default": "0",
                        "name": "signature"
                    }
                ]
            },
            "var2fixfortran": {
                "args": [
                    {
                        "name": "vars"
                    },
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "fa"
                    },
                    {
                        "default": "None",
                        "name": "f90mode"
                    }
                ]
            }
        }
    },
    "function_base": {
        "*": {
            "linspace": {
                "args": [
                    {
                        "name": "start"
                    },
                    {
                        "name": "stop"
                    },
                    {
                        "default": "50",
                        "name": "num"
                    },
                    {
                        "default": "True",
                        "name": "endpoint"
                    },
                    {
                        "default": "False",
                        "name": "retstep"
                    }
                ]
            },
            "logspace": {
                "args": [
                    {
                        "name": "start"
                    },
                    {
                        "name": "stop"
                    },
                    {
                        "default": "50",
                        "name": "num"
                    },
                    {
                        "default": "True",
                        "name": "endpoint"
                    },
                    {
                        "default": "10.0",
                        "name": "base"
                    }
                ]
            }
        }
    },
    "functions": {
        "*": {
            "alltrue": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "default": "0",
                        "name": "axis"
                    }
                ]
            },
            "and_": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "b"
                    }
                ]
            },
            "arange": {
                "args": [
                    {
                        "name": "a1"
                    },
                    {
                        "default": "None",
                        "name": "a2"
                    },
                    {
                        "default": "1",
                        "name": "stride"
                    },
                    {
                        "default": "None",
                        "name": "type"
                    },
                    {
                        "default": "None",
                        "name": "shape"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "None",
                        "name": "typecode"
                    },
                    {
                        "default": "None",
                        "name": "dtype"
                    }
                ]
            },
            "around": {
                "args": [
                    {
                        "name": "array"
                    },
                    {
                        "default": "0",
                        "name": "digits"
                    },
                    {
                        "default": "None",
                        "name": "output"
                    }
                ]
            },
            "array2list": {
                "args": [
                    {
                        "name": "arr"
                    }
                ]
            },
            "choose": {
                "args": [
                    {
                        "name": "selector"
                    },
                    {
                        "name": "population"
                    },
                    {
                        "default": "None",
                        "name": "outarr"
                    },
                    {
                        "default": "RAISE",
                        "name": "clipmode"
                    }
                ]
            },
            "compress": {
                "args": [
                    {
                        "name": "condition"
                    },
                    {
                        "name": "a"
                    },
                    {
                        "default": "0",
                        "name": "axis"
                    }
                ]
            },
            "divide_remainder": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "b"
                    }
                ]
            },
            "explicit_type": {
                "args": [
                    {
                        "name": "a"
                    }
                ]
            },
            "flush_caches": {
                "args": [
                    {
                        "name": ""
                    }
                ]
            },
            "fromfunction": {
                "args": [
                    {
                        "name": "shape"
                    },
                    {
                        "name": "dimensions"
                    },
                    {
                        "default": "None",
                        "name": "type"
                    },
                    {
                        "default": "None",
                        "name": "typecode"
                    },
                    {
                        "default": "None",
                        "name": "dtype"
                    }
                ]
            },
            "indices": {
                "args": [
                    {
                        "name": "shape"
                    },
                    {
                        "default": "None",
                        "name": "type"
                    }
                ]
            },
            "ones": {
                "args": [
                    {
                        "name": "shape"
                    },
                    {
                        "default": "None",
                        "name": "type"
                    },
                    {
                        "default": "None",
                        "name": "typecode"
                    },
                    {
                        "default": "None",
                        "name": "dtype"
                    }
                ]
            },
            "type2dtype": {
                "args": [
                    {
                        "name": "typecode"
                    },
                    {
                        "name": "type"
                    },
                    {
                        "name": "dtype"
                    },
                    {
                        "default": "True",
                        "name": "use_default"
                    }
                ]
            },
            "where": {
                "args": [
                    {
                        "name": "condition"
                    },
                    {
                        "default": "None",
                        "name": "x"
                    },
                    {
                        "default": "None",
                        "name": "y"
                    },
                    {
                        "default": "None",
                        "name": "out"
                    }
                ]
            },
            "zeros": {
                "args": [
                    {
                        "name": "shape"
                    },
                    {
                        "default": "None",
                        "name": "type"
                    },
                    {
                        "default": "None",
                        "name": "typecode"
                    },
                    {
                        "default": "None",
                        "name": "dtype"
                    }
                ]
            }
        },
        "EarlyEOFError": {},
        "SizeMismatchError": {},
        "SizeMismatchWarning": {}
    },
    "g95": {
        "*": {}
    },
    "generate_numpy_api": {
        "*": {
            "do_generate_api": {
                "args": [
                    {
                        "name": "targets"
                    },
                    {
                        "name": "sources"
                    }
                ]
            },
            "generate_api": {
                "args": [
                    {
                        "name": "output_dir"
                    },
                    {
                        "default": "False",
                        "name": "force"
                    }
                ]
            }
        }
    },
    "getlimits": {
        "*": {
            "_frz": {
                "args": [
                    {
                        "name": "a"
                    }
                ]
            }
        },
        "finfo": {
            "__new__": {
                "args": [
                    {
                        "name": "cls"
                    },
                    {
                        "name": "dtype"
                    }
                ]
            },
            "__repr__": {
                "args": []
            },
            "__str__": {
                "args": []
            },
            "_init": {
                "args": [
                    {
                        "name": "dtype"
                    }
                ]
            }
        }
    },
    "gnu": {
        "*": {
            "is_win64": {
                "args": [
                    {
                        "name": ""
                    }
                ]
            }
        },
        "GnuFCompiler": {
            "_c_arch_flags": {
                "args": []
            },
            "get_flags_arch": {
                "args": []
            },
            "get_flags_debug": {
                "args": []
            },
            "get_flags_linker_so": {
                "args": []
            },
            "get_flags_opt": {
                "args": []
            },
            "get_libgcc_dir": {
                "args": []
            },
            "get_libraries": {
                "args": []
            },
            "get_library_dirs": {
                "args": []
            },
            "gnu_version_match": {
                "args": [
                    {
                        "name": "version_string"
                    }
                ]
            },
            "version_match": {
                "args": [
                    {
                        "name": "version_string"
                    }
                ]
            }
        }
    },
    "helper": {
        "*": {
            "fftfreq": {
                "args": [
                    {
                        "name": "n"
                    },
                    {
                        "default": "1.0",
                        "name": "d"
                    }
                ]
            },
            "fftshift": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "default": "None",
                        "name": "axes"
                    }
                ]
            },
            "ifftshift": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "default": "None",
                        "name": "axes"
                    }
                ]
            },
            "rfftfreq": {
                "args": [
                    {
                        "name": "n"
                    },
                    {
                        "default": "1.0",
                        "name": "d"
                    }
                ]
            }
        }
    },
    "hermite": {
        "*": {
            "hermcompanion": {
                "args": [
                    {
                        "name": "c"
                    }
                ]
            },
            "hermdiv": {
                "args": [
                    {
                        "name": "c1"
                    },
                    {
                        "name": "c2"
                    }
                ]
            },
            "hermgauss": {
                "args": [
                    {
                        "name": "deg"
                    }
                ]
            },
            "hermgrid2d": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "c"
                    }
                ]
            },
            "hermgrid3d": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z"
                    },
                    {
                        "name": "c"
                    }
                ]
            },
            "hermint": {
                "args": [
                    {
                        "name": "c"
                    },
                    {
                        "default": "1",
                        "name": "m"
                    },
                    {
                        "default": "[]",
                        "name": "k"
                    },
                    {
                        "default": "0",
                        "name": "lbnd"
                    },
                    {
                        "default": "1",
                        "name": "scl"
                    },
                    {
                        "default": "0",
                        "name": "axis"
                    }
                ]
            },
            "hermmul": {
                "args": [
                    {
                        "name": "c1"
                    },
                    {
                        "name": "c2"
                    }
                ]
            },
            "hermmulx": {
                "args": [
                    {
                        "name": "c"
                    }
                ]
            },
            "hermpow": {
                "args": [
                    {
                        "name": "c"
                    },
                    {
                        "name": "pow"
                    },
                    {
                        "default": "16) :",
                        "name": "maxpower"
                    },
                    {
                        "name": "\"\"\"Raise a Hermite series to a power."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns the Hermite series `c` raised to the power `pow`. The"
                    },
                    {
                        "name": "argument `c` is a sequence of coefficients ordered from low to high."
                    },
                    {
                        "name": "i.e."
                    },
                    {
                        "name": "[1"
                    },
                    {
                        "name": "2"
                    },
                    {
                        "name": "3] is the series  ``P_0 + 2*P_1 + 3*P_2.``"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "c : array_like"
                    },
                    {
                        "name": "1-D array of Hermite series coefficients ordered from low to"
                    },
                    {
                        "name": "high."
                    },
                    {
                        "name": "pow : integer"
                    },
                    {
                        "name": "Power to which the series will be raised"
                    },
                    {
                        "name": "maxpower : integer"
                    },
                    {
                        "name": "optional"
                    },
                    {
                        "name": "Maximum power allowed. This is mainly to limit growth of the series"
                    },
                    {
                        "name": "to unmanageable size. Default is 16"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "coef : ndarray"
                    },
                    {
                        "name": "Hermite series of power."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "See Also"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": "hermadd"
                    },
                    {
                        "name": "hermsub"
                    },
                    {
                        "name": "hermmul"
                    },
                    {
                        "name": "hermdiv"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Examples"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": ">>> from numpy.polynomial.hermite import hermpow"
                    },
                    {
                        "name": ">>> hermpow([1"
                    },
                    {
                        "name": "2"
                    },
                    {
                        "name": "3]"
                    },
                    {
                        "name": "2)"
                    },
                    {
                        "name": "array([ 81."
                    },
                    {
                        "name": "52."
                    },
                    {
                        "name": "82."
                    },
                    {
                        "name": "12."
                    },
                    {
                        "name": "9.])"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "name": "# c is a trimmed copy"
                    },
                    {
                        "default": " pu.as_series([c])",
                        "name": "[c] "
                    },
                    {
                        "default": " int(pow)",
                        "name": "power "
                    },
                    {
                        "default": " pow or power < 0 :",
                        "name": "if power !"
                    },
                    {
                        "name": "raise ValueError(\"Power must be a non-negative integer.\")"
                    },
                    {
                        "name": "elif maxpower is not None and power > maxpower :"
                    },
                    {
                        "name": "raise ValueError(\"Power is too large\")"
                    },
                    {
                        "default": "= 0 :",
                        "name": "elif power "
                    },
                    {
                        "name": "return np.array([1]"
                    },
                    {
                        "default": "c.dtype)",
                        "name": "dtype"
                    },
                    {
                        "default": "= 1 :",
                        "name": "elif power "
                    },
                    {
                        "name": "return c"
                    },
                    {
                        "name": "else :"
                    },
                    {
                        "name": "# This can be made more efficient by using powers of two"
                    },
                    {
                        "name": "# in the usual way."
                    },
                    {
                        "default": " c",
                        "name": "prd "
                    },
                    {
                        "name": "for i in range(2"
                    },
                    {
                        "name": "power + 1) :"
                    },
                    {
                        "default": " hermmul(prd",
                        "name": "prd "
                    },
                    {
                        "name": "c)"
                    },
                    {
                        "name": "return prd"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def hermder(c"
                    },
                    {
                        "default": "1",
                        "name": "m"
                    },
                    {
                        "default": "1",
                        "name": "scl"
                    },
                    {
                        "default": "0) :",
                        "name": "axis"
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "name": "Differentiate a Hermite series."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns the Hermite series coefficients `c` differentiated `m` times"
                    },
                    {
                        "name": "along `axis`.  At each iteration the result is multiplied by `scl` (the"
                    },
                    {
                        "name": "scaling factor is for use in a linear change of variable). The argument"
                    },
                    {
                        "name": "`c` is an array of coefficients from low to high degree along each"
                    },
                    {
                        "name": "axis"
                    },
                    {
                        "name": "e.g."
                    },
                    {
                        "name": "[1"
                    },
                    {
                        "name": "2"
                    },
                    {
                        "name": "3] represents the series ``1*H_0 + 2*H_1 + 3*H_2``"
                    },
                    {
                        "name": "while [[1"
                    },
                    {
                        "name": "2]"
                    },
                    {
                        "name": "[1"
                    },
                    {
                        "name": "2]] represents ``1*H_0(x)*H_0(y) + 1*H_1(x)*H_0(y) +"
                    },
                    {
                        "default": "0 is ``x`` and axis=1 is",
                        "name": "2*H_0(x)*H_1(y) + 2*H_1(x)*H_1(y)`` if axis"
                    },
                    {
                        "name": "``y``."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "c : array_like"
                    },
                    {
                        "name": "Array of Hermite series coefficients. If `c` is multidimensional the"
                    },
                    {
                        "name": "different axis correspond to different variables with the degree in"
                    },
                    {
                        "name": "each axis given by the corresponding index."
                    },
                    {
                        "name": "m : int"
                    },
                    {
                        "name": "optional"
                    },
                    {
                        "name": "Number of derivatives taken"
                    },
                    {
                        "name": "must be non-negative. (Default: 1)"
                    },
                    {
                        "name": "scl : scalar"
                    },
                    {
                        "name": "optional"
                    },
                    {
                        "name": "Each differentiation is multiplied by `scl`.  The end result is"
                    },
                    {
                        "name": "multiplication by ``scl**m``.  This is for use in a linear change of"
                    },
                    {
                        "name": "variable. (Default: 1)"
                    },
                    {
                        "name": "axis : int"
                    },
                    {
                        "name": "optional"
                    },
                    {
                        "name": "Axis over which the derivative is taken. (Default: 0)."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ".. versionadded:: 1.7.0"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "der : ndarray"
                    },
                    {
                        "name": "Hermite series of the derivative."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "See Also"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": "hermint"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Notes"
                    },
                    {
                        "name": "-----"
                    },
                    {
                        "name": "In general"
                    },
                    {
                        "name": "the result of differentiating a Hermite series does not"
                    },
                    {
                        "name": "resemble the same operation on a power series. Thus the result of this"
                    },
                    {
                        "name": "function may be \"unintuitive"
                    },
                    {
                        "name": "\" albeit correct; see Examples section"
                    },
                    {
                        "name": "below."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Examples"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": ">>> from numpy.polynomial.hermite import hermder"
                    },
                    {
                        "name": ">>> hermder([ 1."
                    },
                    {
                        "name": "0.5"
                    },
                    {
                        "name": "0.5"
                    },
                    {
                        "name": "0.5])"
                    },
                    {
                        "name": "array([ 1."
                    },
                    {
                        "name": "2."
                    },
                    {
                        "name": "3.])"
                    },
                    {
                        "name": ">>> hermder([-0.5"
                    },
                    {
                        "name": "1./2."
                    },
                    {
                        "name": "1./8."
                    },
                    {
                        "name": "1./12."
                    },
                    {
                        "name": "1./16.]"
                    },
                    {
                        "default": "2)",
                        "name": "m"
                    },
                    {
                        "name": "array([ 1."
                    },
                    {
                        "name": "2."
                    },
                    {
                        "name": "3.])"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "default": " np.array(c",
                        "name": "c "
                    },
                    {
                        "default": "1",
                        "name": "ndmin"
                    },
                    {
                        "default": "1)",
                        "name": "copy"
                    },
                    {
                        "name": "if c.dtype.char in '?bBhHiIlLqQpP':"
                    },
                    {
                        "default": " c.astype(np.double)",
                        "name": "c "
                    },
                    {
                        "name": "cnt"
                    },
                    {
                        "default": " [int(t) for t in [m",
                        "name": "iaxis "
                    },
                    {
                        "name": "axis]]"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " m:",
                        "name": "if cnt !"
                    },
                    {
                        "name": "raise ValueError(\"The order of derivation must be integer\")"
                    },
                    {
                        "name": "if cnt < 0:"
                    },
                    {
                        "name": "raise ValueError(\"The order of derivation must be non-negative\")"
                    },
                    {
                        "default": " axis:",
                        "name": "if iaxis !"
                    },
                    {
                        "name": "raise ValueError(\"The axis must be integer\")"
                    },
                    {
                        "default": " iaxis < c.ndim:",
                        "name": "if not -c.ndim <"
                    },
                    {
                        "name": "raise ValueError(\"The axis is out of range\")"
                    },
                    {
                        "name": "if iaxis < 0:"
                    },
                    {
                        "default": " c.ndim",
                        "name": "iaxis +"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "= 0:",
                        "name": "if cnt "
                    },
                    {
                        "name": "return c"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " np.rollaxis(c",
                        "name": "c "
                    },
                    {
                        "name": "iaxis)"
                    },
                    {
                        "default": " len(c)",
                        "name": "n "
                    },
                    {
                        "default": " n:",
                        "name": "if cnt >"
                    },
                    {
                        "default": " c[:1]*0",
                        "name": "c "
                    },
                    {
                        "name": "else :"
                    },
                    {
                        "name": "for i in range(cnt"
                    }
                ]
            },
            "hermroots": {
                "args": [
                    {
                        "name": "c"
                    }
                ]
            },
            "hermsub": {
                "args": [
                    {
                        "name": "c1"
                    },
                    {
                        "name": "c2"
                    }
                ]
            },
            "hermval": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "c"
                    },
                    {
                        "default": "True",
                        "name": "tensor"
                    }
                ]
            },
            "hermval2d": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "c"
                    }
                ]
            },
            "hermval3d": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z"
                    },
                    {
                        "name": "c"
                    }
                ]
            },
            "hermvander": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "deg) :"
                    },
                    {
                        "name": "\"\"\"Pseudo-Vandermonde matrix of given degree."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns the pseudo-Vandermonde matrix of degree `deg` and sample points"
                    },
                    {
                        "name": "`x`. The pseudo-Vandermonde matrix is defined by"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ".. math:: V[..."
                    },
                    {
                        "default": " H_i(x)",
                        "name": "i] "
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " i <= deg`. The leading indices of `V` index the elements of",
                        "name": "where `0 <"
                    },
                    {
                        "name": "`x` and the last index is the degree of the Hermite polynomial."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "If `c` is a 1-D array of coefficients of length `n + 1` and `V` is the"
                    },
                    {
                        "default": " hermvander(x",
                        "name": "array ``V "
                    },
                    {
                        "name": "n)``"
                    },
                    {
                        "name": "then ``np.dot(V"
                    },
                    {
                        "name": "c)`` and"
                    },
                    {
                        "name": "``hermval(x"
                    },
                    {
                        "name": "c)`` are the same up to roundoff. This equivalence is"
                    },
                    {
                        "name": "useful both for least squares fitting and for the evaluation of a large"
                    },
                    {
                        "name": "number of Hermite series of the same degree and sample points."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "x : array_like"
                    },
                    {
                        "name": "Array of points. The dtype is converted to float64 or complex128"
                    },
                    {
                        "name": "depending on whether any of the elements are complex. If `x` is"
                    },
                    {
                        "name": "scalar it is converted to a 1-D array."
                    },
                    {
                        "name": "deg : int"
                    },
                    {
                        "name": "Degree of the resulting matrix."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "vander : ndarray"
                    },
                    {
                        "name": "The pseudo-Vandermonde matrix. The shape of the returned matrix is"
                    },
                    {
                        "name": "``x.shape + (deg + 1"
                    },
                    {
                        "name": ")``"
                    },
                    {
                        "name": "where The last index is the degree of the"
                    },
                    {
                        "name": "corresponding Hermite polynomial.  The dtype will be the same as"
                    },
                    {
                        "name": "the converted `x`."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Examples"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": ">>> from numpy.polynomial.hermite import hermvander"
                    },
                    {
                        "default": " np.array([-1",
                        "name": ">>> x "
                    },
                    {
                        "name": "0"
                    },
                    {
                        "name": "1])"
                    },
                    {
                        "name": ">>> hermvander(x"
                    },
                    {
                        "name": "3)"
                    },
                    {
                        "name": "array([[ 1."
                    },
                    {
                        "name": "-2."
                    },
                    {
                        "name": "2."
                    },
                    {
                        "name": "4.]"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "[ 1."
                    },
                    {
                        "name": "0."
                    },
                    {
                        "name": "-2."
                    },
                    {
                        "name": "-0.]"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "[ 1."
                    },
                    {
                        "name": "2."
                    },
                    {
                        "name": "2."
                    },
                    {
                        "name": "-4.]])"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "default": " int(deg)",
                        "name": "ideg "
                    },
                    {
                        "default": " deg:",
                        "name": "if ideg !"
                    },
                    {
                        "name": "raise ValueError(\"deg must be integer\")"
                    },
                    {
                        "name": "if ideg < 0:"
                    },
                    {
                        "name": "raise ValueError(\"deg must be non-negative\")"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " np.array(x",
                        "name": "x "
                    },
                    {
                        "default": "0",
                        "name": "copy"
                    },
                    {
                        "default": "1) + 0.0",
                        "name": "ndmin"
                    },
                    {
                        "default": " (ideg + 1",
                        "name": "dims "
                    },
                    {
                        "name": ") + x.shape"
                    },
                    {
                        "default": " x.dtype",
                        "name": "dtyp "
                    },
                    {
                        "default": " np.empty(dims",
                        "name": "v "
                    },
                    {
                        "default": "dtyp)",
                        "name": "dtype"
                    },
                    {
                        "default": " x*0 + 1",
                        "name": "v[0] "
                    },
                    {
                        "name": "if ideg > 0 :"
                    },
                    {
                        "default": " x*2",
                        "name": "x2 "
                    },
                    {
                        "default": " x2",
                        "name": "v[1] "
                    },
                    {
                        "name": "for i in range(2"
                    },
                    {
                        "name": "ideg + 1) :"
                    },
                    {
                        "default": " (v[i-1]*x2 - v[i-2]*(2*(i - 1)))",
                        "name": "v[i] "
                    },
                    {
                        "name": "return np.rollaxis(v"
                    },
                    {
                        "name": "0"
                    },
                    {
                        "name": "v.ndim)"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def hermvander2d(x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "deg) :"
                    },
                    {
                        "name": "\"\"\"Pseudo-Vandermonde matrix of given degrees."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns the pseudo-Vandermonde matrix of degrees `deg` and sample"
                    },
                    {
                        "name": "points `(x"
                    },
                    {
                        "name": "y)`. The pseudo-Vandermonde matrix is defined by"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ".. math:: V[..."
                    },
                    {
                        "default": " H_i(x) * H_j(y)",
                        "name": "deg[1]*i + j] "
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " i <= deg[0]` and `0 <= j <= deg[1]`. The leading indices of",
                        "name": "where `0 <"
                    },
                    {
                        "name": "`V` index the points `(x"
                    },
                    {
                        "name": "y)` and the last index encodes the degrees of"
                    },
                    {
                        "name": "the Hermite polynomials."
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " hermvander2d(x",
                        "name": "If ``V "
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "[xdeg"
                    },
                    {
                        "name": "ydeg])``"
                    },
                    {
                        "name": "then the columns of `V`"
                    },
                    {
                        "name": "correspond to the elements of a 2-D coefficient array `c` of shape"
                    },
                    {
                        "name": "(xdeg + 1"
                    },
                    {
                        "name": "ydeg + 1) in the order"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ".. math:: c_{00}"
                    },
                    {
                        "name": "c_{01}"
                    },
                    {
                        "name": "c_{02} ..."
                    },
                    {
                        "name": "c_{10}"
                    },
                    {
                        "name": "c_{11}"
                    },
                    {
                        "name": "c_{12} ..."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "and ``np.dot(V"
                    },
                    {
                        "name": "c.flat)`` and ``hermval2d(x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "c)`` will be the same"
                    },
                    {
                        "name": "up to roundoff. This equivalence is useful both for least squares"
                    },
                    {
                        "name": "fitting and for the evaluation of a large number of 2-D Hermite"
                    },
                    {
                        "name": "series of the same degrees and sample points."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "x"
                    },
                    {
                        "name": "y : array_like"
                    },
                    {
                        "name": "Arrays of point coordinates"
                    },
                    {
                        "name": "all of the same shape. The dtypes"
                    },
                    {
                        "name": "will be converted to either float64 or complex128 depending on"
                    },
                    {
                        "name": "whether any of the elements are complex. Scalars are converted to 1-D"
                    },
                    {
                        "name": "arrays."
                    },
                    {
                        "name": "deg : list of ints"
                    },
                    {
                        "name": "List of maximum degrees of the form [x_deg"
                    },
                    {
                        "name": "y_deg]."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "vander2d : ndarray"
                    },
                    {
                        "name": "The shape of the returned matrix is ``x.shape + (order"
                    },
                    {
                        "name": ")``"
                    },
                    {
                        "name": "where"
                    },
                    {
                        "default": " (deg[0]+1)*(deg([1]+1)`.  The dtype will be the same",
                        "name": ":math:`order "
                    },
                    {
                        "name": "as the converted `x` and `y`."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "See Also"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": "hermvander"
                    },
                    {
                        "name": "hermvander3d. hermval2d"
                    },
                    {
                        "name": "hermval3d"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Notes"
                    },
                    {
                        "name": "-----"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ".. versionadded::1.7.0"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "default": " [int(d) for d in deg]",
                        "name": "ideg "
                    },
                    {
                        "default": " [id == d and id >= 0 for id",
                        "name": "is_valid "
                    },
                    {
                        "name": "d in zip(ideg"
                    },
                    {
                        "name": "deg)]"
                    },
                    {
                        "default": " [1",
                        "name": "if is_valid !"
                    },
                    {
                        "name": "1]:"
                    },
                    {
                        "name": "raise ValueError(\"degrees must be non-negative integers\")"
                    },
                    {
                        "name": "degx"
                    },
                    {
                        "default": " ideg",
                        "name": "degy "
                    },
                    {
                        "name": "x"
                    },
                    {
                        "default": " np.array((x",
                        "name": "y "
                    },
                    {
                        "name": "y)"
                    },
                    {
                        "default": "0) + 0.0",
                        "name": "copy"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " hermvander(x",
                        "name": "vx "
                    },
                    {
                        "name": "degx)"
                    },
                    {
                        "default": " hermvander(y",
                        "name": "vy "
                    },
                    {
                        "name": "degy)"
                    },
                    {
                        "default": " vx[...",
                        "name": "v "
                    },
                    {
                        "name": "None]*vy[..."
                    },
                    {
                        "name": "None"
                    },
                    {
                        "name": ":]"
                    },
                    {
                        "name": "return v.reshape(v.shape[:-2] + (-1"
                    },
                    {
                        "name": "))"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def hermvander3d(x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z"
                    },
                    {
                        "name": "deg) :"
                    },
                    {
                        "name": "\"\"\"Pseudo-Vandermonde matrix of given degrees."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns the pseudo-Vandermonde matrix of degrees `deg` and sample"
                    },
                    {
                        "name": "points `(x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z)`. If `l"
                    },
                    {
                        "name": "m"
                    },
                    {
                        "name": "n` are the given degrees in `x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z`"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "then The pseudo-Vandermonde matrix is defined by"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ".. math:: V[..."
                    },
                    {
                        "default": " H_i(x)*H_j(y)*H_k(z)",
                        "name": "(m+1)(n+1)i + (n+1)j + k] "
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " i <= l`",
                        "name": "where `0 <"
                    },
                    {
                        "default": " j <= m`",
                        "name": "`0 <"
                    },
                    {
                        "default": " j <= n`.  The leading",
                        "name": "and `0 <"
                    },
                    {
                        "name": "indices of `V` index the points `(x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z)` and the last index encodes"
                    },
                    {
                        "name": "the degrees of the Hermite polynomials."
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " hermvander3d(x",
                        "name": "If ``V "
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z"
                    },
                    {
                        "name": "[xdeg"
                    },
                    {
                        "name": "ydeg"
                    },
                    {
                        "name": "zdeg])``"
                    },
                    {
                        "name": "then the columns"
                    },
                    {
                        "name": "of `V` correspond to the elements of a 3-D coefficient array `c` of"
                    },
                    {
                        "name": "shape (xdeg + 1"
                    },
                    {
                        "name": "ydeg + 1"
                    },
                    {
                        "name": "zdeg + 1) in the order"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ".. math:: c_{000}"
                    },
                    {
                        "name": "c_{001}"
                    },
                    {
                        "name": "c_{002}"
                    },
                    {
                        "name": "..."
                    },
                    {
                        "name": "c_{010}"
                    },
                    {
                        "name": "c_{011}"
                    },
                    {
                        "name": "c_{012}"
                    },
                    {
                        "name": "..."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "and  ``np.dot(V"
                    },
                    {
                        "name": "c.flat)`` and ``hermval3d(x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z"
                    },
                    {
                        "name": "c)`` will be the"
                    },
                    {
                        "name": "same up to roundoff. This equivalence is useful both for least squares"
                    },
                    {
                        "name": "fitting and for the evaluation of a large number of 3-D Hermite"
                    },
                    {
                        "name": "series of the same degrees and sample points."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z : array_like"
                    },
                    {
                        "name": "Arrays of point coordinates"
                    },
                    {
                        "name": "all of the same shape. The dtypes will"
                    },
                    {
                        "name": "be converted to either float64 or complex128 depending on whether"
                    },
                    {
                        "name": "any of the elements are complex. Scalars are converted to 1-D"
                    },
                    {
                        "name": "arrays."
                    },
                    {
                        "name": "deg : list of ints"
                    },
                    {
                        "name": "List of maximum degrees of the form [x_deg"
                    },
                    {
                        "name": "y_deg"
                    },
                    {
                        "name": "z_deg]."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "vander3d : ndarray"
                    },
                    {
                        "name": "The shape of the returned matrix is ``x.shape + (order"
                    },
                    {
                        "name": ")``"
                    },
                    {
                        "name": "where"
                    },
                    {
                        "default": " (deg[0]+1)*(deg([1]+1)*(deg[2]+1)`.  The dtype will",
                        "name": ":math:`order "
                    },
                    {
                        "name": "be the same as the converted `x`"
                    },
                    {
                        "name": "`y`"
                    },
                    {
                        "name": "and `z`."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "See Also"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": "hermvander"
                    },
                    {
                        "name": "hermvander3d. hermval2d"
                    },
                    {
                        "name": "hermval3d"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Notes"
                    },
                    {
                        "name": "-----"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ".. versionadded::1.7.0"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "default": " [int(d) for d in deg]",
                        "name": "ideg "
                    },
                    {
                        "default": " [id == d and id >= 0 for id",
                        "name": "is_valid "
                    },
                    {
                        "name": "d in zip(ideg"
                    },
                    {
                        "name": "deg)]"
                    },
                    {
                        "default": " [1",
                        "name": "if is_valid !"
                    },
                    {
                        "name": "1"
                    },
                    {
                        "name": "1]:"
                    },
                    {
                        "name": "raise ValueError(\"degrees must be non-negative integers\")"
                    },
                    {
                        "name": "degx"
                    },
                    {
                        "name": "degy"
                    },
                    {
                        "default": " ideg",
                        "name": "degz "
                    },
                    {
                        "name": "x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "default": " np.array((x",
                        "name": "z "
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z)"
                    },
                    {
                        "default": "0) + 0.0",
                        "name": "copy"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " hermvander(x",
                        "name": "vx "
                    },
                    {
                        "name": "degx)"
                    },
                    {
                        "default": " hermvander(y",
                        "name": "vy "
                    },
                    {
                        "name": "degy)"
                    },
                    {
                        "default": " hermvander(z",
                        "name": "vz "
                    },
                    {
                        "name": "degz)"
                    },
                    {
                        "default": " vx[...",
                        "name": "v "
                    },
                    {
                        "name": "None"
                    },
                    {
                        "name": "None]*vy[..."
                    },
                    {
                        "name": "None"
                    },
                    {
                        "name": ":"
                    },
                    {
                        "name": "None]*vz[..."
                    },
                    {
                        "name": "None"
                    },
                    {
                        "name": "None"
                    },
                    {
                        "name": ":]"
                    },
                    {
                        "name": "return v.reshape(v.shape[:-3] + (-1"
                    },
                    {
                        "name": "))"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def hermfit(x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "deg"
                    },
                    {
                        "default": "None",
                        "name": "rcond"
                    },
                    {
                        "default": "False",
                        "name": "full"
                    },
                    {
                        "default": "None",
                        "name": "w"
                    }
                ]
            },
            "hermweight": {
                "args": [
                    {
                        "name": "x"
                    }
                ]
            },
            "poly2herm": {
                "args": [
                    {
                        "name": "pol) :"
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "name": "poly2herm(pol)"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Convert a polynomial to a Hermite series."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Convert an array representing the coefficients of a polynomial (relative"
                    },
                    {
                        "name": "to the \"standard\" basis) ordered from lowest degree to highest"
                    },
                    {
                        "name": "to an"
                    },
                    {
                        "name": "array of the coefficients of the equivalent Hermite series"
                    },
                    {
                        "name": "ordered"
                    },
                    {
                        "name": "from lowest to highest degree."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "pol : array_like"
                    },
                    {
                        "name": "1-D array containing the polynomial coefficients"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "c : ndarray"
                    },
                    {
                        "name": "1-D array containing the coefficients of the equivalent Hermite"
                    },
                    {
                        "name": "series."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "See Also"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": "herm2poly"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Notes"
                    },
                    {
                        "name": "-----"
                    },
                    {
                        "name": "The easy way to do conversions between polynomial basis sets"
                    },
                    {
                        "name": "is to use the convert method of a class instance."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Examples"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": ">>> from numpy.polynomial.hermite_e import poly2herme"
                    },
                    {
                        "name": ">>> poly2herm(np.arange(4))"
                    },
                    {
                        "name": "array([ 1."
                    },
                    {
                        "name": "2.75"
                    },
                    {
                        "name": "0.5"
                    },
                    {
                        "name": "0.375])"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "default": " pu.as_series([pol])",
                        "name": "[pol] "
                    },
                    {
                        "default": " len(pol) - 1",
                        "name": "deg "
                    },
                    {
                        "default": " 0",
                        "name": "res "
                    },
                    {
                        "name": "for i in range(deg"
                    },
                    {
                        "name": "-1"
                    },
                    {
                        "name": "-1) :"
                    },
                    {
                        "default": " hermadd(hermmulx(res)",
                        "name": "res "
                    },
                    {
                        "name": "pol[i])"
                    },
                    {
                        "name": "return res"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def herm2poly(c) :"
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "name": "Convert a Hermite series to a polynomial."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Convert an array representing the coefficients of a Hermite series"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "ordered from lowest degree to highest"
                    },
                    {
                        "name": "to an array of the coefficients"
                    },
                    {
                        "name": "of the equivalent polynomial (relative to the \"standard\" basis) ordered"
                    },
                    {
                        "name": "from lowest to highest degree."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "c : array_like"
                    },
                    {
                        "name": "1-D array containing the Hermite series coefficients"
                    },
                    {
                        "name": "ordered"
                    },
                    {
                        "name": "from lowest order term to highest."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "pol : ndarray"
                    },
                    {
                        "name": "1-D array containing the coefficients of the equivalent polynomial"
                    },
                    {
                        "name": "(relative to the \"standard\" basis) ordered from lowest order term"
                    },
                    {
                        "name": "to highest."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "See Also"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": "poly2herm"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Notes"
                    },
                    {
                        "name": "-----"
                    },
                    {
                        "name": "The easy way to do conversions between polynomial basis sets"
                    },
                    {
                        "name": "is to use the convert method of a class instance."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Examples"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": ">>> from numpy.polynomial.hermite import herm2poly"
                    },
                    {
                        "name": ">>> herm2poly([ 1."
                    },
                    {
                        "name": "2.75"
                    },
                    {
                        "name": "0.5"
                    },
                    {
                        "name": "0.375])"
                    },
                    {
                        "name": "array([ 0."
                    },
                    {
                        "name": "1."
                    },
                    {
                        "name": "2."
                    },
                    {
                        "name": "3.])"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "name": "from .polynomial import polyadd"
                    },
                    {
                        "name": "polysub"
                    },
                    {
                        "name": "polymulx"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " pu.as_series([c])",
                        "name": "[c] "
                    },
                    {
                        "default": " len(c)",
                        "name": "n "
                    },
                    {
                        "default": "= 1:",
                        "name": "if n "
                    },
                    {
                        "name": "return c"
                    },
                    {
                        "default": "= 2:",
                        "name": "if n "
                    },
                    {
                        "default": " 2",
                        "name": "c[1] *"
                    },
                    {
                        "name": "return c"
                    },
                    {
                        "name": "else:"
                    },
                    {
                        "default": " c[-2]",
                        "name": "c0 "
                    },
                    {
                        "default": " c[-1]",
                        "name": "c1 "
                    },
                    {
                        "name": "# i is the current degree of c1"
                    },
                    {
                        "name": "for i in range(n - 1"
                    },
                    {
                        "name": "1"
                    },
                    {
                        "name": "-1) :"
                    },
                    {
                        "default": " c0",
                        "name": "tmp "
                    },
                    {
                        "default": " polysub(c[i - 2]",
                        "name": "c0 "
                    },
                    {
                        "name": "c1*(2*(i - 1)))"
                    },
                    {
                        "default": " polyadd(tmp",
                        "name": "c1 "
                    },
                    {
                        "name": "polymulx(c1)*2)"
                    },
                    {
                        "name": "return polyadd(c0"
                    },
                    {
                        "name": "polymulx(c1)*2)"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "#"
                    },
                    {
                        "name": "# These are constant arrays are of integer type so as to be compatible"
                    },
                    {
                        "name": "# with the widest range of other types"
                    },
                    {
                        "name": "such as Decimal."
                    },
                    {
                        "name": "#"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "# Hermite"
                    },
                    {
                        "default": " np.array([-1",
                        "name": "hermdomain "
                    },
                    {
                        "name": "1])"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "# Hermite coefficients representing zero."
                    },
                    {
                        "default": " np.array([0])",
                        "name": "hermzero "
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "# Hermite coefficients representing one."
                    },
                    {
                        "default": " np.array([1])",
                        "name": "hermone "
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "# Hermite coefficients representing the identity x."
                    },
                    {
                        "default": " np.array([0",
                        "name": "hermx "
                    },
                    {
                        "name": "1/2])"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def hermline(off"
                    },
                    {
                        "name": "scl) :"
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "name": "Hermite series whose graph is a straight line."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "off"
                    },
                    {
                        "name": "scl : scalars"
                    },
                    {
                        "name": "The specified line is given by ``off + scl*x``."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "y : ndarray"
                    },
                    {
                        "name": "This module's representation of the Hermite series for"
                    },
                    {
                        "name": "``off + scl*x``."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "See Also"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": "polyline"
                    },
                    {
                        "name": "chebline"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Examples"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": ">>> from numpy.polynomial.hermite import hermline"
                    },
                    {
                        "name": "hermval"
                    },
                    {
                        "name": ">>> hermval(0"
                    },
                    {
                        "name": "hermline(3"
                    },
                    {
                        "name": "2))"
                    },
                    {
                        "name": "3.0"
                    },
                    {
                        "name": ">>> hermval(1"
                    },
                    {
                        "name": "hermline(3"
                    },
                    {
                        "name": "2))"
                    },
                    {
                        "name": "5.0"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "default": " 0 :",
                        "name": "if scl !"
                    },
                    {
                        "name": "return np.array([off"
                    },
                    {
                        "name": "scl/2])"
                    },
                    {
                        "name": "else :"
                    },
                    {
                        "name": "return np.array([off])"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def hermfromroots(roots) :"
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "name": "Generate a Hermite series with given roots."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "The function returns the coefficients of the polynomial"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " (x - r_0) * (x - r_1) * ... * (x - r_n)",
                        "name": ".. math:: p(x) "
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "in Hermite form"
                    },
                    {
                        "name": "where the `r_n` are the roots specified in `roots`."
                    },
                    {
                        "name": "If a zero has multiplicity n"
                    },
                    {
                        "name": "then it must appear in `roots` n times."
                    },
                    {
                        "name": "For instance"
                    },
                    {
                        "name": "if 2 is a root of multiplicity three and 3 is a root of"
                    },
                    {
                        "name": "multiplicity 2"
                    },
                    {
                        "name": "then `roots` looks something like [2"
                    },
                    {
                        "name": "2"
                    },
                    {
                        "name": "2"
                    },
                    {
                        "name": "3"
                    },
                    {
                        "name": "3]. The"
                    },
                    {
                        "name": "roots can appear in any order."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "If the returned coefficients are `c`"
                    },
                    {
                        "name": "then"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " c_0 + c_1 * H_1(x) + ... +  c_n * H_n(x)",
                        "name": ".. math:: p(x) "
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "The coefficient of the last term is not generally 1 for monic"
                    },
                    {
                        "name": "polynomials in Hermite form."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "roots : array_like"
                    },
                    {
                        "name": "Sequence containing the roots."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "out : ndarray"
                    },
                    {
                        "name": "1-D array of coefficients.  If all roots are real then `out` is a"
                    },
                    {
                        "name": "real array"
                    },
                    {
                        "name": "if some of the roots are complex"
                    },
                    {
                        "name": "then `out` is complex"
                    },
                    {
                        "name": "even if all the coefficients in the result are real (see Examples"
                    },
                    {
                        "name": "below)."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "See Also"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": "polyfromroots"
                    },
                    {
                        "name": "legfromroots"
                    },
                    {
                        "name": "lagfromroots"
                    },
                    {
                        "name": "chebfromroots"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "hermefromroots."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Examples"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": ">>> from numpy.polynomial.hermite import hermfromroots"
                    },
                    {
                        "name": "hermval"
                    },
                    {
                        "default": " hermfromroots((-1",
                        "name": ">>> coef "
                    },
                    {
                        "name": "0"
                    },
                    {
                        "name": "1))"
                    },
                    {
                        "name": ">>> hermval((-1"
                    },
                    {
                        "name": "0"
                    },
                    {
                        "name": "1)"
                    },
                    {
                        "name": "coef)"
                    },
                    {
                        "name": "array([ 0."
                    },
                    {
                        "name": "0."
                    },
                    {
                        "name": "0.])"
                    },
                    {
                        "default": " hermfromroots((-1j",
                        "name": ">>> coef "
                    },
                    {
                        "name": "1j))"
                    },
                    {
                        "name": ">>> hermval((-1j"
                    },
                    {
                        "name": "1j)"
                    },
                    {
                        "name": "coef)"
                    },
                    {
                        "name": "array([ 0.+0.j"
                    },
                    {
                        "name": "0.+0.j])"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "default": "= 0 :",
                        "name": "if len(roots) "
                    },
                    {
                        "name": "return np.ones(1)"
                    },
                    {
                        "name": "else :"
                    },
                    {
                        "default": " pu.as_series([roots]",
                        "name": "[roots] "
                    },
                    {
                        "default": "False)",
                        "name": "trim"
                    },
                    {
                        "name": "roots.sort()"
                    },
                    {
                        "default": " [hermline(-r",
                        "name": "p "
                    },
                    {
                        "name": "1) for r in roots]"
                    },
                    {
                        "default": " len(p)",
                        "name": "n "
                    },
                    {
                        "name": "while n > 1:"
                    },
                    {
                        "name": "m"
                    },
                    {
                        "default": " divmod(n",
                        "name": "r "
                    },
                    {
                        "name": "2)"
                    },
                    {
                        "default": " [hermmul(p[i]",
                        "name": "tmp "
                    },
                    {
                        "name": "p[i+m]) for i in range(m)]"
                    },
                    {
                        "name": "if r:"
                    },
                    {
                        "default": " hermmul(tmp[0]",
                        "name": "tmp[0] "
                    },
                    {
                        "name": "p[-1])"
                    },
                    {
                        "default": " tmp",
                        "name": "p "
                    },
                    {
                        "default": " m",
                        "name": "n "
                    },
                    {
                        "name": "return p[0]"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def hermadd(c1"
                    },
                    {
                        "name": "c2"
                    }
                ]
            }
        }
    },
    "hermite_e": {
        "*": {
            "hermecompanion": {
                "args": [
                    {
                        "name": "c"
                    }
                ]
            },
            "hermediv": {
                "args": [
                    {
                        "name": "c1"
                    },
                    {
                        "name": "c2"
                    }
                ]
            },
            "hermegauss": {
                "args": [
                    {
                        "name": "deg"
                    }
                ]
            },
            "hermegrid2d": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "c"
                    }
                ]
            },
            "hermegrid3d": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z"
                    },
                    {
                        "name": "c"
                    }
                ]
            },
            "hermeint": {
                "args": [
                    {
                        "name": "c"
                    },
                    {
                        "default": "1",
                        "name": "m"
                    },
                    {
                        "default": "[]",
                        "name": "k"
                    },
                    {
                        "default": "0",
                        "name": "lbnd"
                    },
                    {
                        "default": "1",
                        "name": "scl"
                    },
                    {
                        "default": "0",
                        "name": "axis"
                    }
                ]
            },
            "hermemul": {
                "args": [
                    {
                        "name": "c1"
                    },
                    {
                        "name": "c2"
                    }
                ]
            },
            "hermemulx": {
                "args": [
                    {
                        "name": "c"
                    }
                ]
            },
            "hermepow": {
                "args": [
                    {
                        "name": "c"
                    },
                    {
                        "name": "pow"
                    },
                    {
                        "default": "16) :",
                        "name": "maxpower"
                    },
                    {
                        "name": "\"\"\"Raise a Hermite series to a power."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns the Hermite series `c` raised to the power `pow`. The"
                    },
                    {
                        "name": "argument `c` is a sequence of coefficients ordered from low to high."
                    },
                    {
                        "name": "i.e."
                    },
                    {
                        "name": "[1"
                    },
                    {
                        "name": "2"
                    },
                    {
                        "name": "3] is the series  ``P_0 + 2*P_1 + 3*P_2.``"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "c : array_like"
                    },
                    {
                        "name": "1-D array of Hermite series coefficients ordered from low to"
                    },
                    {
                        "name": "high."
                    },
                    {
                        "name": "pow : integer"
                    },
                    {
                        "name": "Power to which the series will be raised"
                    },
                    {
                        "name": "maxpower : integer"
                    },
                    {
                        "name": "optional"
                    },
                    {
                        "name": "Maximum power allowed. This is mainly to limit growth of the series"
                    },
                    {
                        "name": "to unmanageable size. Default is 16"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "coef : ndarray"
                    },
                    {
                        "name": "Hermite series of power."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "See Also"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": "hermeadd"
                    },
                    {
                        "name": "hermesub"
                    },
                    {
                        "name": "hermemul"
                    },
                    {
                        "name": "hermediv"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Examples"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": ">>> from numpy.polynomial.hermite_e import hermepow"
                    },
                    {
                        "name": ">>> hermepow([1"
                    },
                    {
                        "name": "2"
                    },
                    {
                        "name": "3]"
                    },
                    {
                        "name": "2)"
                    },
                    {
                        "name": "array([ 23."
                    },
                    {
                        "name": "28."
                    },
                    {
                        "name": "46."
                    },
                    {
                        "name": "12."
                    },
                    {
                        "name": "9.])"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "name": "# c is a trimmed copy"
                    },
                    {
                        "default": " pu.as_series([c])",
                        "name": "[c] "
                    },
                    {
                        "default": " int(pow)",
                        "name": "power "
                    },
                    {
                        "default": " pow or power < 0 :",
                        "name": "if power !"
                    },
                    {
                        "name": "raise ValueError(\"Power must be a non-negative integer.\")"
                    },
                    {
                        "name": "elif maxpower is not None and power > maxpower :"
                    },
                    {
                        "name": "raise ValueError(\"Power is too large\")"
                    },
                    {
                        "default": "= 0 :",
                        "name": "elif power "
                    },
                    {
                        "name": "return np.array([1]"
                    },
                    {
                        "default": "c.dtype)",
                        "name": "dtype"
                    },
                    {
                        "default": "= 1 :",
                        "name": "elif power "
                    },
                    {
                        "name": "return c"
                    },
                    {
                        "name": "else :"
                    },
                    {
                        "name": "# This can be made more efficient by using powers of two"
                    },
                    {
                        "name": "# in the usual way."
                    },
                    {
                        "default": " c",
                        "name": "prd "
                    },
                    {
                        "name": "for i in range(2"
                    },
                    {
                        "name": "power + 1) :"
                    },
                    {
                        "default": " hermemul(prd",
                        "name": "prd "
                    },
                    {
                        "name": "c)"
                    },
                    {
                        "name": "return prd"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def hermeder(c"
                    },
                    {
                        "default": "1",
                        "name": "m"
                    },
                    {
                        "default": "1",
                        "name": "scl"
                    },
                    {
                        "default": "0) :",
                        "name": "axis"
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "name": "Differentiate a Hermite_e series."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns the series coefficients `c` differentiated `m` times along"
                    },
                    {
                        "name": "`axis`.  At each iteration the result is multiplied by `scl` (the"
                    },
                    {
                        "name": "scaling factor is for use in a linear change of variable). The argument"
                    },
                    {
                        "name": "`c` is an array of coefficients from low to high degree along each"
                    },
                    {
                        "name": "axis"
                    },
                    {
                        "name": "e.g."
                    },
                    {
                        "name": "[1"
                    },
                    {
                        "name": "2"
                    },
                    {
                        "name": "3] represents the series ``1*He_0 + 2*He_1 + 3*He_2``"
                    },
                    {
                        "name": "while [[1"
                    },
                    {
                        "name": "2]"
                    },
                    {
                        "name": "[1"
                    },
                    {
                        "name": "2]] represents ``1*He_0(x)*He_0(y) + 1*He_1(x)*He_0(y)"
                    },
                    {
                        "default": "0 is ``x`` and axis=1",
                        "name": "+ 2*He_0(x)*He_1(y) + 2*He_1(x)*He_1(y)`` if axis"
                    },
                    {
                        "name": "is ``y``."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "c : array_like"
                    },
                    {
                        "name": "Array of Hermite_e series coefficients. If `c` is multidimensional"
                    },
                    {
                        "name": "the different axis correspond to different variables with the"
                    },
                    {
                        "name": "degree in each axis given by the corresponding index."
                    },
                    {
                        "name": "m : int"
                    },
                    {
                        "name": "optional"
                    },
                    {
                        "name": "Number of derivatives taken"
                    },
                    {
                        "name": "must be non-negative. (Default: 1)"
                    },
                    {
                        "name": "scl : scalar"
                    },
                    {
                        "name": "optional"
                    },
                    {
                        "name": "Each differentiation is multiplied by `scl`.  The end result is"
                    },
                    {
                        "name": "multiplication by ``scl**m``.  This is for use in a linear change of"
                    },
                    {
                        "name": "variable. (Default: 1)"
                    },
                    {
                        "name": "axis : int"
                    },
                    {
                        "name": "optional"
                    },
                    {
                        "name": "Axis over which the derivative is taken. (Default: 0)."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ".. versionadded:: 1.7.0"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "der : ndarray"
                    },
                    {
                        "name": "Hermite series of the derivative."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "See Also"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": "hermeint"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Notes"
                    },
                    {
                        "name": "-----"
                    },
                    {
                        "name": "In general"
                    },
                    {
                        "name": "the result of differentiating a Hermite series does not"
                    },
                    {
                        "name": "resemble the same operation on a power series. Thus the result of this"
                    },
                    {
                        "name": "function may be \"unintuitive"
                    },
                    {
                        "name": "\" albeit correct; see Examples section"
                    },
                    {
                        "name": "below."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Examples"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": ">>> from numpy.polynomial.hermite_e import hermeder"
                    },
                    {
                        "name": ">>> hermeder([ 1."
                    },
                    {
                        "name": "1."
                    },
                    {
                        "name": "1."
                    },
                    {
                        "name": "1.])"
                    },
                    {
                        "name": "array([ 1."
                    },
                    {
                        "name": "2."
                    },
                    {
                        "name": "3.])"
                    },
                    {
                        "name": ">>> hermeder([-0.25"
                    },
                    {
                        "name": "1."
                    },
                    {
                        "name": "1./2."
                    },
                    {
                        "name": "1./3."
                    },
                    {
                        "name": "1./4 ]"
                    },
                    {
                        "default": "2)",
                        "name": "m"
                    },
                    {
                        "name": "array([ 1."
                    },
                    {
                        "name": "2."
                    },
                    {
                        "name": "3.])"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "default": " np.array(c",
                        "name": "c "
                    },
                    {
                        "default": "1",
                        "name": "ndmin"
                    },
                    {
                        "default": "1)",
                        "name": "copy"
                    },
                    {
                        "name": "if c.dtype.char in '?bBhHiIlLqQpP':"
                    },
                    {
                        "default": " c.astype(np.double)",
                        "name": "c "
                    },
                    {
                        "name": "cnt"
                    },
                    {
                        "default": " [int(t) for t in [m",
                        "name": "iaxis "
                    },
                    {
                        "name": "axis]]"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " m:",
                        "name": "if cnt !"
                    },
                    {
                        "name": "raise ValueError(\"The order of derivation must be integer\")"
                    },
                    {
                        "name": "if cnt < 0:"
                    },
                    {
                        "name": "raise ValueError(\"The order of derivation must be non-negative\")"
                    },
                    {
                        "default": " axis:",
                        "name": "if iaxis !"
                    },
                    {
                        "name": "raise ValueError(\"The axis must be integer\")"
                    },
                    {
                        "default": " iaxis < c.ndim:",
                        "name": "if not -c.ndim <"
                    },
                    {
                        "name": "raise ValueError(\"The axis is out of range\")"
                    },
                    {
                        "name": "if iaxis < 0:"
                    },
                    {
                        "default": " c.ndim",
                        "name": "iaxis +"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "= 0:",
                        "name": "if cnt "
                    },
                    {
                        "name": "return c"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " np.rollaxis(c",
                        "name": "c "
                    },
                    {
                        "name": "iaxis)"
                    },
                    {
                        "default": " len(c)",
                        "name": "n "
                    },
                    {
                        "default": " n:",
                        "name": "if cnt >"
                    },
                    {
                        "name": "return c[:1]*0"
                    },
                    {
                        "name": "else :"
                    },
                    {
                        "name": "for i in range(cnt"
                    }
                ]
            },
            "hermeroots": {
                "args": [
                    {
                        "name": "c"
                    }
                ]
            },
            "hermesub": {
                "args": [
                    {
                        "name": "c1"
                    },
                    {
                        "name": "c2"
                    }
                ]
            },
            "hermeval": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "c"
                    },
                    {
                        "default": "True",
                        "name": "tensor"
                    }
                ]
            },
            "hermeval2d": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "c"
                    }
                ]
            },
            "hermeval3d": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z"
                    },
                    {
                        "name": "c"
                    }
                ]
            },
            "hermevander": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "deg) :"
                    },
                    {
                        "name": "\"\"\"Pseudo-Vandermonde matrix of given degree."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns the pseudo-Vandermonde matrix of degree `deg` and sample points"
                    },
                    {
                        "name": "`x`. The pseudo-Vandermonde matrix is defined by"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ".. math:: V[..."
                    },
                    {
                        "default": " He_i(x)",
                        "name": "i] "
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " i <= deg`. The leading indices of `V` index the elements of",
                        "name": "where `0 <"
                    },
                    {
                        "name": "`x` and the last index is the degree of the HermiteE polynomial."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "If `c` is a 1-D array of coefficients of length `n + 1` and `V` is the"
                    },
                    {
                        "default": " hermevander(x",
                        "name": "array ``V "
                    },
                    {
                        "name": "n)``"
                    },
                    {
                        "name": "then ``np.dot(V"
                    },
                    {
                        "name": "c)`` and"
                    },
                    {
                        "name": "``hermeval(x"
                    },
                    {
                        "name": "c)`` are the same up to roundoff. This equivalence is"
                    },
                    {
                        "name": "useful both for least squares fitting and for the evaluation of a large"
                    },
                    {
                        "name": "number of HermiteE series of the same degree and sample points."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "x : array_like"
                    },
                    {
                        "name": "Array of points. The dtype is converted to float64 or complex128"
                    },
                    {
                        "name": "depending on whether any of the elements are complex. If `x` is"
                    },
                    {
                        "name": "scalar it is converted to a 1-D array."
                    },
                    {
                        "name": "deg : int"
                    },
                    {
                        "name": "Degree of the resulting matrix."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "vander : ndarray"
                    },
                    {
                        "name": "The pseudo-Vandermonde matrix. The shape of the returned matrix is"
                    },
                    {
                        "name": "``x.shape + (deg + 1"
                    },
                    {
                        "name": ")``"
                    },
                    {
                        "name": "where The last index is the degree of the"
                    },
                    {
                        "name": "corresponding HermiteE polynomial.  The dtype will be the same as"
                    },
                    {
                        "name": "the converted `x`."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Examples"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": ">>> from numpy.polynomial.hermite_e import hermevander"
                    },
                    {
                        "default": " np.array([-1",
                        "name": ">>> x "
                    },
                    {
                        "name": "0"
                    },
                    {
                        "name": "1])"
                    },
                    {
                        "name": ">>> hermevander(x"
                    },
                    {
                        "name": "3)"
                    },
                    {
                        "name": "array([[ 1."
                    },
                    {
                        "name": "-1."
                    },
                    {
                        "name": "0."
                    },
                    {
                        "name": "2.]"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "[ 1."
                    },
                    {
                        "name": "0."
                    },
                    {
                        "name": "-1."
                    },
                    {
                        "name": "-0.]"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "[ 1."
                    },
                    {
                        "name": "1."
                    },
                    {
                        "name": "0."
                    },
                    {
                        "name": "-2.]])"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "default": " int(deg)",
                        "name": "ideg "
                    },
                    {
                        "default": " deg:",
                        "name": "if ideg !"
                    },
                    {
                        "name": "raise ValueError(\"deg must be integer\")"
                    },
                    {
                        "name": "if ideg < 0:"
                    },
                    {
                        "name": "raise ValueError(\"deg must be non-negative\")"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " np.array(x",
                        "name": "x "
                    },
                    {
                        "default": "0",
                        "name": "copy"
                    },
                    {
                        "default": "1) + 0.0",
                        "name": "ndmin"
                    },
                    {
                        "default": " (ideg + 1",
                        "name": "dims "
                    },
                    {
                        "name": ") + x.shape"
                    },
                    {
                        "default": " x.dtype",
                        "name": "dtyp "
                    },
                    {
                        "default": " np.empty(dims",
                        "name": "v "
                    },
                    {
                        "default": "dtyp)",
                        "name": "dtype"
                    },
                    {
                        "default": " x*0 + 1",
                        "name": "v[0] "
                    },
                    {
                        "name": "if ideg > 0 :"
                    },
                    {
                        "default": " x",
                        "name": "v[1] "
                    },
                    {
                        "name": "for i in range(2"
                    },
                    {
                        "name": "ideg + 1) :"
                    },
                    {
                        "default": " (v[i-1]*x - v[i-2]*(i - 1))",
                        "name": "v[i] "
                    },
                    {
                        "name": "return np.rollaxis(v"
                    },
                    {
                        "name": "0"
                    },
                    {
                        "name": "v.ndim)"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def hermevander2d(x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "deg) :"
                    },
                    {
                        "name": "\"\"\"Pseudo-Vandermonde matrix of given degrees."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns the pseudo-Vandermonde matrix of degrees `deg` and sample"
                    },
                    {
                        "name": "points `(x"
                    },
                    {
                        "name": "y)`. The pseudo-Vandermonde matrix is defined by"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ".. math:: V[..."
                    },
                    {
                        "default": " He_i(x) * He_j(y)",
                        "name": "deg[1]*i + j] "
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " i <= deg[0]` and `0 <= j <= deg[1]`. The leading indices of",
                        "name": "where `0 <"
                    },
                    {
                        "name": "`V` index the points `(x"
                    },
                    {
                        "name": "y)` and the last index encodes the degrees of"
                    },
                    {
                        "name": "the HermiteE polynomials."
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " hermevander2d(x",
                        "name": "If ``V "
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "[xdeg"
                    },
                    {
                        "name": "ydeg])``"
                    },
                    {
                        "name": "then the columns of `V`"
                    },
                    {
                        "name": "correspond to the elements of a 2-D coefficient array `c` of shape"
                    },
                    {
                        "name": "(xdeg + 1"
                    },
                    {
                        "name": "ydeg + 1) in the order"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ".. math:: c_{00}"
                    },
                    {
                        "name": "c_{01}"
                    },
                    {
                        "name": "c_{02} ..."
                    },
                    {
                        "name": "c_{10}"
                    },
                    {
                        "name": "c_{11}"
                    },
                    {
                        "name": "c_{12} ..."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "and ``np.dot(V"
                    },
                    {
                        "name": "c.flat)`` and ``hermeval2d(x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "c)`` will be the same"
                    },
                    {
                        "name": "up to roundoff. This equivalence is useful both for least squares"
                    },
                    {
                        "name": "fitting and for the evaluation of a large number of 2-D HermiteE"
                    },
                    {
                        "name": "series of the same degrees and sample points."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "x"
                    },
                    {
                        "name": "y : array_like"
                    },
                    {
                        "name": "Arrays of point coordinates"
                    },
                    {
                        "name": "all of the same shape. The dtypes"
                    },
                    {
                        "name": "will be converted to either float64 or complex128 depending on"
                    },
                    {
                        "name": "whether any of the elements are complex. Scalars are converted to"
                    },
                    {
                        "name": "1-D arrays."
                    },
                    {
                        "name": "deg : list of ints"
                    },
                    {
                        "name": "List of maximum degrees of the form [x_deg"
                    },
                    {
                        "name": "y_deg]."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "vander2d : ndarray"
                    },
                    {
                        "name": "The shape of the returned matrix is ``x.shape + (order"
                    },
                    {
                        "name": ")``"
                    },
                    {
                        "name": "where"
                    },
                    {
                        "default": " (deg[0]+1)*(deg([1]+1)`.  The dtype will be the same",
                        "name": ":math:`order "
                    },
                    {
                        "name": "as the converted `x` and `y`."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "See Also"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": "hermevander"
                    },
                    {
                        "name": "hermevander3d. hermeval2d"
                    },
                    {
                        "name": "hermeval3d"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Notes"
                    },
                    {
                        "name": "-----"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ".. versionadded::1.7.0"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "default": " [int(d) for d in deg]",
                        "name": "ideg "
                    },
                    {
                        "default": " [id == d and id >= 0 for id",
                        "name": "is_valid "
                    },
                    {
                        "name": "d in zip(ideg"
                    },
                    {
                        "name": "deg)]"
                    },
                    {
                        "default": " [1",
                        "name": "if is_valid !"
                    },
                    {
                        "name": "1]:"
                    },
                    {
                        "name": "raise ValueError(\"degrees must be non-negative integers\")"
                    },
                    {
                        "name": "degx"
                    },
                    {
                        "default": " ideg",
                        "name": "degy "
                    },
                    {
                        "name": "x"
                    },
                    {
                        "default": " np.array((x",
                        "name": "y "
                    },
                    {
                        "name": "y)"
                    },
                    {
                        "default": "0) + 0.0",
                        "name": "copy"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " hermevander(x",
                        "name": "vx "
                    },
                    {
                        "name": "degx)"
                    },
                    {
                        "default": " hermevander(y",
                        "name": "vy "
                    },
                    {
                        "name": "degy)"
                    },
                    {
                        "default": " vx[...",
                        "name": "v "
                    },
                    {
                        "name": "None]*vy[..."
                    },
                    {
                        "name": "None"
                    },
                    {
                        "name": ":]"
                    },
                    {
                        "name": "return v.reshape(v.shape[:-2] + (-1"
                    },
                    {
                        "name": "))"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def hermevander3d(x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z"
                    },
                    {
                        "name": "deg) :"
                    },
                    {
                        "name": "\"\"\"Pseudo-Vandermonde matrix of given degrees."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns the pseudo-Vandermonde matrix of degrees `deg` and sample"
                    },
                    {
                        "name": "points `(x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z)`. If `l"
                    },
                    {
                        "name": "m"
                    },
                    {
                        "name": "n` are the given degrees in `x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z`"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "then Hehe pseudo-Vandermonde matrix is defined by"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ".. math:: V[..."
                    },
                    {
                        "default": " He_i(x)*He_j(y)*He_k(z)",
                        "name": "(m+1)(n+1)i + (n+1)j + k] "
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " i <= l`",
                        "name": "where `0 <"
                    },
                    {
                        "default": " j <= m`",
                        "name": "`0 <"
                    },
                    {
                        "default": " j <= n`.  The leading",
                        "name": "and `0 <"
                    },
                    {
                        "name": "indices of `V` index the points `(x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z)` and the last index encodes"
                    },
                    {
                        "name": "the degrees of the HermiteE polynomials."
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " hermevander3d(x",
                        "name": "If ``V "
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z"
                    },
                    {
                        "name": "[xdeg"
                    },
                    {
                        "name": "ydeg"
                    },
                    {
                        "name": "zdeg])``"
                    },
                    {
                        "name": "then the columns"
                    },
                    {
                        "name": "of `V` correspond to the elements of a 3-D coefficient array `c` of"
                    },
                    {
                        "name": "shape (xdeg + 1"
                    },
                    {
                        "name": "ydeg + 1"
                    },
                    {
                        "name": "zdeg + 1) in the order"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ".. math:: c_{000}"
                    },
                    {
                        "name": "c_{001}"
                    },
                    {
                        "name": "c_{002}"
                    },
                    {
                        "name": "..."
                    },
                    {
                        "name": "c_{010}"
                    },
                    {
                        "name": "c_{011}"
                    },
                    {
                        "name": "c_{012}"
                    },
                    {
                        "name": "..."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "and  ``np.dot(V"
                    },
                    {
                        "name": "c.flat)`` and ``hermeval3d(x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z"
                    },
                    {
                        "name": "c)`` will be the"
                    },
                    {
                        "name": "same up to roundoff. This equivalence is useful both for least squares"
                    },
                    {
                        "name": "fitting and for the evaluation of a large number of 3-D HermiteE"
                    },
                    {
                        "name": "series of the same degrees and sample points."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z : array_like"
                    },
                    {
                        "name": "Arrays of point coordinates"
                    },
                    {
                        "name": "all of the same shape. The dtypes will"
                    },
                    {
                        "name": "be converted to either float64 or complex128 depending on whether"
                    },
                    {
                        "name": "any of the elements are complex. Scalars are converted to 1-D"
                    },
                    {
                        "name": "arrays."
                    },
                    {
                        "name": "deg : list of ints"
                    },
                    {
                        "name": "List of maximum degrees of the form [x_deg"
                    },
                    {
                        "name": "y_deg"
                    },
                    {
                        "name": "z_deg]."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "vander3d : ndarray"
                    },
                    {
                        "name": "The shape of the returned matrix is ``x.shape + (order"
                    },
                    {
                        "name": ")``"
                    },
                    {
                        "name": "where"
                    },
                    {
                        "default": " (deg[0]+1)*(deg([1]+1)*(deg[2]+1)`.  The dtype will",
                        "name": ":math:`order "
                    },
                    {
                        "name": "be the same as the converted `x`"
                    },
                    {
                        "name": "`y`"
                    },
                    {
                        "name": "and `z`."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "See Also"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": "hermevander"
                    },
                    {
                        "name": "hermevander3d. hermeval2d"
                    },
                    {
                        "name": "hermeval3d"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Notes"
                    },
                    {
                        "name": "-----"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ".. versionadded::1.7.0"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "default": " [int(d) for d in deg]",
                        "name": "ideg "
                    },
                    {
                        "default": " [id == d and id >= 0 for id",
                        "name": "is_valid "
                    },
                    {
                        "name": "d in zip(ideg"
                    },
                    {
                        "name": "deg)]"
                    },
                    {
                        "default": " [1",
                        "name": "if is_valid !"
                    },
                    {
                        "name": "1"
                    },
                    {
                        "name": "1]:"
                    },
                    {
                        "name": "raise ValueError(\"degrees must be non-negative integers\")"
                    },
                    {
                        "name": "degx"
                    },
                    {
                        "name": "degy"
                    },
                    {
                        "default": " ideg",
                        "name": "degz "
                    },
                    {
                        "name": "x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "default": " np.array((x",
                        "name": "z "
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z)"
                    },
                    {
                        "default": "0) + 0.0",
                        "name": "copy"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " hermevander(x",
                        "name": "vx "
                    },
                    {
                        "name": "degx)"
                    },
                    {
                        "default": " hermevander(y",
                        "name": "vy "
                    },
                    {
                        "name": "degy)"
                    },
                    {
                        "default": " hermevander(z",
                        "name": "vz "
                    },
                    {
                        "name": "degz)"
                    },
                    {
                        "default": " vx[...",
                        "name": "v "
                    },
                    {
                        "name": "None"
                    },
                    {
                        "name": "None]*vy[..."
                    },
                    {
                        "name": "None"
                    },
                    {
                        "name": ":"
                    },
                    {
                        "name": "None]*vz[..."
                    },
                    {
                        "name": "None"
                    },
                    {
                        "name": "None"
                    },
                    {
                        "name": ":]"
                    },
                    {
                        "name": "return v.reshape(v.shape[:-3] + (-1"
                    },
                    {
                        "name": "))"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def hermefit(x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "deg"
                    },
                    {
                        "default": "None",
                        "name": "rcond"
                    },
                    {
                        "default": "False",
                        "name": "full"
                    },
                    {
                        "default": "None",
                        "name": "w"
                    }
                ]
            },
            "hermeweight": {
                "args": [
                    {
                        "name": "x"
                    }
                ]
            },
            "poly2herme": {
                "args": [
                    {
                        "name": "pol) :"
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "name": "poly2herme(pol)"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Convert a polynomial to a Hermite series."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Convert an array representing the coefficients of a polynomial (relative"
                    },
                    {
                        "name": "to the \"standard\" basis) ordered from lowest degree to highest"
                    },
                    {
                        "name": "to an"
                    },
                    {
                        "name": "array of the coefficients of the equivalent Hermite series"
                    },
                    {
                        "name": "ordered"
                    },
                    {
                        "name": "from lowest to highest degree."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "pol : array_like"
                    },
                    {
                        "name": "1-D array containing the polynomial coefficients"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "c : ndarray"
                    },
                    {
                        "name": "1-D array containing the coefficients of the equivalent Hermite"
                    },
                    {
                        "name": "series."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "See Also"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": "herme2poly"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Notes"
                    },
                    {
                        "name": "-----"
                    },
                    {
                        "name": "The easy way to do conversions between polynomial basis sets"
                    },
                    {
                        "name": "is to use the convert method of a class instance."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Examples"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": ">>> from numpy.polynomial.hermite_e import poly2herme"
                    },
                    {
                        "name": ">>> poly2herme(np.arange(4))"
                    },
                    {
                        "name": "array([  2."
                    },
                    {
                        "name": "10."
                    },
                    {
                        "name": "2."
                    },
                    {
                        "name": "3.])"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "default": " pu.as_series([pol])",
                        "name": "[pol] "
                    },
                    {
                        "default": " len(pol) - 1",
                        "name": "deg "
                    },
                    {
                        "default": " 0",
                        "name": "res "
                    },
                    {
                        "name": "for i in range(deg"
                    },
                    {
                        "name": "-1"
                    },
                    {
                        "name": "-1) :"
                    },
                    {
                        "default": " hermeadd(hermemulx(res)",
                        "name": "res "
                    },
                    {
                        "name": "pol[i])"
                    },
                    {
                        "name": "return res"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def herme2poly(c) :"
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "name": "Convert a Hermite series to a polynomial."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Convert an array representing the coefficients of a Hermite series"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "ordered from lowest degree to highest"
                    },
                    {
                        "name": "to an array of the coefficients"
                    },
                    {
                        "name": "of the equivalent polynomial (relative to the \"standard\" basis) ordered"
                    },
                    {
                        "name": "from lowest to highest degree."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "c : array_like"
                    },
                    {
                        "name": "1-D array containing the Hermite series coefficients"
                    },
                    {
                        "name": "ordered"
                    },
                    {
                        "name": "from lowest order term to highest."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "pol : ndarray"
                    },
                    {
                        "name": "1-D array containing the coefficients of the equivalent polynomial"
                    },
                    {
                        "name": "(relative to the \"standard\" basis) ordered from lowest order term"
                    },
                    {
                        "name": "to highest."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "See Also"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": "poly2herme"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Notes"
                    },
                    {
                        "name": "-----"
                    },
                    {
                        "name": "The easy way to do conversions between polynomial basis sets"
                    },
                    {
                        "name": "is to use the convert method of a class instance."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Examples"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": ">>> from numpy.polynomial.hermite_e import herme2poly"
                    },
                    {
                        "name": ">>> herme2poly([  2."
                    },
                    {
                        "name": "10."
                    },
                    {
                        "name": "2."
                    },
                    {
                        "name": "3.])"
                    },
                    {
                        "name": "array([ 0."
                    },
                    {
                        "name": "1."
                    },
                    {
                        "name": "2."
                    },
                    {
                        "name": "3.])"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "name": "from .polynomial import polyadd"
                    },
                    {
                        "name": "polysub"
                    },
                    {
                        "name": "polymulx"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " pu.as_series([c])",
                        "name": "[c] "
                    },
                    {
                        "default": " len(c)",
                        "name": "n "
                    },
                    {
                        "default": "= 1:",
                        "name": "if n "
                    },
                    {
                        "name": "return c"
                    },
                    {
                        "default": "= 2:",
                        "name": "if n "
                    },
                    {
                        "name": "return c"
                    },
                    {
                        "name": "else:"
                    },
                    {
                        "default": " c[-2]",
                        "name": "c0 "
                    },
                    {
                        "default": " c[-1]",
                        "name": "c1 "
                    },
                    {
                        "name": "# i is the current degree of c1"
                    },
                    {
                        "name": "for i in range(n - 1"
                    },
                    {
                        "name": "1"
                    },
                    {
                        "name": "-1) :"
                    },
                    {
                        "default": " c0",
                        "name": "tmp "
                    },
                    {
                        "default": " polysub(c[i - 2]",
                        "name": "c0 "
                    },
                    {
                        "name": "c1*(i - 1))"
                    },
                    {
                        "default": " polyadd(tmp",
                        "name": "c1 "
                    },
                    {
                        "name": "polymulx(c1))"
                    },
                    {
                        "name": "return polyadd(c0"
                    },
                    {
                        "name": "polymulx(c1))"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "#"
                    },
                    {
                        "name": "# These are constant arrays are of integer type so as to be compatible"
                    },
                    {
                        "name": "# with the widest range of other types"
                    },
                    {
                        "name": "such as Decimal."
                    },
                    {
                        "name": "#"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "# Hermite"
                    },
                    {
                        "default": " np.array([-1",
                        "name": "hermedomain "
                    },
                    {
                        "name": "1])"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "# Hermite coefficients representing zero."
                    },
                    {
                        "default": " np.array([0])",
                        "name": "hermezero "
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "# Hermite coefficients representing one."
                    },
                    {
                        "default": " np.array([1])",
                        "name": "hermeone "
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "# Hermite coefficients representing the identity x."
                    },
                    {
                        "default": " np.array([0",
                        "name": "hermex "
                    },
                    {
                        "name": "1])"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def hermeline(off"
                    },
                    {
                        "name": "scl) :"
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "name": "Hermite series whose graph is a straight line."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "off"
                    },
                    {
                        "name": "scl : scalars"
                    },
                    {
                        "name": "The specified line is given by ``off + scl*x``."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "y : ndarray"
                    },
                    {
                        "name": "This module's representation of the Hermite series for"
                    },
                    {
                        "name": "``off + scl*x``."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "See Also"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": "polyline"
                    },
                    {
                        "name": "chebline"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Examples"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": ">>> from numpy.polynomial.hermite_e import hermeline"
                    },
                    {
                        "name": ">>> from numpy.polynomial.hermite_e import hermeline"
                    },
                    {
                        "name": "hermeval"
                    },
                    {
                        "name": ">>> hermeval(0"
                    },
                    {
                        "name": "hermeline(3"
                    },
                    {
                        "name": "2))"
                    },
                    {
                        "name": "3.0"
                    },
                    {
                        "name": ">>> hermeval(1"
                    },
                    {
                        "name": "hermeline(3"
                    },
                    {
                        "name": "2))"
                    },
                    {
                        "name": "5.0"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "default": " 0 :",
                        "name": "if scl !"
                    },
                    {
                        "name": "return np.array([off"
                    },
                    {
                        "name": "scl])"
                    },
                    {
                        "name": "else :"
                    },
                    {
                        "name": "return np.array([off])"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def hermefromroots(roots) :"
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "name": "Generate a HermiteE series with given roots."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "The function returns the coefficients of the polynomial"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " (x - r_0) * (x - r_1) * ... * (x - r_n)",
                        "name": ".. math:: p(x) "
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "in HermiteE form"
                    },
                    {
                        "name": "where the `r_n` are the roots specified in `roots`."
                    },
                    {
                        "name": "If a zero has multiplicity n"
                    },
                    {
                        "name": "then it must appear in `roots` n times."
                    },
                    {
                        "name": "For instance"
                    },
                    {
                        "name": "if 2 is a root of multiplicity three and 3 is a root of"
                    },
                    {
                        "name": "multiplicity 2"
                    },
                    {
                        "name": "then `roots` looks something like [2"
                    },
                    {
                        "name": "2"
                    },
                    {
                        "name": "2"
                    },
                    {
                        "name": "3"
                    },
                    {
                        "name": "3]. The"
                    },
                    {
                        "name": "roots can appear in any order."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "If the returned coefficients are `c`"
                    },
                    {
                        "name": "then"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " c_0 + c_1 * He_1(x) + ... +  c_n * He_n(x)",
                        "name": ".. math:: p(x) "
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "The coefficient of the last term is not generally 1 for monic"
                    },
                    {
                        "name": "polynomials in HermiteE form."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "roots : array_like"
                    },
                    {
                        "name": "Sequence containing the roots."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "out : ndarray"
                    },
                    {
                        "name": "1-D array of coefficients.  If all roots are real then `out` is a"
                    },
                    {
                        "name": "real array"
                    },
                    {
                        "name": "if some of the roots are complex"
                    },
                    {
                        "name": "then `out` is complex"
                    },
                    {
                        "name": "even if all the coefficients in the result are real (see Examples"
                    },
                    {
                        "name": "below)."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "See Also"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": "polyfromroots"
                    },
                    {
                        "name": "legfromroots"
                    },
                    {
                        "name": "lagfromroots"
                    },
                    {
                        "name": "hermfromroots"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "chebfromroots."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Examples"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": ">>> from numpy.polynomial.hermite_e import hermefromroots"
                    },
                    {
                        "name": "hermeval"
                    },
                    {
                        "default": " hermefromroots((-1",
                        "name": ">>> coef "
                    },
                    {
                        "name": "0"
                    },
                    {
                        "name": "1))"
                    },
                    {
                        "name": ">>> hermeval((-1"
                    },
                    {
                        "name": "0"
                    },
                    {
                        "name": "1)"
                    },
                    {
                        "name": "coef)"
                    },
                    {
                        "name": "array([ 0."
                    },
                    {
                        "name": "0."
                    },
                    {
                        "name": "0.])"
                    },
                    {
                        "default": " hermefromroots((-1j",
                        "name": ">>> coef "
                    },
                    {
                        "name": "1j))"
                    },
                    {
                        "name": ">>> hermeval((-1j"
                    },
                    {
                        "name": "1j)"
                    },
                    {
                        "name": "coef)"
                    },
                    {
                        "name": "array([ 0.+0.j"
                    },
                    {
                        "name": "0.+0.j])"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "default": "= 0 :",
                        "name": "if len(roots) "
                    },
                    {
                        "name": "return np.ones(1)"
                    },
                    {
                        "name": "else :"
                    },
                    {
                        "default": " pu.as_series([roots]",
                        "name": "[roots] "
                    },
                    {
                        "default": "False)",
                        "name": "trim"
                    },
                    {
                        "name": "roots.sort()"
                    },
                    {
                        "default": " [hermeline(-r",
                        "name": "p "
                    },
                    {
                        "name": "1) for r in roots]"
                    },
                    {
                        "default": " len(p)",
                        "name": "n "
                    },
                    {
                        "name": "while n > 1:"
                    },
                    {
                        "name": "m"
                    },
                    {
                        "default": " divmod(n",
                        "name": "r "
                    },
                    {
                        "name": "2)"
                    },
                    {
                        "default": " [hermemul(p[i]",
                        "name": "tmp "
                    },
                    {
                        "name": "p[i+m]) for i in range(m)]"
                    },
                    {
                        "name": "if r:"
                    },
                    {
                        "default": " hermemul(tmp[0]",
                        "name": "tmp[0] "
                    },
                    {
                        "name": "p[-1])"
                    },
                    {
                        "default": " tmp",
                        "name": "p "
                    },
                    {
                        "default": " m",
                        "name": "n "
                    },
                    {
                        "name": "return p[0]"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def hermeadd(c1"
                    },
                    {
                        "name": "c2"
                    }
                ]
            }
        }
    },
    "hpux": {
        "*": {}
    },
    "ibm": {
        "*": {}
    },
    "image": {
        "*": {}
    },
    "index_tricks": {
        "*": {
            "ix_": {
                "args": [
                    {
                        "name": "*args"
                    }
                ]
            }
        },
        "AxisConcatenator": {
            "__getitem__": {
                "args": [
                    {
                        "name": "key"
                    }
                ]
            },
            "__getslice__": {
                "args": [
                    {
                        "name": "i"
                    },
                    {
                        "name": "j"
                    }
                ]
            },
            "__init__": {
                "args": [
                    {
                        "default": "0",
                        "name": "axis"
                    },
                    {
                        "default": "False",
                        "name": "matrix"
                    },
                    {
                        "default": "1",
                        "name": "ndmin"
                    },
                    {
                        "default": "-1",
                        "name": "trans1d"
                    }
                ]
            },
            "__len__": {
                "args": []
            },
            "_retval": {
                "args": [
                    {
                        "name": "res"
                    }
                ]
            }
        },
        "CClass": {
            "__init__": {
                "args": []
            }
        },
        "RClass": {
            "__init__": {
                "args": []
            }
        },
        "nd_grid": {
            "__getitem__": {
                "args": [
                    {
                        "name": "key"
                    }
                ]
            },
            "__getslice__": {
                "args": [
                    {
                        "name": "i"
                    },
                    {
                        "name": "j"
                    }
                ]
            },
            "__init__": {
                "args": [
                    {
                        "default": "False",
                        "name": "sparse"
                    }
                ]
            },
            "__len__": {
                "args": []
            }
        },
        "ndenumerate": {
            "__init__": {
                "args": [
                    {
                        "name": "arr"
                    }
                ]
            },
            "__iter__": {
                "args": []
            },
            "__next__": {
                "args": []
            }
        },
        "ndindex": {
            "__init__": {
                "args": [
                    {
                        "name": "*shape"
                    }
                ]
            },
            "__iter__": {
                "args": []
            },
            "__next__": {
                "args": []
            },
            "ndincr": {
                "args": []
            }
        }
    },
    "info": {
        "*": {}
    },
    "install": {
        "*": {}
    },
    "install_clib": {
        "*": {}
    },
    "install_data": {
        "*": {}
    },
    "install_headers": {
        "*": {}
    },
    "intel": {
        "*": {
            "intel_version_match": {
                "args": [
                    {
                        "name": "type"
                    }
                ]
            }
        },
        "BaseIntelFCompiler": {
            "update_executables": {
                "args": []
            }
        },
        "IntelEM64TFCompiler": {
            "get_flags": {
                "args": []
            },
            "get_flags_arch": {
                "args": []
            },
            "get_flags_opt": {
                "args": []
            }
        },
        "IntelFCompiler": {
            "get_flags": {
                "args": []
            },
            "get_flags_arch": {
                "args": []
            },
            "get_flags_free": {
                "args": []
            },
            "get_flags_linker_so": {
                "args": []
            },
            "get_flags_opt": {
                "args": []
            }
        },
        "IntelItaniumFCompiler": {},
        "IntelItaniumVisualFCompiler": {},
        "IntelVisualFCompiler": {
            "get_flags": {
                "args": []
            },
            "get_flags_arch": {
                "args": []
            },
            "get_flags_debug": {
                "args": []
            },
            "get_flags_free": {
                "args": []
            },
            "get_flags_opt": {
                "args": []
            },
            "update_executables": {
                "args": []
            }
        }
    },
    "intelccompiler": {
        "*": {},
        "IntelCCompiler": {
            "": {
                "args": [
                    {
                        "default": "0",
                        "name": "verbose"
                    },
                    {
                        "default": "0",
                        "name": "dry_run"
                    },
                    {
                        "default": "0",
                        "name": "force"
                    }
                ]
            }
        },
        "IntelItaniumCCompiler": {}
    },
    "laguerre": {
        "*": {
            "lagcompanion": {
                "args": [
                    {
                        "name": "c"
                    }
                ]
            },
            "lagdiv": {
                "args": [
                    {
                        "name": "c1"
                    },
                    {
                        "name": "c2"
                    }
                ]
            },
            "laggauss": {
                "args": [
                    {
                        "name": "deg"
                    }
                ]
            },
            "laggrid2d": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "c"
                    }
                ]
            },
            "laggrid3d": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z"
                    },
                    {
                        "name": "c"
                    }
                ]
            },
            "lagint": {
                "args": [
                    {
                        "name": "c"
                    },
                    {
                        "default": "1",
                        "name": "m"
                    },
                    {
                        "default": "[]",
                        "name": "k"
                    },
                    {
                        "default": "0",
                        "name": "lbnd"
                    },
                    {
                        "default": "1",
                        "name": "scl"
                    },
                    {
                        "default": "0",
                        "name": "axis"
                    }
                ]
            },
            "lagline": {
                "args": [
                    {
                        "name": "off"
                    },
                    {
                        "name": "scl) :"
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "name": "Laguerre series whose graph is a straight line."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "off"
                    },
                    {
                        "name": "scl : scalars"
                    },
                    {
                        "name": "The specified line is given by ``off + scl*x``."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "y : ndarray"
                    },
                    {
                        "name": "This module's representation of the Laguerre series for"
                    },
                    {
                        "name": "``off + scl*x``."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "See Also"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": "polyline"
                    },
                    {
                        "name": "chebline"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Examples"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": ">>> from numpy.polynomial.laguerre import lagline"
                    },
                    {
                        "name": "lagval"
                    },
                    {
                        "name": ">>> lagval(0"
                    },
                    {
                        "name": "lagline(3"
                    },
                    {
                        "name": "2))"
                    },
                    {
                        "name": "3.0"
                    },
                    {
                        "name": ">>> lagval(1"
                    },
                    {
                        "name": "lagline(3"
                    },
                    {
                        "name": "2))"
                    },
                    {
                        "name": "5.0"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "default": " 0 :",
                        "name": "if scl !"
                    },
                    {
                        "name": "return np.array([off + scl"
                    },
                    {
                        "name": "-scl])"
                    },
                    {
                        "name": "else :"
                    },
                    {
                        "name": "return np.array([off])"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def lagfromroots(roots) :"
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "name": "Generate a Laguerre series with given roots."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "The function returns the coefficients of the polynomial"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " (x - r_0) * (x - r_1) * ... * (x - r_n)",
                        "name": ".. math:: p(x) "
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "in Laguerre form"
                    },
                    {
                        "name": "where the `r_n` are the roots specified in `roots`."
                    },
                    {
                        "name": "If a zero has multiplicity n"
                    },
                    {
                        "name": "then it must appear in `roots` n times."
                    },
                    {
                        "name": "For instance"
                    },
                    {
                        "name": "if 2 is a root of multiplicity three and 3 is a root of"
                    },
                    {
                        "name": "multiplicity 2"
                    },
                    {
                        "name": "then `roots` looks something like [2"
                    },
                    {
                        "name": "2"
                    },
                    {
                        "name": "2"
                    },
                    {
                        "name": "3"
                    },
                    {
                        "name": "3]. The"
                    },
                    {
                        "name": "roots can appear in any order."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "If the returned coefficients are `c`"
                    },
                    {
                        "name": "then"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " c_0 + c_1 * L_1(x) + ... +  c_n * L_n(x)",
                        "name": ".. math:: p(x) "
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "The coefficient of the last term is not generally 1 for monic"
                    },
                    {
                        "name": "polynomials in Laguerre form."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "roots : array_like"
                    },
                    {
                        "name": "Sequence containing the roots."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "out : ndarray"
                    },
                    {
                        "name": "1-D array of coefficients.  If all roots are real then `out` is a"
                    },
                    {
                        "name": "real array"
                    },
                    {
                        "name": "if some of the roots are complex"
                    },
                    {
                        "name": "then `out` is complex"
                    },
                    {
                        "name": "even if all the coefficients in the result are real (see Examples"
                    },
                    {
                        "name": "below)."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "See Also"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": "polyfromroots"
                    },
                    {
                        "name": "legfromroots"
                    },
                    {
                        "name": "chebfromroots"
                    },
                    {
                        "name": "hermfromroots"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "hermefromroots."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Examples"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": ">>> from numpy.polynomial.laguerre import lagfromroots"
                    },
                    {
                        "name": "lagval"
                    },
                    {
                        "default": " lagfromroots((-1",
                        "name": ">>> coef "
                    },
                    {
                        "name": "0"
                    },
                    {
                        "name": "1))"
                    },
                    {
                        "name": ">>> lagval((-1"
                    },
                    {
                        "name": "0"
                    },
                    {
                        "name": "1)"
                    },
                    {
                        "name": "coef)"
                    },
                    {
                        "name": "array([ 0."
                    },
                    {
                        "name": "0."
                    },
                    {
                        "name": "0.])"
                    },
                    {
                        "default": " lagfromroots((-1j",
                        "name": ">>> coef "
                    },
                    {
                        "name": "1j))"
                    },
                    {
                        "name": ">>> lagval((-1j"
                    },
                    {
                        "name": "1j)"
                    },
                    {
                        "name": "coef)"
                    },
                    {
                        "name": "array([ 0.+0.j"
                    },
                    {
                        "name": "0.+0.j])"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "default": "= 0 :",
                        "name": "if len(roots) "
                    },
                    {
                        "name": "return np.ones(1)"
                    },
                    {
                        "name": "else :"
                    },
                    {
                        "default": " pu.as_series([roots]",
                        "name": "[roots] "
                    },
                    {
                        "default": "False)",
                        "name": "trim"
                    },
                    {
                        "name": "roots.sort()"
                    },
                    {
                        "default": " [lagline(-r",
                        "name": "p "
                    },
                    {
                        "name": "1) for r in roots]"
                    },
                    {
                        "default": " len(p)",
                        "name": "n "
                    },
                    {
                        "name": "while n > 1:"
                    },
                    {
                        "name": "m"
                    },
                    {
                        "default": " divmod(n",
                        "name": "r "
                    },
                    {
                        "name": "2)"
                    },
                    {
                        "default": " [lagmul(p[i]",
                        "name": "tmp "
                    },
                    {
                        "name": "p[i+m]) for i in range(m)]"
                    },
                    {
                        "name": "if r:"
                    },
                    {
                        "default": " lagmul(tmp[0]",
                        "name": "tmp[0] "
                    },
                    {
                        "name": "p[-1])"
                    },
                    {
                        "default": " tmp",
                        "name": "p "
                    },
                    {
                        "default": " m",
                        "name": "n "
                    },
                    {
                        "name": "return p[0]"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def lagadd(c1"
                    },
                    {
                        "name": "c2"
                    }
                ]
            },
            "lagmul": {
                "args": [
                    {
                        "name": "c1"
                    },
                    {
                        "name": "c2"
                    }
                ]
            },
            "lagmulx": {
                "args": [
                    {
                        "name": "c"
                    }
                ]
            },
            "lagpow": {
                "args": [
                    {
                        "name": "c"
                    },
                    {
                        "name": "pow"
                    },
                    {
                        "default": "16) :",
                        "name": "maxpower"
                    },
                    {
                        "name": "\"\"\"Raise a Laguerre series to a power."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns the Laguerre series `c` raised to the power `pow`. The"
                    },
                    {
                        "name": "argument `c` is a sequence of coefficients ordered from low to high."
                    },
                    {
                        "name": "i.e."
                    },
                    {
                        "name": "[1"
                    },
                    {
                        "name": "2"
                    },
                    {
                        "name": "3] is the series  ``P_0 + 2*P_1 + 3*P_2.``"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "c : array_like"
                    },
                    {
                        "name": "1-D array of Laguerre series coefficients ordered from low to"
                    },
                    {
                        "name": "high."
                    },
                    {
                        "name": "pow : integer"
                    },
                    {
                        "name": "Power to which the series will be raised"
                    },
                    {
                        "name": "maxpower : integer"
                    },
                    {
                        "name": "optional"
                    },
                    {
                        "name": "Maximum power allowed. This is mainly to limit growth of the series"
                    },
                    {
                        "name": "to unmanageable size. Default is 16"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "coef : ndarray"
                    },
                    {
                        "name": "Laguerre series of power."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "See Also"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": "lagadd"
                    },
                    {
                        "name": "lagsub"
                    },
                    {
                        "name": "lagmul"
                    },
                    {
                        "name": "lagdiv"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Examples"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": ">>> from numpy.polynomial.laguerre import lagpow"
                    },
                    {
                        "name": ">>> lagpow([1"
                    },
                    {
                        "name": "2"
                    },
                    {
                        "name": "3]"
                    },
                    {
                        "name": "2)"
                    },
                    {
                        "name": "array([ 14."
                    },
                    {
                        "name": "-16."
                    },
                    {
                        "name": "56."
                    },
                    {
                        "name": "-72."
                    },
                    {
                        "name": "54.])"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "name": "# c is a trimmed copy"
                    },
                    {
                        "default": " pu.as_series([c])",
                        "name": "[c] "
                    },
                    {
                        "default": " int(pow)",
                        "name": "power "
                    },
                    {
                        "default": " pow or power < 0 :",
                        "name": "if power !"
                    },
                    {
                        "name": "raise ValueError(\"Power must be a non-negative integer.\")"
                    },
                    {
                        "name": "elif maxpower is not None and power > maxpower :"
                    },
                    {
                        "name": "raise ValueError(\"Power is too large\")"
                    },
                    {
                        "default": "= 0 :",
                        "name": "elif power "
                    },
                    {
                        "name": "return np.array([1]"
                    },
                    {
                        "default": "c.dtype)",
                        "name": "dtype"
                    },
                    {
                        "default": "= 1 :",
                        "name": "elif power "
                    },
                    {
                        "name": "return c"
                    },
                    {
                        "name": "else :"
                    },
                    {
                        "name": "# This can be made more efficient by using powers of two"
                    },
                    {
                        "name": "# in the usual way."
                    },
                    {
                        "default": " c",
                        "name": "prd "
                    },
                    {
                        "name": "for i in range(2"
                    },
                    {
                        "name": "power + 1) :"
                    },
                    {
                        "default": " lagmul(prd",
                        "name": "prd "
                    },
                    {
                        "name": "c)"
                    },
                    {
                        "name": "return prd"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def lagder(c"
                    },
                    {
                        "default": "1",
                        "name": "m"
                    },
                    {
                        "default": "1",
                        "name": "scl"
                    },
                    {
                        "default": "0) :",
                        "name": "axis"
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "name": "Differentiate a Laguerre series."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns the Laguerre series coefficients `c` differentiated `m` times"
                    },
                    {
                        "name": "along `axis`.  At each iteration the result is multiplied by `scl` (the"
                    },
                    {
                        "name": "scaling factor is for use in a linear change of variable). The argument"
                    },
                    {
                        "name": "`c` is an array of coefficients from low to high degree along each"
                    },
                    {
                        "name": "axis"
                    },
                    {
                        "name": "e.g."
                    },
                    {
                        "name": "[1"
                    },
                    {
                        "name": "2"
                    },
                    {
                        "name": "3] represents the series ``1*L_0 + 2*L_1 + 3*L_2``"
                    },
                    {
                        "name": "while [[1"
                    },
                    {
                        "name": "2]"
                    },
                    {
                        "name": "[1"
                    },
                    {
                        "name": "2]] represents ``1*L_0(x)*L_0(y) + 1*L_1(x)*L_0(y) +"
                    },
                    {
                        "default": "0 is ``x`` and axis=1 is",
                        "name": "2*L_0(x)*L_1(y) + 2*L_1(x)*L_1(y)`` if axis"
                    },
                    {
                        "name": "``y``."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "c : array_like"
                    },
                    {
                        "name": "Array of Laguerre series coefficients. If `c` is multidimensional"
                    },
                    {
                        "name": "the different axis correspond to different variables with the"
                    },
                    {
                        "name": "degree in each axis given by the corresponding index."
                    },
                    {
                        "name": "m : int"
                    },
                    {
                        "name": "optional"
                    },
                    {
                        "name": "Number of derivatives taken"
                    },
                    {
                        "name": "must be non-negative. (Default: 1)"
                    },
                    {
                        "name": "scl : scalar"
                    },
                    {
                        "name": "optional"
                    },
                    {
                        "name": "Each differentiation is multiplied by `scl`.  The end result is"
                    },
                    {
                        "name": "multiplication by ``scl**m``.  This is for use in a linear change of"
                    },
                    {
                        "name": "variable. (Default: 1)"
                    },
                    {
                        "name": "axis : int"
                    },
                    {
                        "name": "optional"
                    },
                    {
                        "name": "Axis over which the derivative is taken. (Default: 0)."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ".. versionadded:: 1.7.0"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "der : ndarray"
                    },
                    {
                        "name": "Laguerre series of the derivative."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "See Also"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": "lagint"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Notes"
                    },
                    {
                        "name": "-----"
                    },
                    {
                        "name": "In general"
                    },
                    {
                        "name": "the result of differentiating a Laguerre series does not"
                    },
                    {
                        "name": "resemble the same operation on a power series. Thus the result of this"
                    },
                    {
                        "name": "function may be \"unintuitive"
                    },
                    {
                        "name": "\" albeit correct; see Examples section"
                    },
                    {
                        "name": "below."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Examples"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": ">>> from numpy.polynomial.laguerre import lagder"
                    },
                    {
                        "name": ">>> lagder([ 1."
                    },
                    {
                        "name": "1."
                    },
                    {
                        "name": "1."
                    },
                    {
                        "name": "-3.])"
                    },
                    {
                        "name": "array([ 1."
                    },
                    {
                        "name": "2."
                    },
                    {
                        "name": "3.])"
                    },
                    {
                        "name": ">>> lagder([ 1."
                    },
                    {
                        "name": "0."
                    },
                    {
                        "name": "0."
                    },
                    {
                        "name": "-4."
                    },
                    {
                        "name": "3.]"
                    },
                    {
                        "default": "2)",
                        "name": "m"
                    },
                    {
                        "name": "array([ 1."
                    },
                    {
                        "name": "2."
                    },
                    {
                        "name": "3.])"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "default": " np.array(c",
                        "name": "c "
                    },
                    {
                        "default": "1",
                        "name": "ndmin"
                    },
                    {
                        "default": "1)",
                        "name": "copy"
                    },
                    {
                        "name": "if c.dtype.char in '?bBhHiIlLqQpP':"
                    },
                    {
                        "default": " c.astype(np.double)",
                        "name": "c "
                    },
                    {
                        "name": "cnt"
                    },
                    {
                        "default": " [int(t) for t in [m",
                        "name": "iaxis "
                    },
                    {
                        "name": "axis]]"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " m:",
                        "name": "if cnt !"
                    },
                    {
                        "name": "raise ValueError(\"The order of derivation must be integer\")"
                    },
                    {
                        "name": "if cnt < 0:"
                    },
                    {
                        "name": "raise ValueError(\"The order of derivation must be non-negative\")"
                    },
                    {
                        "default": " axis:",
                        "name": "if iaxis !"
                    },
                    {
                        "name": "raise ValueError(\"The axis must be integer\")"
                    },
                    {
                        "default": " iaxis < c.ndim:",
                        "name": "if not -c.ndim <"
                    },
                    {
                        "name": "raise ValueError(\"The axis is out of range\")"
                    },
                    {
                        "name": "if iaxis < 0:"
                    },
                    {
                        "default": " c.ndim",
                        "name": "iaxis +"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "= 0:",
                        "name": "if cnt "
                    },
                    {
                        "name": "return c"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " np.rollaxis(c",
                        "name": "c "
                    },
                    {
                        "name": "iaxis)"
                    },
                    {
                        "default": " len(c)",
                        "name": "n "
                    },
                    {
                        "default": " n:",
                        "name": "if cnt >"
                    },
                    {
                        "default": " c[:1]*0",
                        "name": "c "
                    },
                    {
                        "name": "else :"
                    },
                    {
                        "name": "for i in range(cnt"
                    }
                ]
            },
            "lagroots": {
                "args": [
                    {
                        "name": "c"
                    }
                ]
            },
            "lagsub": {
                "args": [
                    {
                        "name": "c1"
                    },
                    {
                        "name": "c2"
                    }
                ]
            },
            "lagval": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "c"
                    },
                    {
                        "default": "True",
                        "name": "tensor"
                    }
                ]
            },
            "lagval2d": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "c"
                    }
                ]
            },
            "lagval3d": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z"
                    },
                    {
                        "name": "c"
                    }
                ]
            },
            "lagvander": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "deg) :"
                    },
                    {
                        "name": "\"\"\"Pseudo-Vandermonde matrix of given degree."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns the pseudo-Vandermonde matrix of degree `deg` and sample points"
                    },
                    {
                        "name": "`x`. The pseudo-Vandermonde matrix is defined by"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ".. math:: V[..."
                    },
                    {
                        "default": " L_i(x)",
                        "name": "i] "
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " i <= deg`. The leading indices of `V` index the elements of",
                        "name": "where `0 <"
                    },
                    {
                        "name": "`x` and the last index is the degree of the Laguerre polynomial."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "If `c` is a 1-D array of coefficients of length `n + 1` and `V` is the"
                    },
                    {
                        "default": " lagvander(x",
                        "name": "array ``V "
                    },
                    {
                        "name": "n)``"
                    },
                    {
                        "name": "then ``np.dot(V"
                    },
                    {
                        "name": "c)`` and"
                    },
                    {
                        "name": "``lagval(x"
                    },
                    {
                        "name": "c)`` are the same up to roundoff. This equivalence is"
                    },
                    {
                        "name": "useful both for least squares fitting and for the evaluation of a large"
                    },
                    {
                        "name": "number of Laguerre series of the same degree and sample points."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "x : array_like"
                    },
                    {
                        "name": "Array of points. The dtype is converted to float64 or complex128"
                    },
                    {
                        "name": "depending on whether any of the elements are complex. If `x` is"
                    },
                    {
                        "name": "scalar it is converted to a 1-D array."
                    },
                    {
                        "name": "deg : int"
                    },
                    {
                        "name": "Degree of the resulting matrix."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "vander : ndarray"
                    },
                    {
                        "name": "The pseudo-Vandermonde matrix. The shape of the returned matrix is"
                    },
                    {
                        "name": "``x.shape + (deg + 1"
                    },
                    {
                        "name": ")``"
                    },
                    {
                        "name": "where The last index is the degree of the"
                    },
                    {
                        "name": "corresponding Laguerre polynomial.  The dtype will be the same as"
                    },
                    {
                        "name": "the converted `x`."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Examples"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": ">>> from numpy.polynomial.laguerre import lagvander"
                    },
                    {
                        "default": " np.array([0",
                        "name": ">>> x "
                    },
                    {
                        "name": "1"
                    },
                    {
                        "name": "2])"
                    },
                    {
                        "name": ">>> lagvander(x"
                    },
                    {
                        "name": "3)"
                    },
                    {
                        "name": "array([[ 1."
                    },
                    {
                        "name": "1."
                    },
                    {
                        "name": "1."
                    },
                    {
                        "name": "1.        ]"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "[ 1."
                    },
                    {
                        "name": "0."
                    },
                    {
                        "name": "-0.5"
                    },
                    {
                        "name": "-0.66666667]"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "[ 1."
                    },
                    {
                        "name": "-1."
                    },
                    {
                        "name": "-1."
                    },
                    {
                        "name": "-0.33333333]])"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "default": " int(deg)",
                        "name": "ideg "
                    },
                    {
                        "default": " deg:",
                        "name": "if ideg !"
                    },
                    {
                        "name": "raise ValueError(\"deg must be integer\")"
                    },
                    {
                        "name": "if ideg < 0:"
                    },
                    {
                        "name": "raise ValueError(\"deg must be non-negative\")"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " np.array(x",
                        "name": "x "
                    },
                    {
                        "default": "0",
                        "name": "copy"
                    },
                    {
                        "default": "1) + 0.0",
                        "name": "ndmin"
                    },
                    {
                        "default": " (ideg + 1",
                        "name": "dims "
                    },
                    {
                        "name": ") + x.shape"
                    },
                    {
                        "default": " x.dtype",
                        "name": "dtyp "
                    },
                    {
                        "default": " np.empty(dims",
                        "name": "v "
                    },
                    {
                        "default": "dtyp)",
                        "name": "dtype"
                    },
                    {
                        "default": " x*0 + 1",
                        "name": "v[0] "
                    },
                    {
                        "name": "if ideg > 0 :"
                    },
                    {
                        "default": " 1 - x",
                        "name": "v[1] "
                    },
                    {
                        "name": "for i in range(2"
                    },
                    {
                        "name": "ideg + 1) :"
                    },
                    {
                        "default": " (v[i-1]*(2*i - 1 - x) - v[i-2]*(i - 1))/i",
                        "name": "v[i] "
                    },
                    {
                        "name": "return np.rollaxis(v"
                    },
                    {
                        "name": "0"
                    },
                    {
                        "name": "v.ndim)"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def lagvander2d(x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "deg) :"
                    },
                    {
                        "name": "\"\"\"Pseudo-Vandermonde matrix of given degrees."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns the pseudo-Vandermonde matrix of degrees `deg` and sample"
                    },
                    {
                        "name": "points `(x"
                    },
                    {
                        "name": "y)`. The pseudo-Vandermonde matrix is defined by"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ".. math:: V[..."
                    },
                    {
                        "default": " L_i(x) * L_j(y)",
                        "name": "deg[1]*i + j] "
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " i <= deg[0]` and `0 <= j <= deg[1]`. The leading indices of",
                        "name": "where `0 <"
                    },
                    {
                        "name": "`V` index the points `(x"
                    },
                    {
                        "name": "y)` and the last index encodes the degrees of"
                    },
                    {
                        "name": "the Laguerre polynomials."
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " lagvander2d(x",
                        "name": "If ``V "
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "[xdeg"
                    },
                    {
                        "name": "ydeg])``"
                    },
                    {
                        "name": "then the columns of `V`"
                    },
                    {
                        "name": "correspond to the elements of a 2-D coefficient array `c` of shape"
                    },
                    {
                        "name": "(xdeg + 1"
                    },
                    {
                        "name": "ydeg + 1) in the order"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ".. math:: c_{00}"
                    },
                    {
                        "name": "c_{01}"
                    },
                    {
                        "name": "c_{02} ..."
                    },
                    {
                        "name": "c_{10}"
                    },
                    {
                        "name": "c_{11}"
                    },
                    {
                        "name": "c_{12} ..."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "and ``np.dot(V"
                    },
                    {
                        "name": "c.flat)`` and ``lagval2d(x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "c)`` will be the same"
                    },
                    {
                        "name": "up to roundoff. This equivalence is useful both for least squares"
                    },
                    {
                        "name": "fitting and for the evaluation of a large number of 2-D Laguerre"
                    },
                    {
                        "name": "series of the same degrees and sample points."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "x"
                    },
                    {
                        "name": "y : array_like"
                    },
                    {
                        "name": "Arrays of point coordinates"
                    },
                    {
                        "name": "all of the same shape. The dtypes"
                    },
                    {
                        "name": "will be converted to either float64 or complex128 depending on"
                    },
                    {
                        "name": "whether any of the elements are complex. Scalars are converted to"
                    },
                    {
                        "name": "1-D arrays."
                    },
                    {
                        "name": "deg : list of ints"
                    },
                    {
                        "name": "List of maximum degrees of the form [x_deg"
                    },
                    {
                        "name": "y_deg]."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "vander2d : ndarray"
                    },
                    {
                        "name": "The shape of the returned matrix is ``x.shape + (order"
                    },
                    {
                        "name": ")``"
                    },
                    {
                        "name": "where"
                    },
                    {
                        "default": " (deg[0]+1)*(deg([1]+1)`.  The dtype will be the same",
                        "name": ":math:`order "
                    },
                    {
                        "name": "as the converted `x` and `y`."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "See Also"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": "lagvander"
                    },
                    {
                        "name": "lagvander3d. lagval2d"
                    },
                    {
                        "name": "lagval3d"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Notes"
                    },
                    {
                        "name": "-----"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ".. versionadded::1.7.0"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "default": " [int(d) for d in deg]",
                        "name": "ideg "
                    },
                    {
                        "default": " [id == d and id >= 0 for id",
                        "name": "is_valid "
                    },
                    {
                        "name": "d in zip(ideg"
                    },
                    {
                        "name": "deg)]"
                    },
                    {
                        "default": " [1",
                        "name": "if is_valid !"
                    },
                    {
                        "name": "1]:"
                    },
                    {
                        "name": "raise ValueError(\"degrees must be non-negative integers\")"
                    },
                    {
                        "name": "degx"
                    },
                    {
                        "default": " ideg",
                        "name": "degy "
                    },
                    {
                        "name": "x"
                    },
                    {
                        "default": " np.array((x",
                        "name": "y "
                    },
                    {
                        "name": "y)"
                    },
                    {
                        "default": "0) + 0.0",
                        "name": "copy"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " lagvander(x",
                        "name": "vx "
                    },
                    {
                        "name": "degx)"
                    },
                    {
                        "default": " lagvander(y",
                        "name": "vy "
                    },
                    {
                        "name": "degy)"
                    },
                    {
                        "default": " vx[...",
                        "name": "v "
                    },
                    {
                        "name": "None]*vy[..."
                    },
                    {
                        "name": "None"
                    },
                    {
                        "name": ":]"
                    },
                    {
                        "name": "return v.reshape(v.shape[:-2] + (-1"
                    },
                    {
                        "name": "))"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def lagvander3d(x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z"
                    },
                    {
                        "name": "deg) :"
                    },
                    {
                        "name": "\"\"\"Pseudo-Vandermonde matrix of given degrees."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns the pseudo-Vandermonde matrix of degrees `deg` and sample"
                    },
                    {
                        "name": "points `(x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z)`. If `l"
                    },
                    {
                        "name": "m"
                    },
                    {
                        "name": "n` are the given degrees in `x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z`"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "then The pseudo-Vandermonde matrix is defined by"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ".. math:: V[..."
                    },
                    {
                        "default": " L_i(x)*L_j(y)*L_k(z)",
                        "name": "(m+1)(n+1)i + (n+1)j + k] "
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " i <= l`",
                        "name": "where `0 <"
                    },
                    {
                        "default": " j <= m`",
                        "name": "`0 <"
                    },
                    {
                        "default": " j <= n`.  The leading",
                        "name": "and `0 <"
                    },
                    {
                        "name": "indices of `V` index the points `(x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z)` and the last index encodes"
                    },
                    {
                        "name": "the degrees of the Laguerre polynomials."
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " lagvander3d(x",
                        "name": "If ``V "
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z"
                    },
                    {
                        "name": "[xdeg"
                    },
                    {
                        "name": "ydeg"
                    },
                    {
                        "name": "zdeg])``"
                    },
                    {
                        "name": "then the columns"
                    },
                    {
                        "name": "of `V` correspond to the elements of a 3-D coefficient array `c` of"
                    },
                    {
                        "name": "shape (xdeg + 1"
                    },
                    {
                        "name": "ydeg + 1"
                    },
                    {
                        "name": "zdeg + 1) in the order"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ".. math:: c_{000}"
                    },
                    {
                        "name": "c_{001}"
                    },
                    {
                        "name": "c_{002}"
                    },
                    {
                        "name": "..."
                    },
                    {
                        "name": "c_{010}"
                    },
                    {
                        "name": "c_{011}"
                    },
                    {
                        "name": "c_{012}"
                    },
                    {
                        "name": "..."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "and  ``np.dot(V"
                    },
                    {
                        "name": "c.flat)`` and ``lagval3d(x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z"
                    },
                    {
                        "name": "c)`` will be the"
                    },
                    {
                        "name": "same up to roundoff. This equivalence is useful both for least squares"
                    },
                    {
                        "name": "fitting and for the evaluation of a large number of 3-D Laguerre"
                    },
                    {
                        "name": "series of the same degrees and sample points."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z : array_like"
                    },
                    {
                        "name": "Arrays of point coordinates"
                    },
                    {
                        "name": "all of the same shape. The dtypes will"
                    },
                    {
                        "name": "be converted to either float64 or complex128 depending on whether"
                    },
                    {
                        "name": "any of the elements are complex. Scalars are converted to 1-D"
                    },
                    {
                        "name": "arrays."
                    },
                    {
                        "name": "deg : list of ints"
                    },
                    {
                        "name": "List of maximum degrees of the form [x_deg"
                    },
                    {
                        "name": "y_deg"
                    },
                    {
                        "name": "z_deg]."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "vander3d : ndarray"
                    },
                    {
                        "name": "The shape of the returned matrix is ``x.shape + (order"
                    },
                    {
                        "name": ")``"
                    },
                    {
                        "name": "where"
                    },
                    {
                        "default": " (deg[0]+1)*(deg([1]+1)*(deg[2]+1)`.  The dtype will",
                        "name": ":math:`order "
                    },
                    {
                        "name": "be the same as the converted `x`"
                    },
                    {
                        "name": "`y`"
                    },
                    {
                        "name": "and `z`."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "See Also"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": "lagvander"
                    },
                    {
                        "name": "lagvander3d. lagval2d"
                    },
                    {
                        "name": "lagval3d"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Notes"
                    },
                    {
                        "name": "-----"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ".. versionadded::1.7.0"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "default": " [int(d) for d in deg]",
                        "name": "ideg "
                    },
                    {
                        "default": " [id == d and id >= 0 for id",
                        "name": "is_valid "
                    },
                    {
                        "name": "d in zip(ideg"
                    },
                    {
                        "name": "deg)]"
                    },
                    {
                        "default": " [1",
                        "name": "if is_valid !"
                    },
                    {
                        "name": "1"
                    },
                    {
                        "name": "1]:"
                    },
                    {
                        "name": "raise ValueError(\"degrees must be non-negative integers\")"
                    },
                    {
                        "name": "degx"
                    },
                    {
                        "name": "degy"
                    },
                    {
                        "default": " ideg",
                        "name": "degz "
                    },
                    {
                        "name": "x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "default": " np.array((x",
                        "name": "z "
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z)"
                    },
                    {
                        "default": "0) + 0.0",
                        "name": "copy"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " lagvander(x",
                        "name": "vx "
                    },
                    {
                        "name": "degx)"
                    },
                    {
                        "default": " lagvander(y",
                        "name": "vy "
                    },
                    {
                        "name": "degy)"
                    },
                    {
                        "default": " lagvander(z",
                        "name": "vz "
                    },
                    {
                        "name": "degz)"
                    },
                    {
                        "default": " vx[...",
                        "name": "v "
                    },
                    {
                        "name": "None"
                    },
                    {
                        "name": "None]*vy[..."
                    },
                    {
                        "name": "None"
                    },
                    {
                        "name": ":"
                    },
                    {
                        "name": "None]*vz[..."
                    },
                    {
                        "name": "None"
                    },
                    {
                        "name": "None"
                    },
                    {
                        "name": ":]"
                    },
                    {
                        "name": "return v.reshape(v.shape[:-3] + (-1"
                    },
                    {
                        "name": "))"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def lagfit(x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "deg"
                    },
                    {
                        "default": "None",
                        "name": "rcond"
                    },
                    {
                        "default": "False",
                        "name": "full"
                    },
                    {
                        "default": "None",
                        "name": "w"
                    }
                ]
            },
            "lagweight": {
                "args": [
                    {
                        "name": "x"
                    }
                ]
            },
            "poly2lag": {
                "args": [
                    {
                        "name": "pol) :"
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "name": "poly2lag(pol)"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Convert a polynomial to a Laguerre series."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Convert an array representing the coefficients of a polynomial (relative"
                    },
                    {
                        "name": "to the \"standard\" basis) ordered from lowest degree to highest"
                    },
                    {
                        "name": "to an"
                    },
                    {
                        "name": "array of the coefficients of the equivalent Laguerre series"
                    },
                    {
                        "name": "ordered"
                    },
                    {
                        "name": "from lowest to highest degree."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "pol : array_like"
                    },
                    {
                        "name": "1-D array containing the polynomial coefficients"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "c : ndarray"
                    },
                    {
                        "name": "1-D array containing the coefficients of the equivalent Laguerre"
                    },
                    {
                        "name": "series."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "See Also"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": "lag2poly"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Notes"
                    },
                    {
                        "name": "-----"
                    },
                    {
                        "name": "The easy way to do conversions between polynomial basis sets"
                    },
                    {
                        "name": "is to use the convert method of a class instance."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Examples"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": ">>> from numpy.polynomial.laguerre import poly2lag"
                    },
                    {
                        "name": ">>> poly2lag(np.arange(4))"
                    },
                    {
                        "name": "array([ 23."
                    },
                    {
                        "name": "-63."
                    },
                    {
                        "name": "58."
                    },
                    {
                        "name": "-18.])"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "default": " pu.as_series([pol])",
                        "name": "[pol] "
                    },
                    {
                        "default": " len(pol) - 1",
                        "name": "deg "
                    },
                    {
                        "default": " 0",
                        "name": "res "
                    },
                    {
                        "name": "for i in range(deg"
                    },
                    {
                        "name": "-1"
                    },
                    {
                        "name": "-1) :"
                    },
                    {
                        "default": " lagadd(lagmulx(res)",
                        "name": "res "
                    },
                    {
                        "name": "pol[i])"
                    },
                    {
                        "name": "return res"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def lag2poly(c) :"
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "name": "Convert a Laguerre series to a polynomial."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Convert an array representing the coefficients of a Laguerre series"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "ordered from lowest degree to highest"
                    },
                    {
                        "name": "to an array of the coefficients"
                    },
                    {
                        "name": "of the equivalent polynomial (relative to the \"standard\" basis) ordered"
                    },
                    {
                        "name": "from lowest to highest degree."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "c : array_like"
                    },
                    {
                        "name": "1-D array containing the Laguerre series coefficients"
                    },
                    {
                        "name": "ordered"
                    },
                    {
                        "name": "from lowest order term to highest."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "pol : ndarray"
                    },
                    {
                        "name": "1-D array containing the coefficients of the equivalent polynomial"
                    },
                    {
                        "name": "(relative to the \"standard\" basis) ordered from lowest order term"
                    },
                    {
                        "name": "to highest."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "See Also"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": "poly2lag"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Notes"
                    },
                    {
                        "name": "-----"
                    },
                    {
                        "name": "The easy way to do conversions between polynomial basis sets"
                    },
                    {
                        "name": "is to use the convert method of a class instance."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Examples"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": ">>> from numpy.polynomial.laguerre import lag2poly"
                    },
                    {
                        "name": ">>> lag2poly([ 23."
                    },
                    {
                        "name": "-63."
                    },
                    {
                        "name": "58."
                    },
                    {
                        "name": "-18.])"
                    },
                    {
                        "name": "array([ 0."
                    },
                    {
                        "name": "1."
                    },
                    {
                        "name": "2."
                    },
                    {
                        "name": "3.])"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "name": "from .polynomial import polyadd"
                    },
                    {
                        "name": "polysub"
                    },
                    {
                        "name": "polymulx"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " pu.as_series([c])",
                        "name": "[c] "
                    },
                    {
                        "default": " len(c)",
                        "name": "n "
                    },
                    {
                        "default": "= 1:",
                        "name": "if n "
                    },
                    {
                        "name": "return c"
                    },
                    {
                        "name": "else:"
                    },
                    {
                        "default": " c[-2]",
                        "name": "c0 "
                    },
                    {
                        "default": " c[-1]",
                        "name": "c1 "
                    },
                    {
                        "name": "# i is the current degree of c1"
                    },
                    {
                        "name": "for i in range(n - 1"
                    },
                    {
                        "name": "1"
                    },
                    {
                        "name": "-1"
                    }
                ]
            }
        }
    },
    "lahey": {
        "*": {}
    },
    "legendre": {
        "*": {
            "legcompanion": {
                "args": [
                    {
                        "name": "c"
                    }
                ]
            },
            "legdiv": {
                "args": [
                    {
                        "name": "c1"
                    },
                    {
                        "name": "c2"
                    }
                ]
            },
            "leggauss": {
                "args": [
                    {
                        "name": "deg"
                    }
                ]
            },
            "leggrid2d": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "c"
                    }
                ]
            },
            "leggrid3d": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z"
                    },
                    {
                        "name": "c"
                    }
                ]
            },
            "legint": {
                "args": [
                    {
                        "name": "c"
                    },
                    {
                        "default": "1",
                        "name": "m"
                    },
                    {
                        "default": "[]",
                        "name": "k"
                    },
                    {
                        "default": "0",
                        "name": "lbnd"
                    },
                    {
                        "default": "1",
                        "name": "scl"
                    },
                    {
                        "default": "0",
                        "name": "axis"
                    }
                ]
            },
            "legmul": {
                "args": [
                    {
                        "name": "c1"
                    },
                    {
                        "name": "c2"
                    }
                ]
            },
            "legmulx": {
                "args": [
                    {
                        "name": "c"
                    }
                ]
            },
            "legpow": {
                "args": [
                    {
                        "name": "c"
                    },
                    {
                        "name": "pow"
                    },
                    {
                        "default": "16) :",
                        "name": "maxpower"
                    },
                    {
                        "name": "\"\"\"Raise a Legendre series to a power."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns the Legendre series `c` raised to the power `pow`. The"
                    },
                    {
                        "name": "arguement `c` is a sequence of coefficients ordered from low to high."
                    },
                    {
                        "name": "i.e."
                    },
                    {
                        "name": "[1"
                    },
                    {
                        "name": "2"
                    },
                    {
                        "name": "3] is the series  ``P_0 + 2*P_1 + 3*P_2.``"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "c : array_like"
                    },
                    {
                        "name": "1-D array of Legendre series coefficients ordered from low to"
                    },
                    {
                        "name": "high."
                    },
                    {
                        "name": "pow : integer"
                    },
                    {
                        "name": "Power to which the series will be raised"
                    },
                    {
                        "name": "maxpower : integer"
                    },
                    {
                        "name": "optional"
                    },
                    {
                        "name": "Maximum power allowed. This is mainly to limit growth of the series"
                    },
                    {
                        "name": "to unmanageable size. Default is 16"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "coef : ndarray"
                    },
                    {
                        "name": "Legendre series of power."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "See Also"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": "legadd"
                    },
                    {
                        "name": "legsub"
                    },
                    {
                        "name": "legmul"
                    },
                    {
                        "name": "legdiv"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Examples"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "name": "# c is a trimmed copy"
                    },
                    {
                        "default": " pu.as_series([c])",
                        "name": "[c] "
                    },
                    {
                        "default": " int(pow)",
                        "name": "power "
                    },
                    {
                        "default": " pow or power < 0 :",
                        "name": "if power !"
                    },
                    {
                        "name": "raise ValueError(\"Power must be a non-negative integer.\")"
                    },
                    {
                        "name": "elif maxpower is not None and power > maxpower :"
                    },
                    {
                        "name": "raise ValueError(\"Power is too large\")"
                    },
                    {
                        "default": "= 0 :",
                        "name": "elif power "
                    },
                    {
                        "name": "return np.array([1]"
                    },
                    {
                        "default": "c.dtype)",
                        "name": "dtype"
                    },
                    {
                        "default": "= 1 :",
                        "name": "elif power "
                    },
                    {
                        "name": "return c"
                    },
                    {
                        "name": "else :"
                    },
                    {
                        "name": "# This can be made more efficient by using powers of two"
                    },
                    {
                        "name": "# in the usual way."
                    },
                    {
                        "default": " c",
                        "name": "prd "
                    },
                    {
                        "name": "for i in range(2"
                    },
                    {
                        "name": "power + 1) :"
                    },
                    {
                        "default": " legmul(prd",
                        "name": "prd "
                    },
                    {
                        "name": "c)"
                    },
                    {
                        "name": "return prd"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def legder(c"
                    },
                    {
                        "default": "1",
                        "name": "m"
                    },
                    {
                        "default": "1",
                        "name": "scl"
                    },
                    {
                        "default": "0) :",
                        "name": "axis"
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "name": "Differentiate a Legendre series."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns the Legendre series coefficients `c` differentiated `m` times"
                    },
                    {
                        "name": "along `axis`.  At each iteration the result is multiplied by `scl` (the"
                    },
                    {
                        "name": "scaling factor is for use in a linear change of variable). The argument"
                    },
                    {
                        "name": "`c` is an array of coefficients from low to high degree along each"
                    },
                    {
                        "name": "axis"
                    },
                    {
                        "name": "e.g."
                    },
                    {
                        "name": "[1"
                    },
                    {
                        "name": "2"
                    },
                    {
                        "name": "3] represents the series ``1*L_0 + 2*L_1 + 3*L_2``"
                    },
                    {
                        "name": "while [[1"
                    },
                    {
                        "name": "2]"
                    },
                    {
                        "name": "[1"
                    },
                    {
                        "name": "2]] represents ``1*L_0(x)*L_0(y) + 1*L_1(x)*L_0(y) +"
                    },
                    {
                        "default": "0 is ``x`` and axis=1 is",
                        "name": "2*L_0(x)*L_1(y) + 2*L_1(x)*L_1(y)`` if axis"
                    },
                    {
                        "name": "``y``."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "c : array_like"
                    },
                    {
                        "name": "Array of Legendre series coefficients. If c is multidimensional the"
                    },
                    {
                        "name": "different axis correspond to different variables with the degree in"
                    },
                    {
                        "name": "each axis given by the corresponding index."
                    },
                    {
                        "name": "m : int"
                    },
                    {
                        "name": "optional"
                    },
                    {
                        "name": "Number of derivatives taken"
                    },
                    {
                        "name": "must be non-negative. (Default: 1)"
                    },
                    {
                        "name": "scl : scalar"
                    },
                    {
                        "name": "optional"
                    },
                    {
                        "name": "Each differentiation is multiplied by `scl`.  The end result is"
                    },
                    {
                        "name": "multiplication by ``scl**m``.  This is for use in a linear change of"
                    },
                    {
                        "name": "variable. (Default: 1)"
                    },
                    {
                        "name": "axis : int"
                    },
                    {
                        "name": "optional"
                    },
                    {
                        "name": "Axis over which the derivative is taken. (Default: 0)."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ".. versionadded:: 1.7.0"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "der : ndarray"
                    },
                    {
                        "name": "Legendre series of the derivative."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "See Also"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": "legint"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Notes"
                    },
                    {
                        "name": "-----"
                    },
                    {
                        "name": "In general"
                    },
                    {
                        "name": "the result of differentiating a Legendre series does not"
                    },
                    {
                        "name": "resemble the same operation on a power series. Thus the result of this"
                    },
                    {
                        "name": "function may be \"unintuitive"
                    },
                    {
                        "name": "\" albeit correct; see Examples section"
                    },
                    {
                        "name": "below."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Examples"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": ">>> from numpy.polynomial import legendre as L"
                    },
                    {
                        "default": " (1",
                        "name": ">>> c "
                    },
                    {
                        "name": "2"
                    },
                    {
                        "name": "3"
                    },
                    {
                        "name": "4)"
                    },
                    {
                        "name": ">>> L.legder(c)"
                    },
                    {
                        "name": "array([  6."
                    },
                    {
                        "name": "9."
                    },
                    {
                        "name": "20.])"
                    },
                    {
                        "name": ">>> L.legder(c"
                    },
                    {
                        "name": "3)"
                    },
                    {
                        "name": "array([ 60.])"
                    },
                    {
                        "name": ">>> L.legder(c"
                    },
                    {
                        "default": "-1)",
                        "name": "scl"
                    },
                    {
                        "name": "array([ -6."
                    },
                    {
                        "name": "-9."
                    },
                    {
                        "name": "-20.])"
                    },
                    {
                        "name": ">>> L.legder(c"
                    },
                    {
                        "name": "2"
                    },
                    {
                        "name": "-1)"
                    },
                    {
                        "name": "array([  9."
                    },
                    {
                        "name": "60.])"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "default": " np.array(c",
                        "name": "c "
                    },
                    {
                        "default": "1",
                        "name": "ndmin"
                    },
                    {
                        "default": "1)",
                        "name": "copy"
                    },
                    {
                        "name": "if c.dtype.char in '?bBhHiIlLqQpP':"
                    },
                    {
                        "default": " c.astype(np.double)",
                        "name": "c "
                    },
                    {
                        "name": "cnt"
                    },
                    {
                        "default": " [int(t) for t in [m",
                        "name": "iaxis "
                    },
                    {
                        "name": "axis]]"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " m:",
                        "name": "if cnt !"
                    },
                    {
                        "name": "raise ValueError(\"The order of derivation must be integer\")"
                    },
                    {
                        "name": "if cnt < 0:"
                    },
                    {
                        "name": "raise ValueError(\"The order of derivation must be non-negative\")"
                    },
                    {
                        "default": " axis:",
                        "name": "if iaxis !"
                    },
                    {
                        "name": "raise ValueError(\"The axis must be integer\")"
                    },
                    {
                        "default": " iaxis < c.ndim:",
                        "name": "if not -c.ndim <"
                    },
                    {
                        "name": "raise ValueError(\"The axis is out of range\")"
                    },
                    {
                        "name": "if iaxis < 0:"
                    },
                    {
                        "default": " c.ndim",
                        "name": "iaxis +"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "= 0:",
                        "name": "if cnt "
                    },
                    {
                        "name": "return c"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " np.rollaxis(c",
                        "name": "c "
                    },
                    {
                        "name": "iaxis)"
                    },
                    {
                        "default": " len(c)",
                        "name": "n "
                    },
                    {
                        "default": " n:",
                        "name": "if cnt >"
                    },
                    {
                        "default": " c[:1]*0",
                        "name": "c "
                    },
                    {
                        "name": "else :"
                    },
                    {
                        "name": "for i in range(cnt"
                    }
                ]
            },
            "legroots": {
                "args": [
                    {
                        "name": "c"
                    }
                ]
            },
            "legsub": {
                "args": [
                    {
                        "name": "c1"
                    },
                    {
                        "name": "c2"
                    }
                ]
            },
            "legval": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "c"
                    },
                    {
                        "default": "True",
                        "name": "tensor"
                    }
                ]
            },
            "legval2d": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "c"
                    }
                ]
            },
            "legval3d": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z"
                    },
                    {
                        "name": "c"
                    }
                ]
            },
            "legvander": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "deg) :"
                    },
                    {
                        "name": "\"\"\"Pseudo-Vandermonde matrix of given degree."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns the pseudo-Vandermonde matrix of degree `deg` and sample points"
                    },
                    {
                        "name": "`x`. The pseudo-Vandermonde matrix is defined by"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ".. math:: V[..."
                    },
                    {
                        "default": " L_i(x)",
                        "name": "i] "
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " i <= deg`. The leading indices of `V` index the elements of",
                        "name": "where `0 <"
                    },
                    {
                        "name": "`x` and the last index is the degree of the Legendre polynomial."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "If `c` is a 1-D array of coefficients of length `n + 1` and `V` is the"
                    },
                    {
                        "default": " legvander(x",
                        "name": "array ``V "
                    },
                    {
                        "name": "n)``"
                    },
                    {
                        "name": "then ``np.dot(V"
                    },
                    {
                        "name": "c)`` and"
                    },
                    {
                        "name": "``legval(x"
                    },
                    {
                        "name": "c)`` are the same up to roundoff. This equivalence is"
                    },
                    {
                        "name": "useful both for least squares fitting and for the evaluation of a large"
                    },
                    {
                        "name": "number of Legendre series of the same degree and sample points."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "x : array_like"
                    },
                    {
                        "name": "Array of points. The dtype is converted to float64 or complex128"
                    },
                    {
                        "name": "depending on whether any of the elements are complex. If `x` is"
                    },
                    {
                        "name": "scalar it is converted to a 1-D array."
                    },
                    {
                        "name": "deg : int"
                    },
                    {
                        "name": "Degree of the resulting matrix."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "vander : ndarray"
                    },
                    {
                        "name": "The pseudo-Vandermonde matrix. The shape of the returned matrix is"
                    },
                    {
                        "name": "``x.shape + (deg + 1"
                    },
                    {
                        "name": ")``"
                    },
                    {
                        "name": "where The last index is the degree of the"
                    },
                    {
                        "name": "corresponding Legendre polynomial.  The dtype will be the same as"
                    },
                    {
                        "name": "the converted `x`."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "default": " int(deg)",
                        "name": "ideg "
                    },
                    {
                        "default": " deg:",
                        "name": "if ideg !"
                    },
                    {
                        "name": "raise ValueError(\"deg must be integer\")"
                    },
                    {
                        "name": "if ideg < 0:"
                    },
                    {
                        "name": "raise ValueError(\"deg must be non-negative\")"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " np.array(x",
                        "name": "x "
                    },
                    {
                        "default": "0",
                        "name": "copy"
                    },
                    {
                        "default": "1) + 0.0",
                        "name": "ndmin"
                    },
                    {
                        "default": " (ideg + 1",
                        "name": "dims "
                    },
                    {
                        "name": ") + x.shape"
                    },
                    {
                        "default": " x.dtype",
                        "name": "dtyp "
                    },
                    {
                        "default": " np.empty(dims",
                        "name": "v "
                    },
                    {
                        "default": "dtyp)",
                        "name": "dtype"
                    },
                    {
                        "name": "# Use forward recursion to generate the entries. This is not as accurate"
                    },
                    {
                        "name": "# as reverse recursion in this application but it is more efficient."
                    },
                    {
                        "default": " x*0 + 1",
                        "name": "v[0] "
                    },
                    {
                        "name": "if ideg > 0 :"
                    },
                    {
                        "default": " x",
                        "name": "v[1] "
                    },
                    {
                        "name": "for i in range(2"
                    },
                    {
                        "name": "ideg + 1) :"
                    },
                    {
                        "default": " (v[i-1]*x*(2*i - 1) - v[i-2]*(i - 1))/i",
                        "name": "v[i] "
                    },
                    {
                        "name": "return np.rollaxis(v"
                    },
                    {
                        "name": "0"
                    },
                    {
                        "name": "v.ndim)"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def legvander2d(x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "deg) :"
                    },
                    {
                        "name": "\"\"\"Pseudo-Vandermonde matrix of given degrees."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns the pseudo-Vandermonde matrix of degrees `deg` and sample"
                    },
                    {
                        "name": "points `(x"
                    },
                    {
                        "name": "y)`. The pseudo-Vandermonde matrix is defined by"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ".. math:: V[..."
                    },
                    {
                        "default": " L_i(x) * L_j(y)",
                        "name": "deg[1]*i + j] "
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " i <= deg[0]` and `0 <= j <= deg[1]`. The leading indices of",
                        "name": "where `0 <"
                    },
                    {
                        "name": "`V` index the points `(x"
                    },
                    {
                        "name": "y)` and the last index encodes the degrees of"
                    },
                    {
                        "name": "the Legendre polynomials."
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " legvander2d(x",
                        "name": "If ``V "
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "[xdeg"
                    },
                    {
                        "name": "ydeg])``"
                    },
                    {
                        "name": "then the columns of `V`"
                    },
                    {
                        "name": "correspond to the elements of a 2-D coefficient array `c` of shape"
                    },
                    {
                        "name": "(xdeg + 1"
                    },
                    {
                        "name": "ydeg + 1) in the order"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ".. math:: c_{00}"
                    },
                    {
                        "name": "c_{01}"
                    },
                    {
                        "name": "c_{02} ..."
                    },
                    {
                        "name": "c_{10}"
                    },
                    {
                        "name": "c_{11}"
                    },
                    {
                        "name": "c_{12} ..."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "and ``np.dot(V"
                    },
                    {
                        "name": "c.flat)`` and ``legval2d(x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "c)`` will be the same"
                    },
                    {
                        "name": "up to roundoff. This equivalence is useful both for least squares"
                    },
                    {
                        "name": "fitting and for the evaluation of a large number of 2-D Legendre"
                    },
                    {
                        "name": "series of the same degrees and sample points."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "x"
                    },
                    {
                        "name": "y : array_like"
                    },
                    {
                        "name": "Arrays of point coordinates"
                    },
                    {
                        "name": "all of the same shape. The dtypes"
                    },
                    {
                        "name": "will be converted to either float64 or complex128 depending on"
                    },
                    {
                        "name": "whether any of the elements are complex. Scalars are converted to"
                    },
                    {
                        "name": "1-D arrays."
                    },
                    {
                        "name": "deg : list of ints"
                    },
                    {
                        "name": "List of maximum degrees of the form [x_deg"
                    },
                    {
                        "name": "y_deg]."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "vander2d : ndarray"
                    },
                    {
                        "name": "The shape of the returned matrix is ``x.shape + (order"
                    },
                    {
                        "name": ")``"
                    },
                    {
                        "name": "where"
                    },
                    {
                        "default": " (deg[0]+1)*(deg([1]+1)`.  The dtype will be the same",
                        "name": ":math:`order "
                    },
                    {
                        "name": "as the converted `x` and `y`."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "See Also"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": "legvander"
                    },
                    {
                        "name": "legvander3d. legval2d"
                    },
                    {
                        "name": "legval3d"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Notes"
                    },
                    {
                        "name": "-----"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ".. versionadded::1.7.0"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "default": " [int(d) for d in deg]",
                        "name": "ideg "
                    },
                    {
                        "default": " [id == d and id >= 0 for id",
                        "name": "is_valid "
                    },
                    {
                        "name": "d in zip(ideg"
                    },
                    {
                        "name": "deg)]"
                    },
                    {
                        "default": " [1",
                        "name": "if is_valid !"
                    },
                    {
                        "name": "1]:"
                    },
                    {
                        "name": "raise ValueError(\"degrees must be non-negative integers\")"
                    },
                    {
                        "name": "degx"
                    },
                    {
                        "default": " ideg",
                        "name": "degy "
                    },
                    {
                        "name": "x"
                    },
                    {
                        "default": " np.array((x",
                        "name": "y "
                    },
                    {
                        "name": "y)"
                    },
                    {
                        "default": "0) + 0.0",
                        "name": "copy"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " legvander(x",
                        "name": "vx "
                    },
                    {
                        "name": "degx)"
                    },
                    {
                        "default": " legvander(y",
                        "name": "vy "
                    },
                    {
                        "name": "degy)"
                    },
                    {
                        "default": " vx[...",
                        "name": "v "
                    },
                    {
                        "name": "None]*vy[..."
                    },
                    {
                        "name": "None"
                    },
                    {
                        "name": ":]"
                    },
                    {
                        "name": "return v.reshape(v.shape[:-2] + (-1"
                    },
                    {
                        "name": "))"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def legvander3d(x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z"
                    },
                    {
                        "name": "deg) :"
                    },
                    {
                        "name": "\"\"\"Pseudo-Vandermonde matrix of given degrees."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns the pseudo-Vandermonde matrix of degrees `deg` and sample"
                    },
                    {
                        "name": "points `(x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z)`. If `l"
                    },
                    {
                        "name": "m"
                    },
                    {
                        "name": "n` are the given degrees in `x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z`"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "then The pseudo-Vandermonde matrix is defined by"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ".. math:: V[..."
                    },
                    {
                        "default": " L_i(x)*L_j(y)*L_k(z)",
                        "name": "(m+1)(n+1)i + (n+1)j + k] "
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " i <= l`",
                        "name": "where `0 <"
                    },
                    {
                        "default": " j <= m`",
                        "name": "`0 <"
                    },
                    {
                        "default": " j <= n`.  The leading",
                        "name": "and `0 <"
                    },
                    {
                        "name": "indices of `V` index the points `(x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z)` and the last index encodes"
                    },
                    {
                        "name": "the degrees of the Legendre polynomials."
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " legvander3d(x",
                        "name": "If ``V "
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z"
                    },
                    {
                        "name": "[xdeg"
                    },
                    {
                        "name": "ydeg"
                    },
                    {
                        "name": "zdeg])``"
                    },
                    {
                        "name": "then the columns"
                    },
                    {
                        "name": "of `V` correspond to the elements of a 3-D coefficient array `c` of"
                    },
                    {
                        "name": "shape (xdeg + 1"
                    },
                    {
                        "name": "ydeg + 1"
                    },
                    {
                        "name": "zdeg + 1) in the order"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ".. math:: c_{000}"
                    },
                    {
                        "name": "c_{001}"
                    },
                    {
                        "name": "c_{002}"
                    },
                    {
                        "name": "..."
                    },
                    {
                        "name": "c_{010}"
                    },
                    {
                        "name": "c_{011}"
                    },
                    {
                        "name": "c_{012}"
                    },
                    {
                        "name": "..."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "and ``np.dot(V"
                    },
                    {
                        "name": "c.flat)`` and ``legval3d(x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z"
                    },
                    {
                        "name": "c)`` will be the"
                    },
                    {
                        "name": "same up to roundoff. This equivalence is useful both for least squares"
                    },
                    {
                        "name": "fitting and for the evaluation of a large number of 3-D Legendre"
                    },
                    {
                        "name": "series of the same degrees and sample points."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z : array_like"
                    },
                    {
                        "name": "Arrays of point coordinates"
                    },
                    {
                        "name": "all of the same shape. The dtypes will"
                    },
                    {
                        "name": "be converted to either float64 or complex128 depending on whether"
                    },
                    {
                        "name": "any of the elements are complex. Scalars are converted to 1-D"
                    },
                    {
                        "name": "arrays."
                    },
                    {
                        "name": "deg : list of ints"
                    },
                    {
                        "name": "List of maximum degrees of the form [x_deg"
                    },
                    {
                        "name": "y_deg"
                    },
                    {
                        "name": "z_deg]."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "vander3d : ndarray"
                    },
                    {
                        "name": "The shape of the returned matrix is ``x.shape + (order"
                    },
                    {
                        "name": ")``"
                    },
                    {
                        "name": "where"
                    },
                    {
                        "default": " (deg[0]+1)*(deg([1]+1)*(deg[2]+1)`.  The dtype will",
                        "name": ":math:`order "
                    },
                    {
                        "name": "be the same as the converted `x`"
                    },
                    {
                        "name": "`y`"
                    },
                    {
                        "name": "and `z`."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "See Also"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": "legvander"
                    },
                    {
                        "name": "legvander3d. legval2d"
                    },
                    {
                        "name": "legval3d"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Notes"
                    },
                    {
                        "name": "-----"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ".. versionadded::1.7.0"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "default": " [int(d) for d in deg]",
                        "name": "ideg "
                    },
                    {
                        "default": " [id == d and id >= 0 for id",
                        "name": "is_valid "
                    },
                    {
                        "name": "d in zip(ideg"
                    },
                    {
                        "name": "deg)]"
                    },
                    {
                        "default": " [1",
                        "name": "if is_valid !"
                    },
                    {
                        "name": "1"
                    },
                    {
                        "name": "1]:"
                    },
                    {
                        "name": "raise ValueError(\"degrees must be non-negative integers\")"
                    },
                    {
                        "name": "degx"
                    },
                    {
                        "name": "degy"
                    },
                    {
                        "default": " ideg",
                        "name": "degz "
                    },
                    {
                        "name": "x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "default": " np.array((x",
                        "name": "z "
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "z)"
                    },
                    {
                        "default": "0) + 0.0",
                        "name": "copy"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " legvander(x",
                        "name": "vx "
                    },
                    {
                        "name": "degx)"
                    },
                    {
                        "default": " legvander(y",
                        "name": "vy "
                    },
                    {
                        "name": "degy)"
                    },
                    {
                        "default": " legvander(z",
                        "name": "vz "
                    },
                    {
                        "name": "degz)"
                    },
                    {
                        "default": " vx[...",
                        "name": "v "
                    },
                    {
                        "name": "None"
                    },
                    {
                        "name": "None]*vy[..."
                    },
                    {
                        "name": "None"
                    },
                    {
                        "name": ":"
                    },
                    {
                        "name": "None]*vz[..."
                    },
                    {
                        "name": "None"
                    },
                    {
                        "name": "None"
                    },
                    {
                        "name": ":]"
                    },
                    {
                        "name": "return v.reshape(v.shape[:-3] + (-1"
                    },
                    {
                        "name": "))"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def legfit(x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "deg"
                    },
                    {
                        "default": "None",
                        "name": "rcond"
                    },
                    {
                        "default": "False",
                        "name": "full"
                    },
                    {
                        "default": "None",
                        "name": "w"
                    }
                ]
            },
            "legweight": {
                "args": [
                    {
                        "name": "x"
                    }
                ]
            },
            "poly2leg": {
                "args": [
                    {
                        "name": "pol) :"
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "name": "Convert a polynomial to a Legendre series."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Convert an array representing the coefficients of a polynomial (relative"
                    },
                    {
                        "name": "to the \"standard\" basis) ordered from lowest degree to highest"
                    },
                    {
                        "name": "to an"
                    },
                    {
                        "name": "array of the coefficients of the equivalent Legendre series"
                    },
                    {
                        "name": "ordered"
                    },
                    {
                        "name": "from lowest to highest degree."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "pol : array_like"
                    },
                    {
                        "name": "1-D array containing the polynomial coefficients"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "c : ndarray"
                    },
                    {
                        "name": "1-D array containing the coefficients of the equivalent Legendre"
                    },
                    {
                        "name": "series."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "See Also"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": "leg2poly"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Notes"
                    },
                    {
                        "name": "-----"
                    },
                    {
                        "name": "The easy way to do conversions between polynomial basis sets"
                    },
                    {
                        "name": "is to use the convert method of a class instance."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Examples"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": ">>> from numpy import polynomial as P"
                    },
                    {
                        "default": " P.Polynomial(np.arange(4))",
                        "name": ">>> p "
                    },
                    {
                        "name": ">>> p"
                    },
                    {
                        "name": "Polynomial([ 0."
                    },
                    {
                        "name": "1."
                    },
                    {
                        "name": "2."
                    },
                    {
                        "name": "3.]"
                    },
                    {
                        "name": "[-1."
                    },
                    {
                        "name": "1.])"
                    },
                    {
                        "default": " P.Legendre(P.poly2leg(p.coef))",
                        "name": ">>> c "
                    },
                    {
                        "name": ">>> c"
                    },
                    {
                        "name": "Legendre([ 1."
                    },
                    {
                        "name": "3.25"
                    },
                    {
                        "name": "1."
                    },
                    {
                        "name": "0.75]"
                    },
                    {
                        "name": "[-1."
                    },
                    {
                        "name": "1.])"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "default": " pu.as_series([pol])",
                        "name": "[pol] "
                    },
                    {
                        "default": " len(pol) - 1",
                        "name": "deg "
                    },
                    {
                        "default": " 0",
                        "name": "res "
                    },
                    {
                        "name": "for i in range(deg"
                    },
                    {
                        "name": "-1"
                    },
                    {
                        "name": "-1) :"
                    },
                    {
                        "default": " legadd(legmulx(res)",
                        "name": "res "
                    },
                    {
                        "name": "pol[i])"
                    },
                    {
                        "name": "return res"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def leg2poly(c) :"
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "name": "Convert a Legendre series to a polynomial."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Convert an array representing the coefficients of a Legendre series"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "ordered from lowest degree to highest"
                    },
                    {
                        "name": "to an array of the coefficients"
                    },
                    {
                        "name": "of the equivalent polynomial (relative to the \"standard\" basis) ordered"
                    },
                    {
                        "name": "from lowest to highest degree."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "c : array_like"
                    },
                    {
                        "name": "1-D array containing the Legendre series coefficients"
                    },
                    {
                        "name": "ordered"
                    },
                    {
                        "name": "from lowest order term to highest."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "pol : ndarray"
                    },
                    {
                        "name": "1-D array containing the coefficients of the equivalent polynomial"
                    },
                    {
                        "name": "(relative to the \"standard\" basis) ordered from lowest order term"
                    },
                    {
                        "name": "to highest."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "See Also"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": "poly2leg"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Notes"
                    },
                    {
                        "name": "-----"
                    },
                    {
                        "name": "The easy way to do conversions between polynomial basis sets"
                    },
                    {
                        "name": "is to use the convert method of a class instance."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Examples"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "default": " P.Legendre(range(4))",
                        "name": ">>> c "
                    },
                    {
                        "name": ">>> c"
                    },
                    {
                        "name": "Legendre([ 0."
                    },
                    {
                        "name": "1."
                    },
                    {
                        "name": "2."
                    },
                    {
                        "name": "3.]"
                    },
                    {
                        "name": "[-1."
                    },
                    {
                        "name": "1.])"
                    },
                    {
                        "default": " c.convert(kind=P.Polynomial)",
                        "name": ">>> p "
                    },
                    {
                        "name": ">>> p"
                    },
                    {
                        "name": "Polynomial([-1."
                    },
                    {
                        "name": "-3.5"
                    },
                    {
                        "name": "3."
                    },
                    {
                        "name": "7.5]"
                    },
                    {
                        "name": "[-1."
                    },
                    {
                        "name": "1.])"
                    },
                    {
                        "name": ">>> P.leg2poly(range(4))"
                    },
                    {
                        "name": "array([-1."
                    },
                    {
                        "name": "-3.5"
                    },
                    {
                        "name": "3."
                    },
                    {
                        "name": "7.5])"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "name": "from .polynomial import polyadd"
                    },
                    {
                        "name": "polysub"
                    },
                    {
                        "name": "polymulx"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " pu.as_series([c])",
                        "name": "[c] "
                    },
                    {
                        "default": " len(c)",
                        "name": "n "
                    },
                    {
                        "name": "if n < 3:"
                    },
                    {
                        "name": "return c"
                    },
                    {
                        "name": "else:"
                    },
                    {
                        "default": " c[-2]",
                        "name": "c0 "
                    },
                    {
                        "default": " c[-1]",
                        "name": "c1 "
                    },
                    {
                        "name": "# i is the current degree of c1"
                    },
                    {
                        "name": "for i in range(n - 1"
                    },
                    {
                        "name": "1"
                    },
                    {
                        "name": "-1) :"
                    },
                    {
                        "default": " c0",
                        "name": "tmp "
                    },
                    {
                        "default": " polysub(c[i - 2]",
                        "name": "c0 "
                    },
                    {
                        "name": "(c1*(i - 1))/i)"
                    },
                    {
                        "default": " polyadd(tmp",
                        "name": "c1 "
                    },
                    {
                        "name": "(polymulx(c1)*(2*i - 1))/i)"
                    },
                    {
                        "name": "return polyadd(c0"
                    },
                    {
                        "name": "polymulx(c1))"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "#"
                    },
                    {
                        "name": "# These are constant arrays are of integer type so as to be compatible"
                    },
                    {
                        "name": "# with the widest range of other types"
                    },
                    {
                        "name": "such as Decimal."
                    },
                    {
                        "name": "#"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "# Legendre"
                    },
                    {
                        "default": " np.array([-1",
                        "name": "legdomain "
                    },
                    {
                        "name": "1])"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "# Legendre coefficients representing zero."
                    },
                    {
                        "default": " np.array([0])",
                        "name": "legzero "
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "# Legendre coefficients representing one."
                    },
                    {
                        "default": " np.array([1])",
                        "name": "legone "
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "# Legendre coefficients representing the identity x."
                    },
                    {
                        "default": " np.array([0",
                        "name": "legx "
                    },
                    {
                        "name": "1])"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def legline(off"
                    },
                    {
                        "name": "scl) :"
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "name": "Legendre series whose graph is a straight line."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "off"
                    },
                    {
                        "name": "scl : scalars"
                    },
                    {
                        "name": "The specified line is given by ``off + scl*x``."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "y : ndarray"
                    },
                    {
                        "name": "This module's representation of the Legendre series for"
                    },
                    {
                        "name": "``off + scl*x``."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "See Also"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": "polyline"
                    },
                    {
                        "name": "chebline"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Examples"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": ">>> import numpy.polynomial.legendre as L"
                    },
                    {
                        "name": ">>> L.legline(3"
                    },
                    {
                        "name": "2)"
                    },
                    {
                        "name": "array([3"
                    },
                    {
                        "name": "2])"
                    },
                    {
                        "name": ">>> L.legval(-3"
                    },
                    {
                        "name": "L.legline(3"
                    },
                    {
                        "name": "2)) # should be -3"
                    },
                    {
                        "name": "-3.0"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "default": " 0 :",
                        "name": "if scl !"
                    },
                    {
                        "name": "return np.array([off"
                    },
                    {
                        "name": "scl])"
                    },
                    {
                        "name": "else :"
                    },
                    {
                        "name": "return np.array([off])"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def legfromroots(roots) :"
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "name": "Generate a Legendre series with given roots."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "The function returns the coefficients of the polynomial"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " (x - r_0) * (x - r_1) * ... * (x - r_n)",
                        "name": ".. math:: p(x) "
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "in Legendre form"
                    },
                    {
                        "name": "where the `r_n` are the roots specified in `roots`."
                    },
                    {
                        "name": "If a zero has multiplicity n"
                    },
                    {
                        "name": "then it must appear in `roots` n times."
                    },
                    {
                        "name": "For instance"
                    },
                    {
                        "name": "if 2 is a root of multiplicity three and 3 is a root of"
                    },
                    {
                        "name": "multiplicity 2"
                    },
                    {
                        "name": "then `roots` looks something like [2"
                    },
                    {
                        "name": "2"
                    },
                    {
                        "name": "2"
                    },
                    {
                        "name": "3"
                    },
                    {
                        "name": "3]. The"
                    },
                    {
                        "name": "roots can appear in any order."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "If the returned coefficients are `c`"
                    },
                    {
                        "name": "then"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " c_0 + c_1 * L_1(x) + ... +  c_n * L_n(x)",
                        "name": ".. math:: p(x) "
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "The coefficient of the last term is not generally 1 for monic"
                    },
                    {
                        "name": "polynomials in Legendre form."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Parameters"
                    },
                    {
                        "name": "----------"
                    },
                    {
                        "name": "roots : array_like"
                    },
                    {
                        "name": "Sequence containing the roots."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Returns"
                    },
                    {
                        "name": "-------"
                    },
                    {
                        "name": "out : ndarray"
                    },
                    {
                        "name": "1-D array of coefficients.  If all roots are real then `out` is a"
                    },
                    {
                        "name": "real array"
                    },
                    {
                        "name": "if some of the roots are complex"
                    },
                    {
                        "name": "then `out` is complex"
                    },
                    {
                        "name": "even if all the coefficients in the result are real (see Examples"
                    },
                    {
                        "name": "below)."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "See Also"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": "polyfromroots"
                    },
                    {
                        "name": "chebfromroots"
                    },
                    {
                        "name": "lagfromroots"
                    },
                    {
                        "name": "hermfromroots"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "hermefromroots."
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "Examples"
                    },
                    {
                        "name": "--------"
                    },
                    {
                        "name": ">>> import numpy.polynomial.legendre as L"
                    },
                    {
                        "name": ">>> L.legfromroots((-1"
                    },
                    {
                        "name": "0"
                    },
                    {
                        "name": "1)) # x^3 - x relative to the standard basis"
                    },
                    {
                        "name": "array([ 0."
                    },
                    {
                        "name": "-0.4"
                    },
                    {
                        "name": "0."
                    },
                    {
                        "name": "0.4])"
                    },
                    {
                        "default": " complex(0",
                        "name": ">>> j "
                    },
                    {
                        "name": "1)"
                    },
                    {
                        "name": ">>> L.legfromroots((-j"
                    },
                    {
                        "name": "j)) # x^2 + 1 relative to the standard basis"
                    },
                    {
                        "name": "array([ 1.33333333+0.j"
                    },
                    {
                        "name": "0.00000000+0.j"
                    },
                    {
                        "name": "0.66666667+0.j])"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "\"\"\""
                    },
                    {
                        "default": "= 0 :",
                        "name": "if len(roots) "
                    },
                    {
                        "name": "return np.ones(1)"
                    },
                    {
                        "name": "else :"
                    },
                    {
                        "default": " pu.as_series([roots]",
                        "name": "[roots] "
                    },
                    {
                        "default": "False)",
                        "name": "trim"
                    },
                    {
                        "name": "roots.sort()"
                    },
                    {
                        "default": " [legline(-r",
                        "name": "p "
                    },
                    {
                        "name": "1) for r in roots]"
                    },
                    {
                        "default": " len(p)",
                        "name": "n "
                    },
                    {
                        "name": "while n > 1:"
                    },
                    {
                        "name": "m"
                    },
                    {
                        "default": " divmod(n",
                        "name": "r "
                    },
                    {
                        "name": "2)"
                    },
                    {
                        "default": " [legmul(p[i]",
                        "name": "tmp "
                    },
                    {
                        "name": "p[i+m]) for i in range(m)]"
                    },
                    {
                        "name": "if r:"
                    },
                    {
                        "default": " legmul(tmp[0]",
                        "name": "tmp[0] "
                    },
                    {
                        "name": "p[-1])"
                    },
                    {
                        "default": " tmp",
                        "name": "p "
                    },
                    {
                        "default": " m",
                        "name": "n "
                    },
                    {
                        "name": "return p[0]"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": "def legadd(c1"
                    },
                    {
                        "name": "c2"
                    }
                ]
            }
        }
    },
    "lib2def": {
        "*": {
            "getnm": {
                "args": [
                    {
                        "default": " ['nm'",
                        "name": "nm_cmd "
                    },
                    {
                        "name": "'-Cs'"
                    },
                    {
                        "name": "'python%s.lib' % py_ver]"
                    }
                ]
            },
            "output_def": {
                "args": [
                    {
                        "name": "dlist"
                    },
                    {
                        "name": "flist"
                    },
                    {
                        "name": "header"
                    },
                    {
                        "default": " sys.stdout",
                        "name": "file "
                    }
                ]
            },
            "parse_cmd": {
                "args": [
                    {
                        "name": ""
                    }
                ]
            },
            "parse_nm": {
                "args": [
                    {
                        "name": "nm_output"
                    }
                ]
            }
        }
    },
    "linalg": {
        "*": {}
    },
    "line_endings": {
        "*": {
            "dos2unix": {
                "args": [
                    {
                        "name": "file"
                    }
                ]
            },
            "dos2unix_dir": {
                "args": [
                    {
                        "name": "dir_name"
                    }
                ]
            },
            "dos2unix_one_dir": {
                "args": [
                    {
                        "name": "modified_files"
                    },
                    {
                        "name": "dir_name"
                    },
                    {
                        "name": "file_names"
                    }
                ]
            },
            "unix2dos": {
                "args": [
                    {
                        "name": "file"
                    }
                ]
            },
            "unix2dos_dir": {
                "args": [
                    {
                        "name": "dir_name"
                    }
                ]
            },
            "unix2dos_one_dir": {
                "args": [
                    {
                        "name": "modified_files"
                    },
                    {
                        "name": "dir_name"
                    },
                    {
                        "name": "file_names"
                    }
                ]
            }
        }
    },
    "linear_algebra": {
        "*": {
            "qr_decomposition": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "'full'",
                        "name": "mode"
                    }
                ]
            }
        }
    },
    "log": {
        "*": {
            "_fix_args": {
                "args": [
                    {
                        "name": "args"
                    },
                    {
                        "default": "1",
                        "name": "flag"
                    }
                ]
            }
        }
    },
    "ma": {
        "*": {}
    },
    "machar": {
        "*": {}
    },
    "matlib": {
        "*": {
            "empty": {
                "args": [
                    {
                        "name": "shape"
                    },
                    {
                        "default": "None",
                        "name": "dtype"
                    },
                    {
                        "default": "'C'",
                        "name": "order"
                    }
                ]
            },
            "eye": {
                "args": [
                    {
                        "name": "n"
                    },
                    {
                        "default": "None",
                        "name": "M"
                    },
                    {
                        "default": "0",
                        "name": "k"
                    },
                    {
                        "default": "float",
                        "name": "dtype"
                    }
                ]
            },
            "identity": {
                "args": [
                    {
                        "name": "n"
                    },
                    {
                        "default": "None",
                        "name": "dtype"
                    }
                ]
            },
            "ones": {
                "args": [
                    {
                        "name": "shape"
                    },
                    {
                        "default": "None",
                        "name": "dtype"
                    },
                    {
                        "default": "'C'",
                        "name": "order"
                    }
                ]
            },
            "rand": {
                "args": [
                    {
                        "name": "*args"
                    }
                ]
            },
            "randn": {
                "args": [
                    {
                        "name": "*args"
                    }
                ]
            },
            "repmat": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "m"
                    },
                    {
                        "name": "n"
                    }
                ]
            },
            "zeros": {
                "args": [
                    {
                        "name": "shape"
                    },
                    {
                        "default": "None",
                        "name": "dtype"
                    },
                    {
                        "default": "'C'",
                        "name": "order"
                    }
                ]
            }
        }
    },
    "matrix": {
        "*": {
            "Matrix": {
                "args": [
                    {
                        "name": "data"
                    },
                    {
                        "default": "None",
                        "name": "typecode"
                    },
                    {
                        "default": "1",
                        "name": "copy"
                    },
                    {
                        "default": "0",
                        "name": "savespace"
                    }
                ]
            }
        }
    },
    "memmap": {
        "*": {}
    },
    "mingw32ccompiler": {
        "*": {}
    },
    "mips": {
        "*": {}
    },
    "misc": {
        "*": {}
    },
    "misc_util": {
        "*": {},
        "InstallableLib": {
            "__init__": {
                "args": [
                    {
                        "name": "name"
                    },
                    {
                        "name": "build_info"
                    },
                    {
                        "name": "target_dir"
                    }
                ]
            },
            "_fix_paths": {
                "args": [
                    {
                        "name": "paths"
                    },
                    {
                        "name": "local_path"
                    },
                    {
                        "name": "include_non_existing"
                    }
                ]
            },
            "_get_directories": {
                "args": [
                    {
                        "name": "list_of_sources"
                    }
                ]
            },
            "_get_f90_modules": {
                "args": [
                    {
                        "name": "source"
                    }
                ]
            },
            "_get_headers": {
                "args": [
                    {
                        "name": "directory_list"
                    }
                ]
            },
            "all_strings": {
                "args": [
                    {
                        "name": "lst"
                    }
                ]
            },
            "allpath": {
                "args": [
                    {
                        "name": "name"
                    }
                ]
            },
            "as_list": {
                "args": [
                    {
                        "name": "seq"
                    }
                ]
            },
            "blue_text": {
                "args": [
                    {
                        "name": "s"
                    }
                ]
            },
            "clean_up_temporary_directory": {
                "args": [
                    {
                        "name": ""
                    }
                ]
            },
            "colour_text": {
                "args": [
                    {
                        "name": "s"
                    },
                    {
                        "default": "None",
                        "name": "fg"
                    },
                    {
                        "default": "None",
                        "name": "bg"
                    }
                ]
            },
            "cyan_text": {
                "args": [
                    {
                        "name": "s"
                    }
                ]
            },
            "cyg2win32": {
                "args": [
                    {
                        "name": "path"
                    }
                ]
            },
            "default_text": {
                "args": [
                    {
                        "name": "s"
                    }
                ]
            },
            "dot_join": {
                "args": [
                    {
                        "name": "*args"
                    }
                ]
            },
            "filter_sources": {
                "args": [
                    {
                        "name": "sources"
                    }
                ]
            },
            "general_source_directories_files": {
                "args": [
                    {
                        "name": "top_path"
                    }
                ]
            },
            "general_source_files": {
                "args": [
                    {
                        "name": "top_path"
                    }
                ]
            },
            "get_data_files": {
                "args": [
                    {
                        "name": "data"
                    }
                ]
            },
            "get_dependencies": {
                "args": [
                    {
                        "name": "sources"
                    }
                ]
            },
            "get_ext_source_files": {
                "args": [
                    {
                        "name": "ext"
                    }
                ]
            },
            "get_frame": {
                "args": [
                    {
                        "default": "0",
                        "name": "level"
                    }
                ]
            },
            "get_language": {
                "args": [
                    {
                        "name": "sources"
                    }
                ]
            },
            "get_lib_source_files": {
                "args": [
                    {
                        "name": "lib"
                    }
                ]
            },
            "get_mathlibs": {
                "args": [
                    {
                        "default": "None",
                        "name": "path"
                    }
                ]
            },
            "get_path_from_frame": {
                "args": [
                    {
                        "name": "frame"
                    },
                    {
                        "default": "None",
                        "name": "parent_path"
                    }
                ]
            },
            "get_script_files": {
                "args": [
                    {
                        "name": "scripts"
                    }
                ]
            },
            "get_shared_lib_extension": {
                "args": [
                    {
                        "default": "False",
                        "name": "is_python_ext"
                    }
                ]
            },
            "gpaths": {
                "args": [
                    {
                        "name": "paths"
                    },
                    {
                        "default": "''",
                        "name": "local_path"
                    },
                    {
                        "default": "True",
                        "name": "include_non_existing"
                    }
                ]
            },
            "green_text": {
                "args": [
                    {
                        "name": "s"
                    }
                ]
            },
            "has_cxx_sources": {
                "args": [
                    {
                        "name": "sources"
                    }
                ]
            },
            "has_f_sources": {
                "args": [
                    {
                        "name": "sources"
                    }
                ]
            },
            "is_glob_pattern": {
                "args": [
                    {
                        "name": "s"
                    }
                ]
            },
            "is_local_src_dir": {
                "args": [
                    {
                        "name": "directory"
                    }
                ]
            },
            "is_sequence": {
                "args": [
                    {
                        "name": "seq"
                    }
                ]
            },
            "is_string": {
                "args": [
                    {
                        "name": "s"
                    }
                ]
            },
            "make_temp_file": {
                "args": [
                    {
                        "default": "''",
                        "name": "suffix"
                    },
                    {
                        "default": "''",
                        "name": "prefix"
                    },
                    {
                        "default": "True",
                        "name": "text"
                    }
                ]
            },
            "mingw32": {
                "args": [
                    {
                        "name": ""
                    }
                ]
            },
            "minrelpath": {
                "args": [
                    {
                        "name": "path"
                    }
                ]
            },
            "msvc_runtime_library": {
                "args": [
                    {
                        "name": ""
                    }
                ]
            },
            "njoin": {
                "args": [
                    {
                        "name": "*path"
                    }
                ]
            },
            "quote_args": {
                "args": [
                    {
                        "name": "args"
                    }
                ]
            },
            "red_text": {
                "args": [
                    {
                        "name": "s"
                    }
                ]
            },
            "rel_path": {
                "args": [
                    {
                        "name": "path"
                    },
                    {
                        "name": "parent_path"
                    }
                ]
            },
            "terminal_has_colors": {
                "args": [
                    {
                        "name": ""
                    }
                ]
            },
            "yellow_text": {
                "args": [
                    {
                        "name": "s"
                    }
                ]
            }
        }
    },
    "mlab": {
        "*": {}
    },
    "mrecords": {
        "*": {
            "_checknames": {
                "args": [
                    {
                        "name": "descr"
                    },
                    {
                        "default": "None",
                        "name": "names"
                    }
                ]
            },
            "_get_fieldmask": {
                "args": []
            },
            "_getformats": {
                "args": [
                    {
                        "name": "data"
                    }
                ]
            }
        }
    },
    "nag": {
        "*": {}
    },
    "nanfunctions": {
        "*": {
            "_copyto": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "val"
                    },
                    {
                        "name": "mask"
                    }
                ]
            },
            "_divide_by_count": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "b"
                    },
                    {
                        "default": "None",
                        "name": "out"
                    }
                ]
            },
            "_replace_nan": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "val"
                    }
                ]
            },
            "nanargmax": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "axis"
                    }
                ]
            },
            "nanargmin": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "axis"
                    }
                ]
            },
            "nanmax": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "axis"
                    },
                    {
                        "default": "None",
                        "name": "out"
                    },
                    {
                        "default": "False",
                        "name": "keepdims"
                    }
                ]
            },
            "nanmean": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "axis"
                    },
                    {
                        "default": "None",
                        "name": "dtype"
                    },
                    {
                        "default": "None",
                        "name": "out"
                    },
                    {
                        "default": "False",
                        "name": "keepdims"
                    }
                ]
            },
            "nanmin": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "axis"
                    },
                    {
                        "default": "None",
                        "name": "out"
                    },
                    {
                        "default": "False",
                        "name": "keepdims"
                    }
                ]
            },
            "nanstd": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "axis"
                    },
                    {
                        "default": "None",
                        "name": "dtype"
                    },
                    {
                        "default": "None",
                        "name": "out"
                    },
                    {
                        "default": "0",
                        "name": "ddof"
                    },
                    {
                        "default": "False",
                        "name": "keepdims"
                    }
                ]
            },
            "nansum": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "axis"
                    },
                    {
                        "default": "None",
                        "name": "dtype"
                    },
                    {
                        "default": "None",
                        "name": "out"
                    },
                    {
                        "default": "0",
                        "name": "keepdims"
                    }
                ]
            },
            "nanvar": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "axis"
                    },
                    {
                        "default": "None",
                        "name": "dtype"
                    },
                    {
                        "default": "None",
                        "name": "out"
                    },
                    {
                        "default": "0",
                        "name": "ddof"
                    },
                    {
                        "default": "False",
                        "name": "keepdims"
                    }
                ]
            }
        }
    },
    "nd_image": {
        "*": {}
    },
    "none": {
        "*": {}
    },
    "npy_pkg_config": {
        "*": {},
        "FormatError": {
            "__init__": {
                "args": [
                    {
                        "name": "msg"
                    }
                ]
            },
            "__str__": {
                "args": []
            }
        },
        "LibraryInfo": {
            "__init__": {
                "args": [
                    {
                        "name": "name"
                    },
                    {
                        "name": "description"
                    },
                    {
                        "name": "version"
                    },
                    {
                        "name": "sections"
                    },
                    {
                        "name": "vars"
                    },
                    {
                        "default": "None",
                        "name": "requires"
                    }
                ]
            },
            "__str__": {
                "args": []
            },
            "cflags": {
                "args": [
                    {
                        "default": "\"default\"",
                        "name": "section"
                    }
                ]
            },
            "libs": {
                "args": [
                    {
                        "default": "\"default\"",
                        "name": "section"
                    }
                ]
            },
            "sections": {
                "args": []
            }
        },
        "PkgNotFound": {
            "__init__": {
                "args": [
                    {
                        "name": "msg"
                    }
                ]
            },
            "__str__": {
                "args": []
            },
            "_escape_backslash": {
                "args": [
                    {
                        "name": "val"
                    }
                ]
            },
            "next_token": {
                "args": [
                    {
                        "name": "t"
                    }
                ]
            },
            "parse_flags": {
                "args": [
                    {
                        "name": "line"
                    }
                ]
            }
        }
    },
    "npyio": {
        "*": {
            "seek_gzip_factory": {
                "args": [
                    {
                        "name": "f"
                    }
                ]
            }
        },
        "BagObj": {
            "__getattribute__": {
                "args": [
                    {
                        "name": "key"
                    }
                ]
            },
            "__init__": {
                "args": [
                    {
                        "name": "obj"
                    }
                ]
            },
            "zipfile_factory": {
                "args": [
                    {
                        "name": "*args"
                    },
                    {
                        "name": "**kwargs"
                    }
                ]
            }
        },
        "GzipFile": {
            "seek": {
                "args": [
                    {
                        "name": "offset"
                    },
                    {
                        "default": "0",
                        "name": "whence"
                    }
                ]
            },
            "tell": {
                "args": []
            }
        }
    },
    "numeric": {
        "*": {},
        "ComplexWarning": {
            "asarray": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "dtype"
                    },
                    {
                        "default": "None",
                        "name": "order"
                    }
                ]
            },
            "extend_all": {
                "args": [
                    {
                        "name": "module"
                    }
                ]
            },
            "full": {
                "args": [
                    {
                        "name": "shape"
                    },
                    {
                        "name": "fill_value"
                    },
                    {
                        "default": "None",
                        "name": "dtype"
                    },
                    {
                        "default": "'C'",
                        "name": "order"
                    }
                ]
            },
            "full_like": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "fill_value"
                    },
                    {
                        "default": "None",
                        "name": "dtype"
                    },
                    {
                        "default": "'K'",
                        "name": "order"
                    },
                    {
                        "default": "True",
                        "name": "subok"
                    }
                ]
            },
            "ones": {
                "args": [
                    {
                        "name": "shape"
                    },
                    {
                        "default": "None",
                        "name": "dtype"
                    },
                    {
                        "default": "'C'",
                        "name": "order"
                    }
                ]
            },
            "ones_like": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "dtype"
                    },
                    {
                        "default": "'K'",
                        "name": "order"
                    },
                    {
                        "default": "True",
                        "name": "subok"
                    }
                ]
            },
            "zeros_like": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "dtype"
                    },
                    {
                        "default": "'K'",
                        "name": "order"
                    },
                    {
                        "default": "True",
                        "name": "subok"
                    }
                ]
            }
        },
        "_unspecified": {},
        "ndarray is returned.": {
            "_maketup": {
                "args": [
                    {
                        "name": "descr"
                    },
                    {
                        "name": "val"
                    }
                ]
            },
            "_mode_from_name": {
                "args": [
                    {
                        "name": "mode"
                    }
                ]
            },
            "_move_axis_to_0": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "axis"
                    }
                ]
            },
            "allclose": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "b"
                    },
                    {
                        "default": "1.e-5",
                        "name": "rtol"
                    },
                    {
                        "default": "1.e-8",
                        "name": "atol"
                    }
                ]
            },
            "alterdot": {
                "args": [
                    {
                        "name": ""
                    }
                ]
            },
            "argwhere": {
                "args": [
                    {
                        "name": "a"
                    }
                ]
            },
            "array_equal": {
                "args": [
                    {
                        "name": "a1"
                    },
                    {
                        "name": "a2"
                    }
                ]
            },
            "array_equiv": {
                "args": [
                    {
                        "name": "a1"
                    },
                    {
                        "name": "a2"
                    }
                ]
            },
            "array_repr": {
                "args": [
                    {
                        "name": "arr"
                    },
                    {
                        "default": "None",
                        "name": "max_line_width"
                    },
                    {
                        "default": "None",
                        "name": "precision"
                    },
                    {
                        "default": "None",
                        "name": "suppress_small"
                    }
                ]
            },
            "array_str": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "max_line_width"
                    },
                    {
                        "default": "None",
                        "name": "precision"
                    },
                    {
                        "default": "None",
                        "name": "suppress_small"
                    }
                ]
            },
            "asanyarray": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "dtype"
                    },
                    {
                        "default": "None",
                        "name": "order"
                    }
                ]
            },
            "ascontiguousarray": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "dtype"
                    }
                ]
            },
            "asfortranarray": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "dtype"
                    }
                ]
            },
            "base_repr": {
                "args": [
                    {
                        "name": "number"
                    },
                    {
                        "default": "2",
                        "name": "base"
                    },
                    {
                        "default": "0",
                        "name": "padding"
                    }
                ]
            },
            "binary_repr": {
                "args": [
                    {
                        "name": "num"
                    },
                    {
                        "default": "None",
                        "name": "width"
                    }
                ]
            },
            "convolve": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "v"
                    },
                    {
                        "default": "'full'",
                        "name": "mode"
                    }
                ]
            },
            "correlate": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "v"
                    },
                    {
                        "default": "'valid'",
                        "name": "mode"
                    },
                    {
                        "default": "False",
                        "name": "old_behavior"
                    }
                ]
            },
            "cross": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "b"
                    },
                    {
                        "default": "-1",
                        "name": "axisa"
                    },
                    {
                        "default": "-1",
                        "name": "axisb"
                    },
                    {
                        "default": "-1",
                        "name": "axisc"
                    },
                    {
                        "default": "None",
                        "name": "axis"
                    }
                ]
            },
            "flatnonzero": {
                "args": [
                    {
                        "name": "a"
                    }
                ]
            },
            "fromfunction": {
                "args": [
                    {
                        "name": "function"
                    },
                    {
                        "name": "shape"
                    },
                    {
                        "name": "**kwargs"
                    }
                ]
            },
            "getbufsize": {
                "args": [
                    {
                        "name": ""
                    }
                ]
            },
            "geterr": {
                "args": [
                    {
                        "name": ""
                    }
                ]
            },
            "geterrcall": {
                "args": [
                    {
                        "name": ""
                    }
                ]
            },
            "identity": {
                "args": [
                    {
                        "name": "n"
                    },
                    {
                        "default": "None",
                        "name": "dtype"
                    }
                ]
            },
            "indices": {
                "args": [
                    {
                        "name": "dimensions"
                    },
                    {
                        "default": "int",
                        "name": "dtype"
                    }
                ]
            },
            "isclose": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "b"
                    },
                    {
                        "default": "1.e-5",
                        "name": "rtol"
                    },
                    {
                        "default": "1.e-8",
                        "name": "atol"
                    },
                    {
                        "default": "False",
                        "name": "equal_nan"
                    }
                ]
            },
            "isfortran": {
                "args": [
                    {
                        "name": "a"
                    }
                ]
            },
            "isscalar": {
                "args": [
                    {
                        "name": "num"
                    }
                ]
            },
            "load": {
                "args": [
                    {
                        "name": "file"
                    }
                ]
            },
            "outer": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "b"
                    }
                ]
            },
            "require": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "dtype"
                    },
                    {
                        "default": "None",
                        "name": "requirements"
                    }
                ]
            },
            "restoredot": {
                "args": [
                    {
                        "name": ""
                    }
                ]
            },
            "roll": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "shift"
                    },
                    {
                        "default": "None",
                        "name": "axis"
                    }
                ]
            },
            "rollaxis": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "axis"
                    },
                    {
                        "default": "0",
                        "name": "start"
                    }
                ]
            },
            "set_string_function": {
                "args": [
                    {
                        "name": "f"
                    },
                    {
                        "default": "True",
                        "name": "repr"
                    }
                ]
            },
            "setbufsize": {
                "args": [
                    {
                        "name": "size"
                    }
                ]
            },
            "seterr": {
                "args": [
                    {
                        "default": "None",
                        "name": "all"
                    },
                    {
                        "default": "None",
                        "name": "divide"
                    },
                    {
                        "default": "None",
                        "name": "over"
                    },
                    {
                        "default": "None",
                        "name": "under"
                    },
                    {
                        "default": "None",
                        "name": "invalid"
                    }
                ]
            },
            "seterrcall": {
                "args": [
                    {
                        "name": "func"
                    }
                ]
            },
            "tensordot": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "b"
                    },
                    {
                        "default": "2",
                        "name": "axes"
                    }
                ]
            },
            "vdot": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "b"
                    }
                ]
            },
            "within_tol": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "atol"
                    },
                    {
                        "name": "rtol"
                    }
                ]
            }
        }
    },
    "numerictypes": {
        "*": {
            "_add_aliases": {
                "args": [
                    {
                        "name": ""
                    }
                ]
            },
            "_add_array_type": {
                "args": [
                    {
                        "name": "typename"
                    },
                    {
                        "name": "bits"
                    }
                ]
            },
            "_add_integer_aliases": {
                "args": [
                    {
                        "name": ""
                    }
                ]
            },
            "_add_types": {
                "args": [
                    {
                        "name": ""
                    }
                ]
            },
            "_construct_char_code_lookup": {
                "args": [
                    {
                        "name": ""
                    }
                ]
            },
            "_evalname": {
                "args": [
                    {
                        "name": "name"
                    }
                ]
            },
            "_python_type": {
                "args": [
                    {
                        "name": "t"
                    }
                ]
            },
            "_set_array_types": {
                "args": [
                    {
                        "name": ""
                    }
                ]
            },
            "_set_up_aliases": {
                "args": [
                    {
                        "name": ""
                    }
                ]
            },
            "bitname": {
                "args": [
                    {
                        "name": "obj"
                    }
                ]
            },
            "english_capitalize": {
                "args": [
                    {
                        "name": "s"
                    }
                ]
            },
            "english_lower": {
                "args": [
                    {
                        "name": "s"
                    }
                ]
            },
            "english_upper": {
                "args": [
                    {
                        "name": "s"
                    }
                ]
            },
            "issctype": {
                "args": [
                    {
                        "name": "rep"
                    }
                ]
            },
            "issubclass_": {
                "args": [
                    {
                        "name": "arg1"
                    },
                    {
                        "name": "arg2"
                    }
                ]
            },
            "issubdtype": {
                "args": [
                    {
                        "name": "arg1"
                    },
                    {
                        "name": "arg2"
                    }
                ]
            },
            "issubsctype": {
                "args": [
                    {
                        "name": "arg1"
                    },
                    {
                        "name": "arg2"
                    }
                ]
            },
            "maximum_sctype": {
                "args": [
                    {
                        "name": "t"
                    }
                ]
            },
            "obj2sctype": {
                "args": [
                    {
                        "name": "rep"
                    },
                    {
                        "default": "None",
                        "name": "default"
                    }
                ]
            }
        }
    },
    "numpy_distribution": {
        "*": {}
    },
    "pathccompiler": {
        "*": {}
    },
    "pathf95": {
        "*": {}
    },
    "pg": {
        "*": {}
    },
    "polynomial": {
        "*": {},
        "RankWarning": {
            "_raise_power": {
                "args": [
                    {
                        "name": "astr"
                    },
                    {
                        "default": "70",
                        "name": "wrap"
                    }
                ]
            },
            "poly": {
                "args": [
                    {
                        "name": "seq_of_zeros"
                    }
                ]
            },
            "polyadd": {
                "args": [
                    {
                        "name": "a1"
                    },
                    {
                        "name": "a2"
                    }
                ]
            },
            "polyder": {
                "args": [
                    {
                        "name": "p"
                    },
                    {
                        "default": "1",
                        "name": "m"
                    }
                ]
            },
            "polydiv": {
                "args": [
                    {
                        "name": "u"
                    },
                    {
                        "name": "v"
                    }
                ]
            },
            "polyfit": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "name": "deg"
                    },
                    {
                        "default": "None",
                        "name": "rcond"
                    },
                    {
                        "default": "False",
                        "name": "full"
                    },
                    {
                        "default": "None",
                        "name": "w"
                    },
                    {
                        "default": "False",
                        "name": "cov"
                    }
                ]
            },
            "polyint": {
                "args": [
                    {
                        "name": "p"
                    },
                    {
                        "default": "1",
                        "name": "m"
                    },
                    {
                        "default": "None",
                        "name": "k"
                    }
                ]
            },
            "polymul": {
                "args": [
                    {
                        "name": "a1"
                    },
                    {
                        "name": "a2"
                    }
                ]
            },
            "polysub": {
                "args": [
                    {
                        "name": "a1"
                    },
                    {
                        "name": "a2"
                    }
                ]
            },
            "polyval": {
                "args": [
                    {
                        "name": "p"
                    },
                    {
                        "name": "x"
                    }
                ]
            },
            "roots": {
                "args": [
                    {
                        "name": "p"
                    }
                ]
            }
        }
    },
    "polytemplate": {
        "*": {}
    },
    "polyutils": {
        "*": {},
        "PolyDomainError": {},
        "PolyError": {},
        "RankWarning": {}
    },
    "precision": {
        "*": {
            "_fill_table": {
                "args": [
                    {
                        "name": "typecodes"
                    },
                    {
                        "default": "{}",
                        "name": "table"
                    }
                ]
            },
            "_get_precisions": {
                "args": [
                    {
                        "name": "typecodes"
                    }
                ]
            }
        }
    },
    "py3k": {
        "*": {
            "asbytes": {
                "args": [
                    {
                        "name": "s"
                    }
                ]
            },
            "asbytes_nested": {
                "args": [
                    {
                        "name": "x"
                    }
                ]
            },
            "asstr": {
                "args": [
                    {
                        "name": "s"
                    }
                ]
            },
            "asunicode": {
                "args": [
                    {
                        "name": "s"
                    }
                ]
            },
            "asunicode_nested": {
                "args": [
                    {
                        "name": "x"
                    }
                ]
            },
            "getexception": {
                "args": [
                    {
                        "name": ""
                    }
                ]
            },
            "isfileobj": {
                "args": [
                    {
                        "name": "f"
                    }
                ]
            },
            "open_latin1": {
                "args": [
                    {
                        "name": "filename"
                    },
                    {
                        "default": "'r'",
                        "name": "mode"
                    }
                ]
            },
            "sixu": {
                "args": [
                    {
                        "name": "s"
                    }
                ]
            }
        }
    },
    "random_array": {
        "*": {}
    },
    "recfunctions": {
        "*": {
            "_drop_descr": {
                "args": [
                    {
                        "name": "ndtype"
                    },
                    {
                        "name": "drop_names"
                    }
                ]
            },
            "_fix_defaults": {
                "args": [
                    {
                        "name": "output"
                    },
                    {
                        "default": "None",
                        "name": "defaults"
                    }
                ]
            },
            "_fix_output": {
                "args": [
                    {
                        "name": "output"
                    },
                    {
                        "default": "True",
                        "name": "usemask"
                    },
                    {
                        "default": "False",
                        "name": "asrecarray"
                    }
                ]
            },
            "_izip_fields": {
                "args": [
                    {
                        "name": "iterable"
                    }
                ]
            },
            "_izip_fields_flat": {
                "args": [
                    {
                        "name": "iterable"
                    }
                ]
            },
            "_recursive_rename_fields": {
                "args": [
                    {
                        "name": "ndtype"
                    },
                    {
                        "name": "namemapper"
                    }
                ]
            },
            "append_fields": {
                "args": [
                    {
                        "name": "base"
                    },
                    {
                        "name": "names"
                    },
                    {
                        "name": "data"
                    },
                    {
                        "default": "None",
                        "name": "dtypes"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " -1",
                        "name": "fill_value"
                    },
                    {
                        "default": "True",
                        "name": "usemask"
                    },
                    {
                        "default": "False",
                        "name": "asrecarray"
                    }
                ]
            },
            "drop_fields": {
                "args": [
                    {
                        "name": "base"
                    },
                    {
                        "name": "drop_names"
                    },
                    {
                        "default": "True",
                        "name": "usemask"
                    },
                    {
                        "default": "False",
                        "name": "asrecarray"
                    }
                ]
            },
            "find_duplicates": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "None",
                        "name": "key"
                    },
                    {
                        "default": "True",
                        "name": "ignoremask"
                    },
                    {
                        "default": "False",
                        "name": "return_index"
                    }
                ]
            },
            "flatten_descr": {
                "args": [
                    {
                        "name": "ndtype"
                    }
                ]
            },
            "get_fieldstructure": {
                "args": [
                    {
                        "name": "adtype"
                    },
                    {
                        "default": "None",
                        "name": "lastname"
                    },
                    {
                        "default": "None",
                        "name": "parents"
                    },
                    {
                        "name": ""
                    }
                ]
            },
            "get_names": {
                "args": [
                    {
                        "name": "adtype"
                    }
                ]
            },
            "get_names_flat": {
                "args": [
                    {
                        "name": "adtype"
                    }
                ]
            },
            "izip_records": {
                "args": [
                    {
                        "name": "seqarrays"
                    },
                    {
                        "default": "None",
                        "name": "fill_value"
                    },
                    {
                        "default": "True",
                        "name": "flatten"
                    }
                ]
            },
            "join_by": {
                "args": [
                    {
                        "name": "key"
                    },
                    {
                        "name": "r1"
                    },
                    {
                        "name": "r2"
                    },
                    {
                        "default": "'inner'",
                        "name": "jointype"
                    },
                    {
                        "default": "'1'",
                        "name": "r1postfix"
                    },
                    {
                        "default": "'2'",
                        "name": "r2postfix"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "None",
                        "name": "defaults"
                    },
                    {
                        "default": "True",
                        "name": "usemask"
                    },
                    {
                        "default": "False",
                        "name": "asrecarray"
                    }
                ]
            },
            "merge_arrays": {
                "args": [
                    {
                        "name": "seqarrays"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": " -1",
                        "name": "fill_value"
                    },
                    {
                        "default": "False",
                        "name": "flatten"
                    },
                    {
                        "default": "False",
                        "name": "usemask"
                    },
                    {
                        "default": "False",
                        "name": "asrecarray"
                    }
                ]
            },
            "rec_append_fields": {
                "args": [
                    {
                        "name": "base"
                    },
                    {
                        "name": "names"
                    },
                    {
                        "name": "data"
                    },
                    {
                        "default": "None",
                        "name": "dtypes"
                    }
                ]
            },
            "rec_drop_fields": {
                "args": [
                    {
                        "name": "base"
                    },
                    {
                        "name": "drop_names"
                    }
                ]
            },
            "rec_join": {
                "args": [
                    {
                        "name": "key"
                    },
                    {
                        "name": "r1"
                    },
                    {
                        "name": "r2"
                    },
                    {
                        "default": "'inner'",
                        "name": "jointype"
                    },
                    {
                        "default": "'1'",
                        "name": "r1postfix"
                    },
                    {
                        "default": "'2'",
                        "name": "r2postfix"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "None",
                        "name": "defaults"
                    }
                ]
            },
            "recursive_fill_fields": {
                "args": [
                    {
                        "name": "input"
                    },
                    {
                        "name": "output"
                    }
                ]
            },
            "rename_fields": {
                "args": [
                    {
                        "name": "base"
                    },
                    {
                        "name": "namemapper"
                    }
                ]
            },
            "sentinel": {
                "args": [
                    {
                        "default": "([fill_value] * (len(seqarrays) - 1)).pop",
                        "name": "counter"
                    }
                ]
            },
            "stack_arrays": {
                "args": [
                    {
                        "name": "arrays"
                    },
                    {
                        "default": "None",
                        "name": "defaults"
                    },
                    {
                        "default": "True",
                        "name": "usemask"
                    },
                    {
                        "default": "False",
                        "name": "asrecarray"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "False",
                        "name": "autoconvert"
                    }
                ]
            },
            "zip_descr": {
                "args": [
                    {
                        "name": "seqarrays"
                    },
                    {
                        "default": "False",
                        "name": "flatten"
                    }
                ]
            }
        }
    },
    "records": {
        "*": {
            "find_duplicate": {
                "args": [
                    {
                        "name": "list"
                    }
                ]
            }
        },
        "format_parser:": {
            "__init__": {
                "args": [
                    {
                        "name": "formats"
                    },
                    {
                        "name": "names"
                    },
                    {
                        "name": "titles"
                    },
                    {
                        "default": "False",
                        "name": "aligned"
                    },
                    {
                        "default": "None",
                        "name": "byteorder"
                    }
                ]
            },
            "_createdescr": {
                "args": [
                    {
                        "name": "byteorder"
                    }
                ]
            },
            "_parseFormats": {
                "args": [
                    {
                        "name": "formats"
                    },
                    {
                        "default": "0",
                        "name": "aligned"
                    }
                ]
            },
            "_setfieldnames": {
                "args": [
                    {
                        "name": "names"
                    },
                    {
                        "name": "titles"
                    }
                ]
            }
        },
        "record": {
            "__getattribute__": {
                "args": [
                    {
                        "name": "attr"
                    }
                ]
            },
            "__repr__": {
                "args": []
            },
            "__setattr__": {
                "args": [
                    {
                        "name": "attr"
                    },
                    {
                        "name": "val"
                    }
                ]
            },
            "__str__": {
                "args": []
            },
            "pprint": {
                "args": []
            }
        }
    },
    "rng": {
        "*": {},
        "Distribution": {
            "__call__": {
                "args": [
                    {
                        "name": "x"
                    }
                ]
            },
            "__init__": {
                "args": [
                    {
                        "name": "meth"
                    },
                    {
                        "name": "*args"
                    }
                ]
            },
            "_onesample": {
                "args": [
                    {
                        "name": "rng"
                    }
                ]
            },
            "_sample": {
                "args": [
                    {
                        "name": "rng"
                    },
                    {
                        "name": "n"
                    }
                ]
            },
            "density": {
                "args": [
                    {
                        "name": "x"
                    }
                ]
            }
        },
        "ExponentialDistribution": {
            "__init__": {
                "args": [
                    {
                        "name": "lambda_"
                    }
                ]
            },
            "density": {
                "args": [
                    {
                        "name": "x"
                    }
                ]
            }
        },
        "LogNormalDistribution": {
            "__init__": {
                "args": [
                    {
                        "name": "m"
                    },
                    {
                        "name": "s"
                    }
                ]
            },
            "density": {
                "args": [
                    {
                        "name": "x"
                    }
                ]
            }
        },
        "NormalDistribution": {
            "__init__": {
                "args": [
                    {
                        "name": "m"
                    },
                    {
                        "name": "s"
                    }
                ]
            },
            "density": {
                "args": [
                    {
                        "name": "x"
                    }
                ]
            }
        },
        "UniformDistribution": {
            "__init__": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "b"
                    }
                ]
            },
            "density": {
                "args": [
                    {
                        "name": "x"
                    }
                ]
            }
        },
        "error": {}
    },
    "rng_stats": {
        "*": {
            "average": {
                "args": [
                    {
                        "name": "data"
                    }
                ]
            },
            "histogram": {
                "args": [
                    {
                        "name": "data"
                    },
                    {
                        "name": "nbins"
                    },
                    {
                        "default": " None",
                        "name": "range "
                    }
                ]
            },
            "standardDeviation": {
                "args": [
                    {
                        "name": "data"
                    }
                ]
            },
            "variance": {
                "args": [
                    {
                        "name": "data"
                    }
                ]
            }
        }
    },
    "rules": {
        "*": {
            "buildapi": {
                "args": [
                    {
                        "name": "rout"
                    }
                ]
            },
            "buildmodule": {
                "args": [
                    {
                        "name": "m"
                    },
                    {
                        "name": "um"
                    }
                ]
            }
        }
    },
    "scimath": {
        "*": {
            "_fix_int_lt_zero": {
                "args": [
                    {
                        "name": "x"
                    }
                ]
            },
            "_fix_real_abs_gt_1": {
                "args": [
                    {
                        "name": "x"
                    }
                ]
            },
            "_fix_real_lt_zero": {
                "args": [
                    {
                        "name": "x"
                    }
                ]
            },
            "_tocomplex": {
                "args": [
                    {
                        "name": "arr"
                    }
                ]
            },
            "arccos": {
                "args": [
                    {
                        "name": "x"
                    }
                ]
            },
            "arcsin": {
                "args": [
                    {
                        "name": "x"
                    }
                ]
            },
            "arctanh": {
                "args": [
                    {
                        "name": "x"
                    }
                ]
            },
            "log": {
                "args": [
                    {
                        "name": "x"
                    }
                ]
            },
            "log10": {
                "args": [
                    {
                        "name": "x"
                    }
                ]
            },
            "log2": {
                "args": [
                    {
                        "name": "x"
                    }
                ]
            },
            "logn": {
                "args": [
                    {
                        "name": "n"
                    },
                    {
                        "name": "x"
                    }
                ]
            },
            "power": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "p"
                    }
                ]
            },
            "sqrt": {
                "args": [
                    {
                        "name": "x"
                    }
                ]
            }
        }
    },
    "sdist": {
        "*": {}
    },
    "session": {
        "*": {
            "_caller": {
                "args": [
                    {
                        "name": ""
                    }
                ]
            },
            "_callers_globals": {
                "args": [
                    {
                        "name": ""
                    }
                ]
            },
            "_callers_modules": {
                "args": [
                    {
                        "name": ""
                    }
                ]
            },
            "_errout": {
                "args": [
                    {
                        "name": "*args"
                    }
                ]
            },
            "_foo": {
                "args": [
                    {
                        "name": "pass"
                    }
                ]
            },
            "_unknown": {
                "args": [
                    {
                        "name": "_type"
                    }
                ]
            },
            "_update_proxy_types": {
                "args": [
                    {
                        "name": ""
                    }
                ]
            },
            "_verbose": {
                "args": [
                    {
                        "name": "*args"
                    }
                ]
            }
        },
        "_ModuleProxy": {
            "__getnewargs__": {
                "args": []
            },
            "__getstate__": {
                "args": []
            },
            "__new__": {
                "args": [
                    {
                        "name": "_type"
                    },
                    {
                        "name": "name"
                    },
                    {
                        "default": "False",
                        "name": "save"
                    }
                ]
            },
            "_loadmodule": {
                "args": [
                    {
                        "name": "module"
                    }
                ]
            }
        },
        "_ObjectProxy": {
            "__getnewargs__": {
                "args": []
            },
            "__getstate__": {
                "args": []
            },
            "__new__": {
                "args": [
                    {
                        "name": "_type"
                    },
                    {
                        "name": "module"
                    },
                    {
                        "name": "name"
                    },
                    {
                        "name": "_type2"
                    },
                    {
                        "default": "False",
                        "name": "save"
                    }
                ]
            }
        },
        "_ProxyingFailure:": {
            "__init__": {
                "args": [
                    {
                        "name": "module"
                    },
                    {
                        "name": "name"
                    },
                    {
                        "default": "None",
                        "name": "type"
                    }
                ]
            },
            "__repr__": {
                "args": []
            }
        },
        "_SaveSession": {
            "__getnewargs__": {
                "args": []
            },
            "__getstate__": {
                "args": []
            },
            "__new__": {
                "args": [
                    {
                        "name": "_type"
                    },
                    {
                        "name": "keys"
                    },
                    {
                        "default": "False",
                        "name": "save"
                    }
                ]
            }
        }
    },
    "setup": {
        "*": {
            "configuration": {
                "args": [
                    {
                        "default": "''",
                        "name": "parent_package"
                    },
                    {
                        "default": "None",
                        "name": "top_path"
                    }
                ]
            },
            "generate_f2py_py": {
                "args": [
                    {
                        "name": "build_dir"
                    }
                ]
            }
        }
    },
    "setup_common": {
        "*": {}
    },
    "shape_base": {
        "*": {
            "atleast_1d": {
                "args": [
                    {
                        "name": "*arys"
                    }
                ]
            },
            "atleast_2d": {
                "args": [
                    {
                        "name": "*arys"
                    }
                ]
            },
            "atleast_3d": {
                "args": [
                    {
                        "name": "*arys"
                    }
                ]
            },
            "hstack": {
                "args": [
                    {
                        "name": "tup"
                    }
                ]
            },
            "vstack": {
                "args": [
                    {
                        "name": "tup"
                    }
                ]
            }
        }
    },
    "stride_tricks": {
        "*": {}
    },
    "sun": {
        "*": {}
    },
    "system_info": {
        "*": {
            "get_info": {
                "args": [
                    {
                        "name": "name"
                    },
                    {
                        "default": "0",
                        "name": "notfound_action"
                    }
                ]
            },
            "get_standard_file": {
                "args": [
                    {
                        "name": "fname"
                    }
                ]
            },
            "libpaths": {
                "args": [
                    {
                        "name": "paths"
                    },
                    {
                        "name": "bits"
                    }
                ]
            }
        },
        "AtlasNotFoundError": {},
        "BlasNotFoundError": {},
        "BlasSrcNotFoundError": {},
        "DJBFFTNotFoundError": {},
        "FFTWNotFoundError": {},
        "LapackNotFoundError": {},
        "LapackSrcNotFoundError": {},
        "NotFoundError": {},
        "NumericNotFoundError": {},
        "Numeric_info": {},
        "UmfpackNotFoundError": {},
        "X11NotFoundError": {},
        "_numpy_info": {
            "__init__": {
                "args": []
            },
            "calc_info": {
                "args": []
            }
        },
        "_pkg_config_info": {
            "calc_info": {
                "args": []
            },
            "get_config_exe": {
                "args": []
            },
            "get_config_output": {
                "args": [
                    {
                        "name": "config_exe"
                    },
                    {
                        "name": "option"
                    }
                ]
            }
        },
        "agg2_info": {
            "calc_info": {
                "args": []
            },
            "get_paths": {
                "args": [
                    {
                        "name": "section"
                    },
                    {
                        "name": "key"
                    }
                ]
            }
        },
        "amd_info": {
            "calc_info": {
                "args": []
            }
        },
        "atlas_blas_info": {
            "calc_info": {
                "args": []
            }
        },
        "atlas_blas_threads_info": {},
        "atlas_info": {
            "calc_info": {
                "args": []
            },
            "get_paths": {
                "args": [
                    {
                        "name": "section"
                    },
                    {
                        "name": "key"
                    }
                ]
            }
        },
        "atlas_threads_info": {},
        "blas_info": {
            "calc_info": {
                "args": []
            }
        },
        "blas_mkl_info": {},
        "blas_opt_info": {
            "calc_info": {
                "args": []
            }
        },
        "blas_src_info": {
            "calc_info": {
                "args": []
            },
            "get_paths": {
                "args": [
                    {
                        "name": "section"
                    },
                    {
                        "name": "key"
                    }
                ]
            }
        },
        "boost_python_info": {
            "calc_info": {
                "args": []
            },
            "get_paths": {
                "args": [
                    {
                        "name": "section"
                    },
                    {
                        "name": "key"
                    }
                ]
            }
        },
        "dfftw_info": {},
        "dfftw_threads_info": {},
        "djbfft_info": {
            "calc_info": {
                "args": []
            },
            "get_paths": {
                "args": [
                    {
                        "name": "section"
                    },
                    {
                        "name": "key"
                    }
                ]
            }
        },
        "f2py_info": {
            "calc_info": {
                "args": []
            }
        },
        "fft_opt_info": {
            "calc_info": {
                "args": []
            }
        },
        "fftw2_info": {},
        "fftw3_info": {},
        "fftw_info": {
            "calc_info": {
                "args": []
            },
            "calc_ver_info": {
                "args": [
                    {
                        "name": "ver_param"
                    }
                ]
            }
        },
        "fftw_threads_info": {},
        "freetype2_info": {},
        "gdk_2_info": {},
        "gdk_info": {},
        "gdk_pixbuf_2_info": {},
        "gdk_pixbuf_xlib_2_info": {},
        "gdk_x11_2_info": {},
        "gtkp_2_info": {},
        "gtkp_x11_2_info": {},
        "lapack_atlas_info": {},
        "lapack_atlas_threads_info": {},
        "lapack_info": {
            "calc_info": {
                "args": []
            }
        },
        "lapack_mkl_info": {
            "calc_info": {
                "args": []
            }
        },
        "lapack_opt_info": {
            "calc_info": {
                "args": []
            }
        },
        "lapack_src_info": {
            "calc_info": {
                "args": []
            },
            "get_atlas_version": {
                "args": [
                    {
                        "name": "**config"
                    }
                ]
            },
            "get_paths": {
                "args": [
                    {
                        "name": "section"
                    },
                    {
                        "name": "key"
                    }
                ]
            }
        },
        "mkl_info": {
            "__init__": {
                "args": []
            },
            "calc_info": {
                "args": []
            },
            "get_mkl_rootdir": {
                "args": []
            }
        },
        "numarray_info": {},
        "numerix_info": {
            "calc_info": {
                "args": []
            }
        },
        "numpy_info": {},
        "openblas_info": {
            "calc_info": {
                "args": []
            }
        },
        "sfftw_info": {},
        "sfftw_threads_info": {},
        "system_info:": {
            "__init__": {
                "args": [
                    {
                        "name": ""
                    },
                    {
                        "default": "default_lib_dirs",
                        "name": "default_lib_dirs"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "default_include_dirs",
                        "name": "default_include_dirs"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "1",
                        "name": "verbosity"
                    },
                    {
                        "name": ""
                    },
                    {
                        "name": ""
                    }
                ]
            },
            "_check_libs": {
                "args": [
                    {
                        "name": "lib_dirs"
                    },
                    {
                        "name": "libs"
                    },
                    {
                        "name": "opt_libs"
                    },
                    {
                        "name": "exts"
                    }
                ]
            },
            "_lib_list": {
                "args": [
                    {
                        "name": "lib_dir"
                    },
                    {
                        "name": "libs"
                    },
                    {
                        "name": "exts"
                    }
                ]
            },
            "calc_libraries_info": {
                "args": []
            },
            "check_libs": {
                "args": [
                    {
                        "name": "lib_dirs"
                    },
                    {
                        "name": "libs"
                    },
                    {
                        "default": "[]",
                        "name": "opt_libs"
                    }
                ]
            },
            "check_libs2": {
                "args": [
                    {
                        "name": "lib_dirs"
                    },
                    {
                        "name": "libs"
                    },
                    {
                        "default": "[]",
                        "name": "opt_libs"
                    }
                ]
            },
            "combine_paths": {
                "args": [
                    {
                        "name": "*args"
                    }
                ]
            },
            "get_include_dirs": {
                "args": [
                    {
                        "default": "'include_dirs'",
                        "name": "key"
                    }
                ]
            },
            "get_info": {
                "args": [
                    {
                        "default": "0",
                        "name": "notfound_action"
                    }
                ]
            },
            "get_lib_dirs": {
                "args": [
                    {
                        "default": "'library_dirs'",
                        "name": "key"
                    }
                ]
            },
            "get_libraries": {
                "args": [
                    {
                        "default": "'libraries'",
                        "name": "key"
                    }
                ]
            },
            "get_libs": {
                "args": [
                    {
                        "name": "key"
                    },
                    {
                        "name": "default"
                    }
                ]
            },
            "get_paths": {
                "args": [
                    {
                        "name": "section"
                    },
                    {
                        "name": "key"
                    }
                ]
            },
            "get_src_dirs": {
                "args": [
                    {
                        "default": "'src_dirs'",
                        "name": "key"
                    }
                ]
            },
            "has_info": {
                "args": []
            },
            "library_extensions": {
                "args": []
            },
            "parse_config_files": {
                "args": []
            },
            "set_info": {
                "args": [
                    {
                        "name": "**info"
                    }
                ]
            }
        },
        "wx_info": {},
        "x11_info": {
            "__init__": {
                "args": []
            },
            "calc_info": {
                "args": []
            }
        },
        "xft_info": {}
    },
    "testutils": {
        "*": {
            "": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "b"
                    },
                    {
                        "default": "True",
                        "name": "fill_value"
                    },
                    {
                        "default": "1e-5",
                        "name": "rtol"
                    },
                    {
                        "default": "1e-8",
                        "name": "atol"
                    }
                ]
            },
            "_assert_equal_on_sequences": {
                "args": [
                    {
                        "name": "actual"
                    },
                    {
                        "name": "desired"
                    },
                    {
                        "default": "''",
                        "name": "err_msg"
                    }
                ]
            },
            "almost": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "b"
                    },
                    {
                        "default": "6",
                        "name": "decimal"
                    },
                    {
                        "default": "True",
                        "name": "fill_value"
                    }
                ]
            },
            "assert_almost_equal": {
                "args": [
                    {
                        "name": "actual"
                    },
                    {
                        "name": "desired"
                    },
                    {
                        "default": "7",
                        "name": "decimal"
                    },
                    {
                        "default": "''",
                        "name": "err_msg"
                    },
                    {
                        "default": "True",
                        "name": "verbose"
                    }
                ]
            },
            "assert_array_almost_equal": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "default": "6",
                        "name": "decimal"
                    },
                    {
                        "default": "''",
                        "name": "err_msg"
                    },
                    {
                        "default": "True",
                        "name": "verbose"
                    }
                ]
            },
            "assert_array_approx_equal": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "default": "6",
                        "name": "decimal"
                    },
                    {
                        "default": "''",
                        "name": "err_msg"
                    },
                    {
                        "default": "True",
                        "name": "verbose"
                    }
                ]
            },
            "assert_array_compare": {
                "args": [
                    {
                        "name": "comparison"
                    },
                    {
                        "name": "x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "default": "''",
                        "name": "err_msg"
                    },
                    {
                        "default": "True",
                        "name": "verbose"
                    },
                    {
                        "default": "''",
                        "name": "header"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "True",
                        "name": "fill_value"
                    }
                ]
            },
            "assert_array_equal": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "default": "''",
                        "name": "err_msg"
                    },
                    {
                        "default": "True",
                        "name": "verbose"
                    }
                ]
            },
            "assert_array_less": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "default": "''",
                        "name": "err_msg"
                    },
                    {
                        "default": "True",
                        "name": "verbose"
                    }
                ]
            },
            "assert_equal": {
                "args": [
                    {
                        "name": "actual"
                    },
                    {
                        "name": "desired"
                    },
                    {
                        "default": "''",
                        "name": "err_msg"
                    }
                ]
            },
            "assert_equal_records": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "b"
                    }
                ]
            },
            "assert_mask_equal": {
                "args": [
                    {
                        "name": "m1"
                    },
                    {
                        "name": "m2"
                    },
                    {
                        "default": "''",
                        "name": "err_msg"
                    }
                ]
            },
            "compare": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "y"
                    }
                ]
            },
            "fail_if_array_equal": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "default": "''",
                        "name": "err_msg"
                    },
                    {
                        "default": "True",
                        "name": "verbose"
                    }
                ]
            },
            "fail_if_equal": {
                "args": [
                    {
                        "name": "actual"
                    },
                    {
                        "name": "desired"
                    },
                    {
                        "default": "''",
                        "name": "err_msg"
                    },
                    {
                        "name": ""
                    }
                ]
            }
        }
    },
    "timer_comparison": {
        "*": {}
    },
    "twodim_base": {
        "*": {
            "diag": {
                "args": [
                    {
                        "name": "v"
                    },
                    {
                        "default": "0",
                        "name": "k"
                    }
                ]
            },
            "diagflat": {
                "args": [
                    {
                        "name": "v"
                    },
                    {
                        "default": "0",
                        "name": "k"
                    }
                ]
            },
            "eye": {
                "args": [
                    {
                        "name": "N"
                    },
                    {
                        "default": "None",
                        "name": "M"
                    },
                    {
                        "default": "0",
                        "name": "k"
                    },
                    {
                        "default": "float",
                        "name": "dtype"
                    }
                ]
            },
            "fliplr": {
                "args": [
                    {
                        "name": "m"
                    }
                ]
            },
            "flipud": {
                "args": [
                    {
                        "name": "m"
                    }
                ]
            },
            "histogram2d": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "y"
                    },
                    {
                        "default": "10",
                        "name": "bins"
                    },
                    {
                        "default": "None",
                        "name": "range"
                    },
                    {
                        "default": "False",
                        "name": "normed"
                    },
                    {
                        "default": "None",
                        "name": "weights"
                    }
                ]
            },
            "mask_indices": {
                "args": [
                    {
                        "name": "n"
                    },
                    {
                        "name": "mask_func"
                    },
                    {
                        "default": "0",
                        "name": "k"
                    }
                ]
            },
            "rot90": {
                "args": [
                    {
                        "name": "m"
                    },
                    {
                        "default": "1",
                        "name": "k"
                    }
                ]
            },
            "tri": {
                "args": [
                    {
                        "name": "N"
                    },
                    {
                        "default": "None",
                        "name": "M"
                    },
                    {
                        "default": "0",
                        "name": "k"
                    },
                    {
                        "default": "float",
                        "name": "dtype"
                    }
                ]
            },
            "tril": {
                "args": [
                    {
                        "name": "m"
                    },
                    {
                        "default": "0",
                        "name": "k"
                    }
                ]
            },
            "tril_indices": {
                "args": [
                    {
                        "name": "n"
                    },
                    {
                        "default": "0",
                        "name": "k"
                    }
                ]
            },
            "tril_indices_from": {
                "args": [
                    {
                        "name": "arr"
                    },
                    {
                        "default": "0",
                        "name": "k"
                    }
                ]
            },
            "triu": {
                "args": [
                    {
                        "name": "m"
                    },
                    {
                        "default": "0",
                        "name": "k"
                    }
                ]
            },
            "triu_indices": {
                "args": [
                    {
                        "name": "n"
                    },
                    {
                        "default": "0",
                        "name": "k"
                    }
                ]
            },
            "triu_indices_from": {
                "args": [
                    {
                        "name": "arr"
                    },
                    {
                        "default": "0",
                        "name": "k"
                    }
                ]
            },
            "vander": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "default": "None",
                        "name": "N"
                    }
                ]
            }
        }
    },
    "type_check": {
        "*": {
            "_getmaxmin": {
                "args": [
                    {
                        "name": "t"
                    }
                ]
            },
            "asfarray": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "_nx.float_",
                        "name": "dtype"
                    }
                ]
            },
            "asscalar": {
                "args": [
                    {
                        "name": "a"
                    }
                ]
            },
            "common_type": {
                "args": [
                    {
                        "name": "*arrays"
                    }
                ]
            },
            "imag": {
                "args": [
                    {
                        "name": "val"
                    }
                ]
            },
            "iscomplex": {
                "args": [
                    {
                        "name": "x"
                    }
                ]
            },
            "iscomplexobj": {
                "args": [
                    {
                        "name": "x"
                    }
                ]
            },
            "isreal": {
                "args": [
                    {
                        "name": "x"
                    }
                ]
            },
            "isrealobj": {
                "args": [
                    {
                        "name": "x"
                    }
                ]
            },
            "mintypecode": {
                "args": [
                    {
                        "name": "typechars"
                    },
                    {
                        "default": "'GDFgdf'",
                        "name": "typeset"
                    },
                    {
                        "default": "'d'",
                        "name": "default"
                    }
                ]
            },
            "nan_to_num": {
                "args": [
                    {
                        "name": "x"
                    }
                ]
            },
            "real": {
                "args": [
                    {
                        "name": "val"
                    }
                ]
            },
            "real_if_close": {
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "default": "100",
                        "name": "tol"
                    }
                ]
            },
            "typename": {
                "args": [
                    {
                        "name": "char"
                    }
                ]
            }
        }
    },
    "typeconv": {
        "*": {
            "convtypecode": {
                "args": [
                    {
                        "name": "typecode"
                    },
                    {
                        "default": "None",
                        "name": "dtype"
                    }
                ]
            },
            "convtypecode2": {
                "args": [
                    {
                        "name": "typecode"
                    },
                    {
                        "default": "None",
                        "name": "dtype"
                    }
                ]
            }
        }
    },
    "ufunclike": {
        "*": {
            "fix": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "default": "None",
                        "name": "y"
                    }
                ]
            },
            "isneginf": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "default": "None",
                        "name": "y"
                    }
                ]
            },
            "isposinf": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "default": "None",
                        "name": "y"
                    }
                ]
            }
        }
    },
    "ufuncs": {
        "*": {}
    },
    "unixccompiler": {
        "*": {
            "UnixCCompiler__compile": {
                "args": [
                    {
                        "name": "obj"
                    },
                    {
                        "name": "src"
                    },
                    {
                        "name": "ext"
                    },
                    {
                        "name": "cc_args"
                    },
                    {
                        "name": "extra_postargs"
                    },
                    {
                        "name": "pp_opts"
                    }
                ]
            },
            "UnixCCompiler_create_static_lib": {
                "args": [
                    {
                        "name": "objects"
                    },
                    {
                        "name": "output_libname"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "None",
                        "name": "output_dir"
                    },
                    {
                        "default": "0",
                        "name": "debug"
                    },
                    {
                        "default": "None",
                        "name": "target_lang"
                    }
                ]
            }
        }
    },
    "use_rules": {
        "*": {
            "buildusevar": {
                "args": [
                    {
                        "name": "name"
                    },
                    {
                        "name": "realname"
                    },
                    {
                        "name": "vars"
                    },
                    {
                        "name": "usemodulename"
                    }
                ]
            },
            "buildusevars": {
                "args": [
                    {
                        "name": "m"
                    },
                    {
                        "name": "r"
                    }
                ]
            }
        }
    },
    "user_array": {
        "*": {}
    },
    "util": {
        "*": {},
        "MathDomainError": {},
        "UnderflowError": {}
    },
    "utils": {
        "*": {
            "_set_function_name": {
                "args": [
                    {
                        "name": "func"
                    },
                    {
                        "name": "name"
                    }
                ]
            },
            "get_include": {
                "args": [
                    {
                        "name": ""
                    }
                ]
            },
            "get_numarray_include": {
                "args": [
                    {
                        "default": "None",
                        "name": "type"
                    }
                ]
            }
        },
        "_Deprecate": {
            "__call__": {
                "args": [
                    {
                        "name": "func"
                    },
                    {
                        "name": "*args"
                    },
                    {
                        "name": "**kwargs"
                    }
                ]
            },
            "__init__": {
                "args": [
                    {
                        "default": "None",
                        "name": "old_name"
                    },
                    {
                        "default": "None",
                        "name": "new_name"
                    },
                    {
                        "default": "None",
                        "name": "message"
                    }
                ]
            },
            "_getmembers": {
                "args": [
                    {
                        "name": "item"
                    }
                ]
            },
            "_lookfor_generate_cache": {
                "args": [
                    {
                        "name": "module"
                    },
                    {
                        "name": "import_modules"
                    },
                    {
                        "name": "regenerate"
                    }
                ]
            },
            "_makenamedict": {
                "args": [
                    {
                        "default": "'numpy'",
                        "name": "module"
                    }
                ]
            },
            "_split_line": {
                "args": [
                    {
                        "name": "name"
                    },
                    {
                        "name": "arguments"
                    },
                    {
                        "name": "width"
                    }
                ]
            },
            "byte_bounds": {
                "args": [
                    {
                        "name": "a"
                    }
                ]
            },
            "deprecate": {
                "args": [
                    {
                        "name": "*args"
                    },
                    {
                        "name": "**kwargs"
                    }
                ]
            },
            "info": {
                "args": [
                    {
                        "default": "None",
                        "name": "object"
                    },
                    {
                        "default": "76",
                        "name": "maxwidth"
                    },
                    {
                        "default": "sys.stdout",
                        "name": "output"
                    },
                    {
                        "default": "'numpy'",
                        "name": "toplevel"
                    }
                ]
            },
            "interp": {
                "args": [
                    {
                        "name": "x"
                    },
                    {
                        "name": "xp"
                    },
                    {
                        "name": "fp"
                    },
                    {
                        "default": "None",
                        "name": "left"
                    },
                    {
                        "default": "None",
                        "name": "right"
                    }
                ]
            },
            "lookfor": {
                "args": [
                    {
                        "name": "what"
                    },
                    {
                        "default": "None",
                        "name": "module"
                    },
                    {
                        "default": "True",
                        "name": "import_modules"
                    },
                    {
                        "default": "False",
                        "name": "regenerate"
                    },
                    {
                        "name": ""
                    },
                    {
                        "default": "None",
                        "name": "output"
                    }
                ]
            },
            "newfunc": {
                "args": [
                    {
                        "name": "*args"
                    },
                    {
                        "name": "**kwds"
                    }
                ]
            },
            "relevance": {
                "args": [
                    {
                        "name": "name"
                    },
                    {
                        "name": "docstr"
                    },
                    {
                        "name": "kind"
                    },
                    {
                        "name": "index"
                    }
                ]
            },
            "relevance_value": {
                "args": [
                    {
                        "name": "a"
                    }
                ]
            },
            "source": {
                "args": [
                    {
                        "name": "object"
                    },
                    {
                        "default": "sys.stdout",
                        "name": "output"
                    }
                ]
            },
            "who": {
                "args": [
                    {
                        "default": "None",
                        "name": "vardict"
                    }
                ]
            }
        }
    },
    "vast": {
        "*": {}
    },
    "version": {
        "*": {}
    }
}